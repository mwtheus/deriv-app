{"version":3,"file":"account/js/account.Sections_Assessment_TradingAssessment_index_js.610f22bea42b5be9171d.js","mappings":"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","sources":["webpack://@deriv/account/./Components/trading-assessment/risk-tolerance-warning-modal.tsx","webpack://@deriv/account/./Components/trading-assessment/test-warning-modal.tsx","webpack://@deriv/account/./Constants/trading-assessment-questions.tsx","webpack://@deriv/account/./Components/trading-assessment/trading-assessment-dropdown.tsx","webpack://@deriv/account/./Constants/trading-assessment.ts","webpack://@deriv/account/./Components/trading-assessment/trading-assessment-radio-buttons.tsx","webpack://@deriv/account/./Components/trading-assessment/trading-assessment-form.tsx","webpack://@deriv/account/./Sections/Assessment/TradingAssessment/trading-assessment.jsx","webpack://@deriv/account/./Sections/Assessment/TradingAssessment/index.js"],"sourcesContent":["import React from 'react';\nimport { Button, Icon, Modal, Text, MobileDialog } from '@deriv/components';\nimport { useTranslations } from '@deriv-com/translations';\nimport { useDevice } from '@deriv-com/ui';\n\ntype RiskToleranceWarningModalProps = {\n    show_risk_modal: boolean;\n    handleAcceptRisk: () => void;\n    title: string;\n    button_text?: string;\n    body_content: JSX.Element;\n    has_sub_header?: boolean;\n};\n\nconst RiskToleranceWarningModal = ({\n    show_risk_modal,\n    handleAcceptRisk,\n    title,\n    button_text,\n    body_content,\n    has_sub_header = false,\n}: RiskToleranceWarningModalProps) => {\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    return (\n        <React.Fragment>\n            {isDesktop ? (\n                <Modal\n                    width='44rem'\n                    title={title}\n                    height='41rem'\n                    is_open={show_risk_modal}\n                    className='center-risk-modal'\n                    toggleModal={handleAcceptRisk}\n                    has_close_icon={false}\n                >\n                    <Modal.Body>\n                        <Icon icon='IcRedWarning' size='63' />\n                        <Text as='p' size='xs' align='center' line_height='s' className='risk-acceptance__text'>\n                            {body_content}\n                        </Text>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            type='button'\n                            large\n                            text={button_text ?? localize('OK')}\n                            primary\n                            onClick={handleAcceptRisk}\n                        />\n                    </Modal.Footer>\n                </Modal>\n            ) : (\n                <MobileDialog\n                    visible={show_risk_modal}\n                    title={has_sub_header ? localize('Trading Experience Assessment') : title}\n                    portal_element_id='modal_root'\n                    has_close_icon={false}\n                >\n                    <Modal.Body className='risk-tolerance-modal'>\n                        {has_sub_header ? (\n                            <Text\n                                size='xs'\n                                line_height='s'\n                                weight='bold'\n                                as='p'\n                                className='risk-tolerance-modal__title'\n                            >\n                                {title}\n                                <div className='risk-tolerance-modal__title--separator' />\n                            </Text>\n                        ) : null}\n                        <div className='risk-tolerance-modal__wrapper'>\n                            <Icon icon='IcRedWarning' size='65' />\n                            <Text as='p' size='xs' align='center' line_height='l' className='risk-acceptance__text'>\n                                {body_content}\n                            </Text>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer className='risk-tolerance-modal__footer'>\n                        <Button\n                            type='button'\n                            large\n                            text={button_text ?? localize('OK')}\n                            primary\n                            onClick={handleAcceptRisk}\n                        />\n                    </Modal.Footer>\n                </MobileDialog>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default RiskToleranceWarningModal;\n","import React from 'react';\nimport { MobileDialog, Modal } from '@deriv/components';\nimport { useTranslations } from '@deriv-com/translations';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TestWarningModalProps = {\n    show_risk_modal: boolean;\n    body_content: JSX.Element;\n    footer_content: JSX.Element;\n};\n\nconst TestWarningModal = ({ show_risk_modal, body_content, footer_content }: TestWarningModalProps) => {\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    return (\n        <React.Fragment>\n            {isDesktop ? (\n                <Modal\n                    width='44rem'\n                    has_close_icon={false}\n                    title={localize('Appropriateness Test Warning')}\n                    is_open={show_risk_modal}\n                >\n                    <Modal.Body>{body_content}</Modal.Body>\n                    <Modal.Footer>{footer_content}</Modal.Footer>\n                </Modal>\n            ) : (\n                <MobileDialog\n                    wrapper_classname='test-warning'\n                    portal_element_id='modal_root'\n                    visible={show_risk_modal}\n                    title={localize('Appropriateness Test Warning')}\n                    has_close_icon={false}\n                >\n                    <Modal.Body>{body_content}</Modal.Body>\n                    <Modal.Footer>{footer_content}</Modal.Footer>\n                </MobileDialog>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default TestWarningModal;\n","import { localize } from '@deriv/translations';\n\nexport const getTradingAssessmentQuestions = () => [\n    {\n        question_text: localize('Do you understand that you can lose all the money you use for trading?'),\n        section: 'risk_tolerance',\n        answer_options: [\n            { text: localize('Yes'), value: 'Yes' },\n            { text: localize('No'), value: 'No' },\n        ],\n        form_control: 'risk_tolerance',\n        field_type: 'radio',\n    },\n    {\n        question_text: localize('What expertise and experience do you have in online trading?'),\n        section: 'source_of_experience',\n        form_control: 'source_of_experience',\n        answer_options: [\n            {\n                text: localize(\n                    'I have an academic degree, professional certification, and/or work experience related to financial services.'\n                ),\n                value: 'I have an academic degree, professional certification, and/or work experience.',\n            },\n            {\n                text: localize(\n                    'I trade forex CFDs and other complex financial instruments regularly on other platforms.'\n                ),\n                value: 'I trade forex CFDs and other complex financial instruments.',\n            },\n            {\n                text: localize('I have attended seminars, training, and/or workshops related to trading.'),\n                value: 'I have attended seminars, training, and/or workshops.',\n            },\n            {\n                text: localize('I am interested in trading but have very little experience.'),\n                value: 'I have little experience.',\n            },\n            {\n                text: localize('I have no knowledge and experience in trading at all.'),\n                value: 'I have no knowledge.',\n            },\n        ],\n        field_type: 'radio',\n    },\n    {\n        section: 'trading_experience',\n        questions: [\n            {\n                question_text: localize('How much experience do you have in CFD trading?'),\n                field_type: 'dropdown',\n                form_control: 'cfd_experience',\n                answer_options: [\n                    {\n                        text: localize('No experience'),\n                        value: 'No experience',\n                    },\n                    {\n                        text: localize('Less than a year'),\n                        value: 'Less than a year',\n                    },\n                    {\n                        text: localize('1 - 2 years'),\n                        value: '1 - 2 years',\n                    },\n                    {\n                        text: localize('Over 3 years'),\n                        value: 'Over 3 years',\n                    },\n                ],\n            },\n            {\n                question_text: localize('How many CFD trades have you placed in the past 12 months?'),\n                field_type: 'dropdown',\n                form_control: 'cfd_frequency',\n                answer_options: [\n                    {\n                        text: localize('None'),\n                        value: 'No transactions in the past 12 months',\n                    },\n                    {\n                        text: '1 - 5',\n                        value: '1 - 5 transactions in the past 12 months',\n                    },\n                    {\n                        text: '6 - 10',\n                        value: '6 - 10 transactions in the past 12 months',\n                    },\n                    {\n                        text: '11 - 39',\n                        value: '11 - 39 transactions in the past 12 months',\n                    },\n                    {\n                        text: localize('40 or more'),\n                        value: '40 transactions or more in the past 12 months',\n                    },\n                ],\n            },\n            {\n                question_text: localize('How long have you been trading financial products other than CFDs?'),\n                field_type: 'dropdown',\n                form_control: 'trading_experience_financial_instruments',\n                answer_options: [\n                    {\n                        text: localize('No experience'),\n                        value: 'No experience',\n                    },\n                    {\n                        text: localize('Less than a year'),\n                        value: 'Less than a year',\n                    },\n                    {\n                        text: localize('1 - 2 years'),\n                        value: '1 - 2 years',\n                    },\n                    {\n                        text: localize('Over 3 years'),\n                        value: 'Over 3 years',\n                    },\n                ],\n            },\n            {\n                question_text: localize(\n                    'In the past 12 months, how many trades have you placed with financial products other than CFDs?'\n                ),\n                form_control: 'trading_frequency_financial_instruments',\n                field_type: 'dropdown',\n                answer_options: [\n                    {\n                        text: localize('None'),\n                        value: 'No transactions in the past 12 months',\n                    },\n                    {\n                        text: '1 - 5',\n                        value: '1 - 5 transactions in the past 12 months',\n                    },\n                    {\n                        text: '6 - 10',\n                        value: '6 - 10 transactions in the past 12 months',\n                    },\n                    {\n                        text: '11 - 39',\n                        value: '11 - 39 transactions in the past 12 months',\n                    },\n                    {\n                        text: localize('40 or more'),\n                        value: '40 transactions or more in the past 12 months',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        question_text: localize('In your understanding, CFD trading allows you to'),\n        section: 'trading_knowledge',\n        form_control: 'cfd_trading_definition',\n        field_type: 'radio',\n        answer_options: [\n            {\n                text: localize('Purchase commodities or shares of a company.'),\n                value: 'Purchase shares of a company or physical commodities.',\n            },\n            {\n                text: localize(\n                    'Place a position on the price movement of an asset where the outcome is a fixed return or nothing at all.'\n                ),\n                value: 'Place a bet on the price movement.',\n            },\n            {\n                text: localize('Speculate on the price movement of an asset without actually owning it.'),\n                value: 'Speculate on the price movement.',\n            },\n            {\n                text: localize('Make a long-term investment for a guaranteed profit.'),\n                value: 'Make a long-term investment.',\n            },\n        ],\n    },\n    {\n        question_text: localize('How does leverage affect CFD trading?'),\n        section: 'trading_knowledge',\n        form_control: 'leverage_impact_trading',\n        field_type: 'radio',\n        answer_options: [\n            {\n                text: localize('Leverage helps to mitigate risk.'),\n                value: 'Leverage is a risk mitigation technique.',\n            },\n            {\n                text: localize('Leverage prevents you from opening large positions.'),\n                value: 'Leverage prevents you from opening large positions.',\n            },\n            { text: localize('Leverage guarantees profits.'), value: 'Leverage guarantees profits.' },\n            {\n                text: localize(\n                    'Leverage lets you open large positions for a fraction of trade value, which may result in increased profit or loss.'\n                ),\n                value: \"Leverage lets you open larger positions for a fraction of the trade's value.\",\n            },\n        ],\n    },\n    {\n        question_text: localize(\n            'Leverage trading carries significant risks, making risk management tools like stop loss essential. What can stop loss do?'\n        ),\n        section: 'trading_knowledge',\n        form_control: 'leverage_trading_high_risk_stop_loss',\n        field_type: 'radio',\n        answer_options: [\n            {\n                text: localize('Cancel your trade at any time within a specified timeframe.'),\n                value: 'Cancel your trade at any time within a chosen timeframe.',\n            },\n            {\n                text: localize(\n                    'Close your trade automatically when the loss is equal to or more than a specified amount, as long as there is adequate market liquidity.'\n                ),\n                value: 'Close your trade automatically when the loss is more than or equal to a specific amount.',\n            },\n            {\n                text: localize(\n                    'Close your trade automatically when the profit is equal to or more than a specified amount, as long as there is adequate market liquidity.'\n                ),\n                value: 'Close your trade automatically when the profit is more than or equal to a specific amount.',\n            },\n            {\n                text: localize('Make a guaranteed profit on your trade.'),\n                value: 'Make a guaranteed profit on your trade.',\n            },\n        ],\n    },\n    {\n        question_text: localize('When are you required to pay an initial margin?'),\n        section: 'trading_knowledge',\n        form_control: 'required_initial_margin',\n        field_type: 'radio',\n        answer_options: [\n            {\n                text: localize('When opening a leveraged CFD trade.'),\n                value: 'When opening a Leveraged CFD trade.',\n            },\n            { text: localize('When trading multipliers.'), value: 'When trading Multipliers.' },\n            {\n                text: localize('When buying shares of a company.'),\n                value: 'When buying shares of a company.',\n            },\n            { text: localize('All of the above.'), value: 'All of the above.' },\n        ],\n    },\n];\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Field } from 'formik';\nimport { Dropdown, Text, SelectNative } from '@deriv/components';\nimport { useTranslations } from '@deriv-com/translations';\nimport { TTradingAssessmentForm, TQuestion } from 'Types';\nimport { MAX_QUESTION_TEXT_LENGTH } from '../../Constants/trading-assessment';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TradingAssessmentDropdownProps = {\n    disabled_items: string[];\n    item_list: TQuestion[];\n    onChange: (\n        e: React.ChangeEvent<HTMLSelectElement>,\n        form_control: keyof TTradingAssessmentForm,\n        setFieldValue: (field: string, value: string, shouldValidate?: boolean) => void\n    ) => void;\n    values: TTradingAssessmentForm;\n    setFieldValue: (field: string, value: string, shouldValidate?: boolean) => void;\n    setEnableNextSection: (enable: boolean) => void;\n};\n\ntype TField = {\n    field: {\n        name: string;\n        value: string;\n        onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n    };\n    meta: {\n        error: string;\n        touched: string;\n    };\n};\n\nconst TradingAssessmentDropdown = ({\n    disabled_items,\n    item_list,\n    onChange,\n    values,\n    setFieldValue,\n    setEnableNextSection,\n}: TradingAssessmentDropdownProps) => {\n    React.useEffect(() => {\n        checkIfAllFieldsFilled();\n    }, [values]);\n\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    const checkIfAllFieldsFilled = () => {\n        if (values) {\n            setEnableNextSection(\n                Boolean(\n                    values.cfd_experience &&\n                        values.cfd_frequency &&\n                        values.trading_experience_financial_instruments &&\n                        values.trading_frequency_financial_instruments\n                )\n            );\n        }\n    };\n\n    return (\n        <div className='trading-assessment__wrapper__dropdown'>\n            {item_list.map(question => (\n                <Field name={question.form_control} key={question.form_control}>\n                    {({ field, meta }: TField) => {\n                        const should_extend_trading_frequency_field =\n                            question.form_control === 'trading_frequency_financial_instruments' &&\n                            question?.question_text.length > MAX_QUESTION_TEXT_LENGTH;\n\n                        return (\n                            <React.Fragment>\n                                {isDesktop ? (\n                                    <Dropdown\n                                        {...field}\n                                        classNameDisplay={clsx({\n                                            'trading-frequency--field': should_extend_trading_frequency_field,\n                                        })}\n                                        is_align_text_left\n                                        name={question?.form_control}\n                                        placeholder={question?.question_text}\n                                        list={question?.answer_options}\n                                        onChange={e =>\n                                            onChange(\n                                                e as React.ChangeEvent<HTMLSelectElement>,\n                                                question.form_control,\n                                                setFieldValue\n                                            )\n                                        }\n                                        value={values[question.form_control]}\n                                        disabled={disabled_items.includes(question.form_control)}\n                                        error={meta.touched && meta.error}\n                                    />\n                                ) : (\n                                    <React.Fragment>\n                                        <Text as='h1' color='prominent' weight='bold' size='xs'>\n                                            {question?.question_text}\n                                        </Text>\n                                        <SelectNative\n                                            {...field}\n                                            placeholder={localize('Please select')}\n                                            label={localize('Please select')}\n                                            name={question?.form_control}\n                                            list_items={question?.answer_options}\n                                            onChange={e => {\n                                                onChange(e, question.form_control, setFieldValue);\n                                            }}\n                                            value={values[question.form_control]}\n                                            hide_top_placeholder\n                                            disabled={disabled_items.includes(question.form_control)}\n                                            error={meta.touched && meta.error}\n                                        />\n                                    </React.Fragment>\n                                )}\n                            </React.Fragment>\n                        );\n                    }}\n                </Field>\n            ))}\n        </div>\n    );\n};\n\nexport default TradingAssessmentDropdown;\n","export const MAX_QUESTION_TEXT_LENGTH = 90;\n","import React from 'react';\nimport { Field } from 'formik';\nimport { Text, RadioGroup } from '@deriv/components';\nimport { TTradingAssessmentForm } from 'Types';\n\ntype TradingAssessmentRadioButtonProps = {\n    disabled_items: string[];\n    text?: string;\n    list: { text: string; value: string }[];\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    values: TTradingAssessmentForm;\n    form_control: keyof TTradingAssessmentForm;\n    setEnableNextSection: (enable: boolean) => void;\n};\n\nconst TradingAssessmentRadioButton = ({\n    disabled_items,\n    text,\n    list,\n    onChange,\n    values,\n    form_control,\n    setEnableNextSection,\n}: TradingAssessmentRadioButtonProps) => {\n    React.useEffect(() => {\n        setEnableNextSection(!!values[form_control]);\n    }, [form_control, setEnableNextSection, values]);\n\n    return (\n        <div className='trading-assessment__wrapper__question'>\n            <Text as='h1' color='prominent' weight='bold' size='xs'>\n                {text}\n            </Text>\n            <Field name={form_control}>\n                {() => (\n                    <RadioGroup\n                        className='trading-assessment__wrapper__question--radio-group'\n                        name={form_control}\n                        should_wrap_items\n                        required\n                        selected={values[form_control]}\n                        onToggle={e => {\n                            onChange(e);\n                            setEnableNextSection(true);\n                        }}\n                    >\n                        {list.map(answer => (\n                            <RadioGroup.Item\n                                className='trading-assessment__wrapper__question--radio-group--item'\n                                key={answer.value}\n                                label={answer?.text}\n                                value={answer?.value}\n                                disabled={disabled_items.includes(form_control)}\n                            />\n                        ))}\n                    </RadioGroup>\n                )}\n            </Field>\n        </div>\n    );\n};\n\nexport default TradingAssessmentRadioButton;\n","import { ChangeEvent, Fragment, useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikErrors, FormikHelpers } from 'formik';\n\nimport { Button, Modal, Text } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, useTranslations } from '@deriv-com/translations';\n\nimport { TQuestion, TTradingAssessmentForm } from 'Types';\n\nimport { MAX_QUESTION_TEXT_LENGTH } from '../../Constants/trading-assessment';\nimport { getTradingAssessmentQuestions } from '../../Constants/trading-assessment-questions';\nimport ScrollToFieldWithError from '../forms/scroll-to-field-with-error';\nimport InlineNoteWithIcon from '../inline-note-with-icon';\n\nimport TradingAssessmentDropdown from './trading-assessment-dropdown';\nimport TradingAssessmentRadioButton from './trading-assessment-radio-buttons';\n\ntype TradingAssessmentFormProps = {\n    class_name?: string;\n    disabled_items: string[];\n    form_value: TTradingAssessmentForm;\n    getCurrentStep?: () => number;\n    onSubmit: (values?: TTradingAssessmentForm, should_override?: boolean) => void;\n    onCancel: (form_data: TTradingAssessmentForm) => void;\n    onSave?: (current_step: number, values: TTradingAssessmentForm) => void;\n    should_move_to_next: boolean;\n    setSubSectionIndex: (index: number) => void;\n    is_independent_section: boolean;\n    is_responsive?: boolean;\n};\n\nconst TradingAssessmentForm = observer(\n    ({\n        class_name,\n        disabled_items,\n        form_value,\n        getCurrentStep,\n        onSubmit,\n        onCancel,\n        onSave,\n        should_move_to_next,\n        setSubSectionIndex,\n        is_independent_section,\n        is_responsive,\n    }: TradingAssessmentFormProps) => {\n        const { traders_hub } = useStore();\n        const { localize } = useTranslations();\n        const { is_eu_user } = traders_hub;\n        const assessment_questions = getTradingAssessmentQuestions();\n        const stored_items = parseInt(localStorage.getItem('current_question_index') ?? '0');\n        const [is_section_filled, setIsSectionFilled] = useState(false);\n        const [current_question_details, setCurrentQuestionDetails] = useState({\n            current_question_index: 0,\n            current_question: assessment_questions[stored_items],\n        });\n        const [form_data, setFormData] = useState<TTradingAssessmentForm>({ ...form_value });\n        const last_question_index = assessment_questions.length - 1;\n        const should_display_previous_button = is_independent_section\n            ? current_question_details.current_question_index !== 0\n            : true;\n\n        type TField = keyof typeof form_value;\n\n        useEffect(() => {\n            setCurrentQuestionDetails(prevState => {\n                return {\n                    ...prevState,\n                    current_question_index: stored_items || 0,\n                    current_question: stored_items\n                        ? assessment_questions[stored_items]\n                        : assessment_questions[prevState.current_question_index],\n                };\n            });\n            if (!is_independent_section) {\n                setSubSectionIndex(stored_items);\n            }\n            setFormData(form_value);\n        }, []);\n\n        useEffect(() => {\n            if (should_move_to_next) displayNextPage();\n        }, [should_move_to_next]);\n\n        const displayNextPage = () => {\n            if (form_data.risk_tolerance === 'No') {\n                // onSubmit hold reference to a function that takes 2 params - values, should_override\n                onSubmit(form_data, true);\n            } else {\n                const next_question = current_question_details.current_question_index + 1;\n\n                if (next_question < assessment_questions.length) {\n                    setCurrentQuestionDetails(prev_state_question => {\n                        const next_state_question_index = prev_state_question.current_question_index + 1;\n                        localStorage.setItem('current_question_index', String(next_state_question_index));\n                        // Sub section form progress is not required when the section is independent\n                        if (!is_independent_section) {\n                            setSubSectionIndex(next_state_question_index);\n                        }\n                        return {\n                            current_question_index: next_state_question_index,\n                            current_question: assessment_questions[next_state_question_index],\n                        };\n                    });\n                }\n            }\n        };\n\n        const displayPreviousPage = () => {\n            const prev_question = current_question_details.current_question_index - 1;\n            if (prev_question >= 0) {\n                setCurrentQuestionDetails(prev_state_question => {\n                    const prev_state_question_index = prev_state_question.current_question_index - 1;\n                    localStorage.setItem('current_question_index', String(prev_state_question_index));\n                    if (!is_independent_section) {\n                        setSubSectionIndex(prev_state_question_index);\n                    }\n                    return {\n                        current_question_index: prev_state_question_index,\n                        current_question: assessment_questions[prev_state_question_index],\n                    };\n                });\n            } else {\n                onCancel(form_data);\n            }\n        };\n\n        const handleValueSelection = (\n            e: ChangeEvent<HTMLSelectElement> | ChangeEvent<HTMLInputElement>,\n            form_control: keyof TTradingAssessmentForm,\n            callBackFn: (form_control: keyof TTradingAssessmentForm, value: string) => void\n        ) => {\n            if (typeof e.persist === 'function') e.persist();\n            callBackFn(form_control, e.target.value);\n            setFormData(prev_form => ({ ...prev_form, [form_control]: e.target.value }));\n        };\n\n        const isAssessmentCompleted = (answers: TTradingAssessmentForm) =>\n            Object.values(answers).every(answer => Boolean(answer));\n\n        const nextButtonHandler = (\n            values: TTradingAssessmentForm,\n            { setTouched }: FormikHelpers<TTradingAssessmentForm>\n        ) => {\n            if (is_section_filled) {\n                if (isAssessmentCompleted(values) && stored_items === last_question_index) {\n                    onSubmit(values);\n                } else {\n                    setTouched({});\n                    displayNextPage();\n                }\n            }\n        };\n\n        const handleValidate = (values: TTradingAssessmentForm) => {\n            const current_step = (getCurrentStep?.() || 1) - 1;\n            onSave?.(current_step, values);\n\n            const errors: FormikErrors<TTradingAssessmentForm> = {};\n\n            if (!values.risk_tolerance && current_question_details.current_question.section === 'risk_tolerance') {\n                errors.risk_tolerance = 'error';\n            }\n            if (\n                !values.source_of_experience &&\n                current_question_details.current_question.section === 'source_of_experience'\n            ) {\n                errors.source_of_experience = 'error';\n            }\n            if (current_question_details.current_question.section === 'trading_experience') {\n                const trading_experience_required_fields: (keyof TTradingAssessmentForm)[] = [\n                    'cfd_experience',\n                    'cfd_frequency',\n                    'trading_experience_financial_instruments',\n                    'trading_frequency_financial_instruments',\n                ];\n                trading_experience_required_fields.forEach(field => {\n                    if (!values[field]) {\n                        errors[field] = localize('Please select an option');\n                    }\n                });\n            }\n            if (current_question_details.current_question.section === 'trading_knowledge') {\n                const trading_knowledge_required_fields: (keyof TTradingAssessmentForm)[] = [\n                    'cfd_trading_definition',\n                    'leverage_impact_trading',\n                    'leverage_trading_high_risk_stop_loss',\n                    'required_initial_margin',\n                ];\n                trading_knowledge_required_fields.forEach(field => {\n                    if (!values[field] && current_question_details.current_question.form_control === field) {\n                        errors[field] = 'error';\n                    }\n                });\n            }\n\n            return errors;\n        };\n\n        return (\n            <div className={clsx('trading-assessment', class_name)}>\n                {is_eu_user ? (\n                    <div className='details-form__banner-container'>\n                        <InlineNoteWithIcon\n                            icon='IcAlertWarning'\n                            message={localize(\n                                \"We collect this to ensure you’re aware of trading risks and assess our products' suitability for you.\"\n                            )}\n                            title={localize('Why do we collect this?')}\n                        />\n                    </div>\n                ) : (\n                    <Text as='p' color='prominent' size='xxs' className='trading-assessment__side-note'>\n                        <Localize i18n_default_text='In providing our services to you, we are required to obtain information from you in order to assess whether a given product or service is appropriate for you.' />\n                    </Text>\n                )}\n                <Formik initialValues={{ ...form_value }} validate={handleValidate} onSubmit={nextButtonHandler}>\n                    {({ errors, setFieldValue, values, setErrors, touched }) => {\n                        const { question_text, form_control, answer_options, questions } =\n                            current_question_details.current_question;\n                        const has_long_question = questions?.some(\n                            question => question.question_text.length > MAX_QUESTION_TEXT_LENGTH\n                        );\n                        const is_section_required = Object.keys(values).some(\n                            field => !!errors[field as TField] && !!touched[field as TField]\n                        );\n\n                        return (\n                            <Fragment>\n                                <Text weight='bold' size='xs' className='trading-assessment__question-counter'>\n                                    <Localize\n                                        i18n_default_text='Question {{ current }} of {{ total }}'\n                                        values={{\n                                            current: current_question_details.current_question_index + 1,\n                                            total: last_question_index + 1,\n                                        }}\n                                    />\n                                    <Text color='loss-danger' size='xxs'>\n                                        {is_section_required && <Localize i18n_default_text={'* This is required'} />}\n                                    </Text>\n                                </Text>\n                                <section className={'trading-assessment__form'}>\n                                    <Form noValidate className='trading-assessment__form--layout'>\n                                        <ScrollToFieldWithError should_recollect_inputs_names={is_section_filled} />\n                                        <div\n                                            className={clsx('trading-assessment__form--fields', {\n                                                'field-layout': has_long_question,\n                                            })}\n                                        >\n                                            {questions?.length ? (\n                                                <TradingAssessmentDropdown\n                                                    item_list={questions as TQuestion[]}\n                                                    onChange={handleValueSelection}\n                                                    values={values}\n                                                    setFieldValue={setFieldValue}\n                                                    setEnableNextSection={setIsSectionFilled}\n                                                    disabled_items={disabled_items ?? []}\n                                                />\n                                            ) : (\n                                                <TradingAssessmentRadioButton\n                                                    text={question_text}\n                                                    list={answer_options ?? []}\n                                                    onChange={e => {\n                                                        handleValueSelection(\n                                                            e,\n                                                            form_control as keyof TTradingAssessmentForm,\n                                                            setFieldValue\n                                                        );\n                                                    }}\n                                                    values={values}\n                                                    form_control={form_control as keyof TTradingAssessmentForm}\n                                                    setEnableNextSection={setIsSectionFilled}\n                                                    disabled_items={disabled_items ?? []}\n                                                />\n                                            )}\n                                        </div>\n                                        <Modal.Footer\n                                            has_separator\n                                            is_bypassed={is_responsive}\n                                            className='trading-assessment__existing_btn '\n                                        >\n                                            <Button.Group className='trading-assessment__btn-group'>\n                                                {should_display_previous_button && (\n                                                    <Button\n                                                        has_effect\n                                                        onClick={() => {\n                                                            setErrors({});\n                                                            displayPreviousPage();\n                                                        }}\n                                                        text={localize('Previous')}\n                                                        type='button'\n                                                        secondary\n                                                        large\n                                                        className='trading-assessment__btn-group--btn'\n                                                    />\n                                                )}\n                                                <Button\n                                                    has_effect\n                                                    text={localize('Next')}\n                                                    large\n                                                    primary\n                                                    className='trading-assessment__btn-group--btn'\n                                                    name='Next'\n                                                />\n                                            </Button.Group>\n                                        </Modal.Footer>\n                                    </Form>\n                                </section>\n                            </Fragment>\n                        );\n                    }}\n                </Formik>\n            </div>\n        );\n    }\n);\n\nexport default TradingAssessmentForm;\n","import React from 'react';\nimport { useHistory, withRouter } from 'react-router';\nimport { Form, Formik } from 'formik';\n\nimport { Button, Dropdown, FormSubmitButton, Loading, SelectNative, Text } from '@deriv/components';\nimport { routes, WS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { useDevice } from '@deriv-com/ui';\n\nimport FormBody from 'Components/form-body';\nimport FormFooter from 'Components/form-footer';\nimport FormSubHeader from 'Components/form-sub-header';\nimport { RiskToleranceWarningModal, TestWarningModal } from 'Components/trading-assessment';\nimport { getTradingAssessmentQuestions } from 'Constants/trading-assessment-questions';\n\nconst populateData = form_data => {\n    return {\n        risk_tolerance: form_data.risk_tolerance,\n        source_of_experience: form_data.source_of_experience,\n        cfd_experience: form_data.cfd_experience,\n        cfd_frequency: form_data.cfd_frequency,\n        trading_experience_financial_instruments: form_data.trading_experience_financial_instruments,\n        trading_frequency_financial_instruments: form_data.trading_frequency_financial_instruments,\n        cfd_trading_definition: form_data.cfd_trading_definition,\n        leverage_impact_trading: form_data.leverage_impact_trading,\n        leverage_trading_high_risk_stop_loss: form_data.leverage_trading_high_risk_stop_loss,\n        required_initial_margin: form_data.required_initial_margin,\n    };\n};\nconst TradingAssessment = observer(() => {\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n    const { client } = useStore();\n    const { is_virtual, setFinancialAndTradingAssessment } = client;\n    const history = useHistory();\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [is_btn_loading, setIsBtnLoading] = React.useState(false);\n    const [is_submit_success, setIsSubmitSuccess] = React.useState(false);\n    const [initial_form_values, setInitialFormValues] = React.useState({});\n    const [should_accept_risk, setShouldAcceptRisk] = React.useState(false);\n    const [should_show_warning_modal, setShouldShowWarningModal] = React.useState(false);\n    const [form_data, setFormData] = React.useState({});\n    const [financial_information_version, setFinancialInformationVersion] = React.useState('');\n\n    React.useEffect(() => {\n        if (is_virtual) {\n            setIsLoading(false);\n            history.push(routes.personal_details);\n        } else {\n            WS.authorized.storage.getFinancialAssessment().then(data => {\n                // set initial form data\n                setInitialFormValues(() => populateData(data.get_financial_assessment));\n                setFinancialInformationVersion(data.get_financial_assessment?.financial_information_version);\n                setIsLoading(false);\n                setIsSubmitSuccess(false);\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const handleSubmit = async values => {\n        setFormData(values);\n        setIsBtnLoading(false);\n        setIsSubmitSuccess(true);\n        if (values.risk_tolerance === 'No') {\n            setShouldAcceptRisk(true);\n        } else {\n            setIsBtnLoading(true);\n            const response = await WS.authorized.storage.getFinancialAssessment();\n            const { trading_score: prev_score } = response?.get_financial_assessment;\n            const form_payload = {\n                trading_experience_regulated: {\n                    cfd_experience: values.cfd_experience,\n                    cfd_frequency: values.cfd_frequency,\n                    cfd_trading_definition: values.cfd_trading_definition,\n                    leverage_impact_trading: values.leverage_impact_trading,\n                    leverage_trading_high_risk_stop_loss: values.leverage_trading_high_risk_stop_loss,\n                    required_initial_margin: values.required_initial_margin,\n                    risk_tolerance: values.risk_tolerance,\n                    source_of_experience: values.source_of_experience,\n                    trading_experience_financial_instruments: values.trading_experience_financial_instruments,\n                    trading_frequency_financial_instruments: values.trading_frequency_financial_instruments,\n                },\n                financial_information_version: financial_information_version || 'v2',\n            };\n            const data = await setFinancialAndTradingAssessment(form_payload);\n            const { trading_score } = data?.set_financial_assessment;\n            setShouldShowWarningModal(prev_score > 0 && trading_score === 0);\n\n            WS.authorized.storage.getFinancialAssessment().then(res_data => {\n                setInitialFormValues(res_data.get_financial_assessment);\n            });\n            setIsBtnLoading(false);\n            setTimeout(() => setIsSubmitSuccess(false), 10000);\n        }\n    };\n\n    const handleAcceptRisk = async () => {\n        await handleSubmit({ ...form_data, risk_tolerance: 'Yes' });\n        setShouldAcceptRisk(false);\n        setIsBtnLoading(false);\n        setIsSubmitSuccess(false);\n    };\n\n    if (is_loading) return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    if (should_accept_risk) {\n        return (\n            <RiskToleranceWarningModal\n                show_risk_modal\n                title={localize('Risk Tolerance Warning')}\n                button_text={localize('Yes, I understand the risk.')}\n                handleAcceptRisk={handleAcceptRisk}\n                body_content={\n                    <Localize\n                        i18n_default_text='CFDs and other financial instruments come with a high risk of losing money rapidly due to leverage. You should consider whether you understand how CFDs and other financial instruments work and whether you can afford to take the high risk of losing your money. <0/><0/> To continue, you must confirm that you understand your capital is at risk.'\n                        components={[<br key={0} />]}\n                    />\n                }\n            />\n        );\n    }\n    if (should_show_warning_modal) {\n        return (\n            <TestWarningModal\n                show_risk_modal={should_show_warning_modal}\n                body_content={\n                    <Text as='p' size='xs'>\n                        <Localize\n                            i18n_default_text='In providing our services to you, we are required to ask you for some information to assess if a given product or service is appropriate for you and whether you have the experience and knowledge to understand the risks involved.<0/><0/>'\n                            components={[<br key={0} />]}\n                        />\n                        <Localize\n                            i18n_default_text='Based on your answers, it looks like you have insufficient knowledge and experience in trading CFDs. CFD trading is risky and you could potentially lose all of your capital.<0/><0/>'\n                            components={[<br key={0} />]}\n                        />\n                        <Localize i18n_default_text='Please note that by clicking ‘OK’, you may be exposing yourself to risks. You may not have the knowledge or experience to properly assess or mitigate these risks, which may be significant, including the risk of losing the entire sum you have invested.' />\n                    </Text>\n                }\n                footer_content={\n                    <Button\n                        type='button'\n                        large\n                        text={localize('OK')}\n                        primary\n                        onClick={() => setShouldShowWarningModal(false)}\n                    />\n                }\n            />\n        );\n    }\n\n    return (\n        <Formik\n            initialValues={initial_form_values}\n            enableReinitialize\n            initialTouched={false}\n            onSubmit={values => {\n                handleSubmit(values);\n            }}\n        >\n            {({ values, dirty, isSubmitting, handleChange, handleBlur }) => {\n                return (\n                    <Form className='account-form account-form__trading-assessment'>\n                        <FormBody scroll_offset={isDesktop ? '80px' : '150px'}>\n                            <FormSubHeader\n                                title={localize('Trading Experience')}\n                                subtitle={localize('All fields are required')}\n                            />\n                            {getTradingAssessmentQuestions().map(item => {\n                                const form_control = item.form_control;\n                                if (item.field_type === 'radio') {\n                                    return (\n                                        <fieldset className='account-form__question' key={form_control}>\n                                            {isDesktop ? (\n                                                <React.Fragment>\n                                                    <Text\n                                                        as='h1'\n                                                        color='prominent'\n                                                        weight='bold'\n                                                        size='xs'\n                                                        className='account-form__question--text'\n                                                    >\n                                                        {item.question_text}\n                                                    </Text>\n                                                    <Dropdown\n                                                        is_align_text_left\n                                                        name={form_control}\n                                                        value={values[form_control]}\n                                                        list={item?.answer_options}\n                                                        onChange={handleChange}\n                                                        handleBlur={handleBlur}\n                                                    />\n                                                </React.Fragment>\n                                            ) : (\n                                                <React.Fragment>\n                                                    <Text\n                                                        as='h1'\n                                                        color='prominent'\n                                                        weight='bold'\n                                                        size='xs'\n                                                        line_height='xl'\n                                                        className='account-form__question--text'\n                                                    >\n                                                        {item?.question_text}\n                                                    </Text>\n                                                    <SelectNative\n                                                        value={values[form_control]}\n                                                        name={form_control}\n                                                        list_items={item?.answer_options}\n                                                        onChange={e => handleChange(e)}\n                                                        should_show_empty_option={false}\n                                                    />\n                                                </React.Fragment>\n                                            )}\n                                        </fieldset>\n                                    );\n                                    // eslint-disable-next-line no-else-return\n                                } else {\n                                    return (\n                                        <div key={`${form_control}_dropdown`}>\n                                            {item.questions.map(items => {\n                                                const sub_form_control = items.form_control;\n                                                return (\n                                                    <fieldset key={sub_form_control} className='account-form__question'>\n                                                        {isDesktop ? (\n                                                            <React.Fragment>\n                                                                <Text\n                                                                    as='h1'\n                                                                    color='prominent'\n                                                                    weight='bold'\n                                                                    size='xs'\n                                                                    className='account-form__question--text'\n                                                                >\n                                                                    {items.question_text}\n                                                                </Text>\n                                                                <Dropdown\n                                                                    is_align_text_left\n                                                                    name={sub_form_control}\n                                                                    value={values[sub_form_control]}\n                                                                    list={items?.answer_options}\n                                                                    onChange={handleChange}\n                                                                    handleBlur={handleBlur}\n                                                                />\n                                                            </React.Fragment>\n                                                        ) : (\n                                                            <React.Fragment>\n                                                                <Text\n                                                                    as='h1'\n                                                                    color='prominent'\n                                                                    weight='bold'\n                                                                    size='xs'\n                                                                    line_height='xl'\n                                                                    className='account-form__question--text'\n                                                                >\n                                                                    {items?.question_text}\n                                                                </Text>\n                                                                <SelectNative\n                                                                    value={values[sub_form_control]}\n                                                                    name={sub_form_control}\n                                                                    list_items={items?.answer_options}\n                                                                    onChange={e => handleChange(e)}\n                                                                    should_show_empty_option={false}\n                                                                />\n                                                            </React.Fragment>\n                                                        )}\n                                                    </fieldset>\n                                                );\n                                            })}\n                                        </div>\n                                    );\n                                }\n                            })}\n                        </FormBody>\n                        <FormFooter>\n                            <FormSubmitButton\n                                is_disabled={isSubmitting || !dirty || is_btn_loading}\n                                is_loading={is_btn_loading}\n                                has_effect\n                                is_absolute={!isDesktop}\n                                is_submit_success={is_submit_success && !dirty}\n                                green={is_submit_success && !dirty}\n                                label={localize('Submit')}\n                            />\n                        </FormFooter>\n                    </Form>\n                );\n            }}\n        </Formik>\n    );\n});\n\nexport default withRouter(TradingAssessment);\n","import TradingAssessment from './trading-assessment.jsx';\n\nexport default TradingAssessment;\n"],"names":["_ref","show_risk_modal","handleAcceptRisk","title","button_text","body_content","has_sub_header","isDesktop","useDevice","localize","useTranslations","_jsx","React","children","_jsxs","Modal","width","height","is_open","className","toggleModal","has_close_icon","Body","Icon","icon","size","Text","as","align","line_height","Footer","Button","type","large","text","primary","onClick","MobileDialog","visible","portal_element_id","weight","footer_content","wrapper_classname","getTradingAssessmentQuestions","question_text","section","answer_options","value","form_control","field_type","questions","disabled_items","item_list","onChange","values","setFieldValue","setEnableNextSection","checkIfAllFieldsFilled","Boolean","cfd_experience","cfd_frequency","trading_experience_financial_instruments","trading_frequency_financial_instruments","map","question","Field","name","_ref2","field","meta","should_extend_trading_frequency_field","length","Dropdown","classNameDisplay","clsx","is_align_text_left","placeholder","list","e","disabled","includes","error","touched","color","SelectNative","label","list_items","hide_top_placeholder","RadioGroup","should_wrap_items","required","selected","onToggle","answer","Item","observer","class_name","form_value","getCurrentStep","onSubmit","onCancel","onSave","should_move_to_next","setSubSectionIndex","is_independent_section","is_responsive","traders_hub","useStore","is_eu_user","assessment_questions","stored_items","parseInt","localStorage","getItem","is_section_filled","setIsSectionFilled","useState","current_question_details","setCurrentQuestionDetails","current_question_index","current_question","form_data","setFormData","last_question_index","should_display_previous_button","useEffect","prevState","displayNextPage","risk_tolerance","prev_state_question","next_state_question_index","setItem","String","handleValueSelection","callBackFn","persist","target","prev_form","InlineNoteWithIcon","message","Localize","i18n_default_text","Formik","initialValues","validate","current_step","errors","source_of_experience","forEach","nextButtonHandler","setTouched","answers","Object","every","_ref3","setErrors","has_long_question","some","is_section_required","keys","Fragment","current","total","Form","noValidate","ScrollToFieldWithError","should_recollect_inputs_names","TradingAssessmentDropdown","TradingAssessmentRadioButton","has_separator","is_bypassed","Group","has_effect","prev_state_question_index","secondary","TradingAssessment","client","is_virtual","setFinancialAndTradingAssessment","history","useHistory","is_loading","setIsLoading","is_btn_loading","setIsBtnLoading","is_submit_success","setIsSubmitSuccess","initial_form_values","setInitialFormValues","should_accept_risk","setShouldAcceptRisk","should_show_warning_modal","setShouldShowWarningModal","financial_information_version","setFinancialInformationVersion","push","routes","personal_details","WS","authorized","storage","getFinancialAssessment","then","data","cfd_trading_definition","leverage_impact_trading","leverage_trading_high_risk_stop_loss","required_initial_margin","populateData","get_financial_assessment","handleSubmit","async","response","trading_score","prev_score","form_payload","trading_experience_regulated","set_financial_assessment","res_data","setTimeout","Loading","is_fullscreen","RiskToleranceWarningModal","components","TestWarningModal","enableReinitialize","initialTouched","dirty","isSubmitting","handleChange","handleBlur","FormBody","scroll_offset","FormSubHeader","subtitle","item","should_show_empty_option","items","sub_form_control","FormFooter","FormSubmitButton","is_disabled","is_absolute","green","withRouter"],"sourceRoot":""}