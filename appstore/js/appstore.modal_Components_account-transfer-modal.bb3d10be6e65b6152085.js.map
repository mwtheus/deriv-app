{"version":3,"file":"appstore/js/appstore.modal_Components_account-transfer-modal.bb3d10be6e65b6152085.js","mappings":"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","sources":["webpack://@deriv/appstore/../hooks/src/useCashierLocked.ts","webpack://@deriv/appstore/../cashier/src/components/page-container/page-container.tsx","webpack://@deriv/appstore/../cashier/src/components/page-container/index.ts","webpack://@deriv/appstore/../hooks/src/useIsSystemMaintenance.ts","webpack://@deriv/appstore/../hooks/src/useNeedAuthentication.ts","webpack://@deriv/appstore/../hooks/src/useNeedFinancialAssessment.ts","webpack://@deriv/appstore/../hooks/src/useDepositLocked.ts","webpack://@deriv/appstore/../hooks/src/useDuplicateDOBPhone.ts","webpack://@deriv/appstore/../cashier/src/components/cashier-locked/cashier-locked-provider.tsx","webpack://@deriv/appstore/../cashier/src/components/cashier-locked/cashier-locked.tsx","webpack://@deriv/appstore/../cashier/src/components/cashier-locked/index.ts","webpack://@deriv/appstore/../cashier/src/components/error/error.tsx","webpack://@deriv/appstore/../cashier/src/components/error/index.ts","webpack://@deriv/appstore/../cashier/src/components/no-balance/no-balance.tsx","webpack://@deriv/appstore/../cashier/src/components/no-balance/index.ts","webpack://@deriv/appstore/../cashier/src/components/cashier-container/virtual/virtual.tsx","webpack://@deriv/appstore/../cashier/src/components/cashier-container/virtual/index.ts","webpack://@deriv/appstore/../cashier/src/pages/account-transfer/account-transfer-locked/account-transfer-locked.tsx","webpack://@deriv/appstore/../cashier/src/pages/account-transfer/account-transfer-locked/index.ts","webpack://@deriv/appstore/../cashier/src/pages/account-transfer/account-transfer-no-account/account-transfer-no-account.tsx","webpack://@deriv/appstore/../cashier/src/pages/account-transfer/account-transfer-no-account/index.ts","webpack://@deriv/appstore/../cashier/src/components/account-platform-icon/account-platform-icon.tsx","webpack://@deriv/appstore/../cashier/src/components/account-platform-icon/index.ts","webpack://@deriv/appstore/../cashier/src/components/crypto-fiat-converter/crypto-fiat-converter.tsx","webpack://@deriv/appstore/../cashier/src/components/crypto-fiat-converter/index.ts","webpack://@deriv/appstore/../cashier/src/components/error-dialog/error-dialog.tsx","webpack://@deriv/appstore/../cashier/src/components/error-dialog/index.ts","webpack://@deriv/appstore/../cashier/src/components/percentage-selector/percentage-selector.tsx","webpack://@deriv/appstore/../cashier/src/components/percentage-selector/index.ts","webpack://@deriv/appstore/../cashier/src/pages/account-transfer/account-transfer-receipt/account-transfer-receipt.tsx","webpack://@deriv/appstore/../cashier/src/pages/account-transfer/account-transfer-form/account-transfer-form.tsx","webpack://@deriv/appstore/../cashier/src/pages/account-transfer/account-transfer-form/index.ts","webpack://@deriv/appstore/../cashier/src/pages/account-transfer/account-transfer-form/account-transfer-form-side-note.tsx","webpack://@deriv/appstore/../cashier/src/pages/account-transfer/account-transfer.tsx","webpack://@deriv/appstore/../cashier/src/pages/account-transfer/index.ts","webpack://@deriv/appstore/./src/components/account-transfer-modal/account-transfer-modal.tsx","webpack://@deriv/appstore/./src/components/account-transfer-modal/index.ts"],"sourcesContent":["import { useStore } from '@deriv/stores';\n\nconst useCashierLocked = () => {\n    const { client } = useStore();\n    const { account_status } = client;\n\n    const is_cashier_locked = account_status?.status?.some(status => status === 'cashier_locked') || false;\n\n    return is_cashier_locked;\n};\n\nexport default useCashierLocked;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Loading, ThemedScrollbars } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { useDevice } from '@deriv-com/ui';\nimport './page-container.scss';\n\nconst CashierBreadcrumb = React.lazy(\n    () => import(/* webpackChunkName: \"cashier-breadcrumb\" */ '../cashier-breadcrumb')\n);\n\ntype TProps = {\n    hide_breadcrumb?: boolean;\n    left?: JSX.Element;\n    right?: JSX.Element;\n};\n\nconst PageContainer: React.FC<React.PropsWithChildren<TProps>> = observer(\n    ({ children, hide_breadcrumb = false, left, right }) => {\n        const {\n            client,\n            common: { is_from_outside_cashier },\n        } = useStore();\n        const { isDesktop } = useDevice();\n        const { is_authorize } = client;\n        const is_loading = !is_authorize;\n\n        return (\n            <div\n                className={classNames('page-container', {\n                    'page-container--modal': is_from_outside_cashier,\n                })}\n            >\n                {is_loading && <Loading is_fullscreen={false} />}\n                {!is_loading && (\n                    <div className='page-container__content'>\n                        {!is_from_outside_cashier && isDesktop && left && (\n                            <div className='page-container__sidebar--left'>{left}</div>\n                        )}\n                        <ThemedScrollbars\n                            className={classNames('page-container__main', {\n                                'page-container__main--modal': is_from_outside_cashier,\n                            })}\n                            height='calc(100svh - 8rem)'\n                            is_scrollbar_hidden\n                        >\n                            {!hide_breadcrumb && <CashierBreadcrumb />}\n                            {!is_from_outside_cashier && !isDesktop && left && (\n                                <div className='page-container__sidebar--left'>{left}</div>\n                            )}\n                            {children}\n                            {!is_from_outside_cashier && !isDesktop && right && (\n                                <div className='page-container__sidebar--right'>{right}</div>\n                            )}\n                        </ThemedScrollbars>\n                        {!is_from_outside_cashier && isDesktop && right && (\n                            <div className='page-container__sidebar--right'>{right}</div>\n                        )}\n                    </div>\n                )}\n            </div>\n        );\n    }\n);\n\nexport default PageContainer;\n","import PageContainer from './page-container';\n\nexport default PageContainer;\n","import { useStore } from '@deriv/stores';\n\nconst useIsSystemMaintenance = () => {\n    const { client } = useStore();\n    const { account_status } = client;\n\n    const is_system_maintenance =\n        account_status?.cashier_validation?.some(validation => validation === 'system_maintenance') || false;\n\n    return is_system_maintenance;\n};\n\nexport default useIsSystemMaintenance;\n","import { useStore } from '@deriv/stores';\n\nconst useNeedAuthentication = () => {\n    const { client, traders_hub } = useStore();\n    const { is_authentication_needed } = client;\n    const { is_low_risk_cr_eu_real } = traders_hub;\n    const is_need_authentication = is_authentication_needed && is_low_risk_cr_eu_real;\n\n    return is_need_authentication;\n};\n\nexport default useNeedAuthentication;\n","import { useStore } from '@deriv/stores';\n\nconst useNeedFinancialAssessment = () => {\n    const { client } = useStore();\n    const { is_financial_account, is_financial_information_incomplete, is_trading_experience_incomplete } = client;\n    const is_need_financial_assessment =\n        is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete);\n\n    return is_need_financial_assessment;\n};\n\nexport default useNeedFinancialAssessment;\n","import { useStore } from '@deriv/stores';\nimport useNeedAuthentication from './useNeedAuthentication';\nimport useNeedFinancialAssessment from './useNeedFinancialAssessment';\nimport useIsTNCNeeded from './useIsTNCNeeded';\n\nconst useDepositLocked = () => {\n    const { client } = useStore();\n    const {\n        is_deposit_lock,\n        is_trading_experience_incomplete,\n        landing_company_shortcode,\n        is_account_to_be_closed_by_residence,\n    } = client;\n    const is_need_authentication = useNeedAuthentication();\n    const is_tnc_needed = useIsTNCNeeded();\n    const is_need_financial_assessment = useNeedFinancialAssessment();\n    const is_malta_invest = landing_company_shortcode === 'maltainvest';\n    const is_trading_experience_incomplete_or_need_financial_assessment = is_malta_invest\n        ? is_trading_experience_incomplete\n        : is_need_financial_assessment;\n\n    const is_deposit_locked =\n        is_deposit_lock ||\n        is_need_authentication ||\n        is_tnc_needed ||\n        is_trading_experience_incomplete_or_need_financial_assessment ||\n        is_account_to_be_closed_by_residence;\n\n    return is_deposit_locked;\n};\n\nexport default useDepositLocked;\n","import { useStore } from '@deriv/stores';\n\nconst useDuplicateDOBPhone = () => {\n    const { client } = useStore();\n    const { is_duplicate_dob_phone } = client;\n\n    return is_duplicate_dob_phone;\n};\n\nexport default useDuplicateDOBPhone;\n","import React from 'react';\nimport { History } from 'history';\nimport { Localize, localize } from '@deriv/translations';\nimport { formatDate, routes } from '@deriv/shared';\nimport { Chat } from '@deriv/utils';\n\ntype TProps = {\n    cashier_validation: string[] | undefined;\n    closeAccountTransferModal: () => void;\n    excluded_until: number | undefined;\n    history: History;\n    is_crypto: boolean;\n    is_eu: boolean;\n    is_system_maintenance: boolean;\n    is_cashier_locked: boolean;\n    is_deposit_locked: boolean;\n    is_withdrawal_locked: boolean;\n    is_identity_verification_needed: boolean;\n    is_pending_verification: boolean;\n    is_duplicate_dob_phone: boolean;\n    is_account_to_be_closed_by_residence: boolean;\n    account_time_of_closure?: number;\n};\n\nconst getMessage = ({\n    cashier_validation,\n    closeAccountTransferModal,\n    excluded_until,\n    history,\n    is_crypto,\n    is_eu,\n    is_system_maintenance,\n    is_cashier_locked,\n    is_deposit_locked,\n    is_withdrawal_locked,\n    is_identity_verification_needed,\n    is_pending_verification,\n    is_duplicate_dob_phone,\n    is_account_to_be_closed_by_residence,\n    account_time_of_closure,\n}: TProps) => {\n    const no_residence = cashier_validation?.includes('no_residence');\n    const unwelcome_status = cashier_validation?.includes('unwelcome_status');\n    const self_exclusion = cashier_validation?.includes('SelfExclusion');\n    const no_withdrawal_or_trading_status = cashier_validation?.includes('no_withdrawal_or_trading_status');\n    const only_pa_withdrawals_allowed_status = cashier_validation?.includes('only_pa_withdrawals_allowed_status');\n    const withdraw_service_unavailable_for_pa = cashier_validation?.includes('WithdrawServiceUnavailableForPA');\n    const withdrawal_locked_status = cashier_validation?.includes('withdrawal_locked_status');\n    const documents_expired = cashier_validation?.includes('documents_expired');\n    const cashier_locked_status = cashier_validation?.includes('cashier_locked_status');\n    const disabled_status = cashier_validation?.includes('disabled_status');\n    const financial_assessment_required = cashier_validation?.includes('FinancialAssessmentRequired');\n    const ask_currency = cashier_validation?.includes('ASK_CURRENCY');\n    const ask_authenticate = cashier_validation?.includes('ASK_AUTHENTICATE');\n    const ask_financial_risk_approval = cashier_validation?.includes('ASK_FINANCIAL_RISK_APPROVAL');\n    const ask_tin_information = cashier_validation?.includes('ASK_TIN_INFORMATION');\n    const ask_self_exclusion_max_turnover_set = cashier_validation?.includes('ASK_SELF_EXCLUSION_MAX_TURNOVER_SET');\n    const ask_fix_details = cashier_validation?.includes('ASK_FIX_DETAILS');\n    const pa_commision_withdrawal_limit = cashier_validation?.includes('PACommisionWithdrawalLimit');\n    const pathname = history.location.pathname;\n\n    if (is_account_to_be_closed_by_residence && pathname === routes.cashier_deposit) {\n        return {\n            icon: 'IcCashierNoBalance',\n            title: localize('Deposits disabled'),\n            description: (\n                <Localize\n                    i18n_default_text='Due to business changes, client accounts in your country are to be closed. Withdraw any remaining funds by {{date}}.'\n                    values={{\n                        date: formatDate(account_time_of_closure, 'DD MMM YYYY'),\n                    }}\n                />\n            ),\n        };\n    }\n\n    if (is_system_maintenance) {\n        if (is_crypto && is_withdrawal_locked)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Withdrawals are locked'),\n                description: localize(\n                    'Withdrawals are temporarily unavailable due to system maintenance. You can make your withdrawals when the maintenance is complete.'\n                ),\n            };\n        if (is_crypto && is_deposit_locked)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: localize(\n                    'Deposits are temporarily unavailable due to system maintenance. You can make your deposits when the maintenance is complete.'\n                ),\n            };\n        return {\n            icon: 'IcCashierUnderMaintenance',\n            title: localize('Cashier is currently down for maintenance'),\n            description: (\n                <Localize\n                    i18n_default_text='Please check back in a few minutes.<0></0>Thank you for your patience.'\n                    components={[<br key={0} />]}\n                />\n            ),\n        };\n    }\n\n    if (is_cashier_locked) {\n        if (no_residence)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: localize(\n                    'You’ve not set your country of residence. To access Cashier, please update your country of residence in the Personal details section in your account settings.'\n                ),\n            };\n        if (documents_expired)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: localize(\n                    'The identification documents you submitted have expired. Please submit valid identity documents to unlock Cashier. '\n                ),\n            };\n        if (cashier_locked_status)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Your cashier is currently locked. Please contact us via <0>live chat</0> to find out how to unlock it.'\n                        components={[<span key={0} className='link link--orange' onClick={Chat.open} />]}\n                    />\n                ),\n            };\n        if (disabled_status)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Your account is temporarily disabled. Please contact us via <0>live chat</0> to enable deposits and withdrawals again.'\n                        components={[<span key={0} className='link link--orange' onClick={Chat.open} />]}\n                    />\n                ),\n            };\n        if (ask_currency)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: localize('Please set your account currency to enable deposits and withdrawals.'),\n            };\n        if (ask_authenticate && is_identity_verification_needed)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Please submit your <0>proof of identity</0> to authenticate your account and access your Cashier.'\n                        components={[<a key={0} className='link' href={'/account/proof-of-identity'} />]}\n                    />\n                ),\n            };\n        if (ask_authenticate) {\n            if (is_eu) {\n                const getDescription = () => {\n                    let description;\n                    switch (pathname) {\n                        case routes.cashier_deposit:\n                            description = (\n                                <Localize i18n_default_text='You can make a new deposit once the verification of your account is complete.' />\n                            );\n                            break;\n                        case routes.cashier_withdrawal:\n                            description = (\n                                <Localize i18n_default_text='You can make a withdrawal once the verification of your account is complete.' />\n                            );\n                            break;\n                        case routes.cashier_acc_transfer:\n                            description = (\n                                <Localize i18n_default_text='You can make a funds transfer once the verification of your account is complete.' />\n                            );\n                            break;\n                        default:\n                            break;\n                    }\n\n                    return description;\n                };\n\n                return {\n                    icon: 'IcCashierLocked',\n                    title: localize('Cashier is locked'),\n                    description: getDescription(),\n                    action: {\n                        onClick: () => {\n                            history.push(routes.proof_of_identity);\n                            closeAccountTransferModal();\n                        },\n                        label: localize('Verify now'),\n                    },\n                };\n            }\n\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Your account has not been authenticated. Please submit your <0>proof of identity</0> and <1>proof of address</1> to authenticate your account and access your cashier.'\n                        components={[\n                            <a\n                                key={0}\n                                className='link'\n                                rel='noopener noreferrer'\n                                href={'/account/proof-of-identity'}\n                            />,\n                            <a key={1} className='link' rel='noopener noreferrer' href={'/account/proof-of-address'} />,\n                        ]}\n                    />\n                ),\n            };\n        }\n        if (is_eu && is_pending_verification) {\n            const getDescription = () => {\n                let description;\n                switch (pathname) {\n                    case routes.cashier_deposit:\n                        description = (\n                            <Localize i18n_default_text='You cannot make further deposits as your documents are still under review. We will notify you by email within 3 days once your verification is approved.' />\n                        );\n                        break;\n                    case routes.cashier_withdrawal:\n                        description = (\n                            <Localize i18n_default_text='You cannot make a withdrawal as your documents are still under review. We will notify you by email within 3 days once your verification is approved.' />\n                        );\n                        break;\n                    case routes.cashier_acc_transfer:\n                        description = (\n                            <Localize i18n_default_text='You cannot make a fund transfer as your documents are still under review. We will notify you by email within 3 days once your verification is approved.' />\n                        );\n                        break;\n                    default:\n                        break;\n                }\n                return description;\n            };\n\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: getDescription(),\n            };\n        }\n        if (ask_financial_risk_approval)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Please complete the <0>Appropriateness Test</0> to access your cashier.'\n                        components={[\n                            <a\n                                key={0}\n                                className='link'\n                                rel='noopener noreferrer'\n                                href={'/account/financial-assessment'}\n                                data-testid='dt_financial_assessment_link'\n                            />,\n                        ]}\n                    />\n                ),\n            };\n        if (financial_assessment_required)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Your cashier is locked. Please complete the <0>financial assessment</0> to unlock it.'\n                        components={[\n                            <a\n                                key={0}\n                                className='link'\n                                rel='noopener noreferrer'\n                                href={'/account/financial-assessment'}\n                                data-testid='dt_financial_assessment_link'\n                            />,\n                        ]}\n                    />\n                ),\n            };\n        if (ask_tin_information)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='You have not provided your tax identification number. This information is necessary for legal and regulatory requirements. Please go to <0>Personal details</0> in your account settings, and fill in your latest tax identification number.'\n                        components={[\n                            <a key={0} className='link' rel='noopener noreferrer' href={'/account/personal-details'} />,\n                        ]}\n                    />\n                ),\n            };\n        if (ask_self_exclusion_max_turnover_set)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Your access to Cashier has been temporarily disabled as you have not set your 30-day turnover limit. Please go to <0>Self-exclusion</0> and set your 30-day turnover limit.'\n                        components={[\n                            <a key={0} className='link' rel='noopener noreferrer' href={'/account/self-exclusion'} />,\n                        ]}\n                    />\n                ),\n            };\n        if (ask_fix_details)\n            return {\n                icon: 'IcCashierLocked',\n                title: localize('Cashier is locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Your <0>personal details</0> are incomplete. Please go to your account settings and complete your personal details to enable deposits and withdrawals.'\n                        components={[\n                            <a key={0} className='link' rel='noopener noreferrer' href={'/account/personal-details'} />,\n                        ]}\n                    />\n                ),\n            };\n    }\n\n    if (is_deposit_locked) {\n        if (is_duplicate_dob_phone) {\n            return {\n                icon: 'IcAccountError',\n                title: localize('Account already exists'),\n                description: (\n                    <Localize\n                        i18n_default_text=\"Your details match an existing account. You can't <0/>make deposits or trade with a new account. <0/>Need help? Reach out via live chat.\"\n                        components={[<br key={0} />]}\n                    />\n                ),\n            };\n        }\n        if (ask_fix_details)\n            return {\n                icon: 'IcCashierDepositLock',\n                title: localize('Deposits are locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Your <0>personal details</0> are incomplete. Please go to your account settings and complete your personal details to enable deposits.'\n                        components={[\n                            <a key={0} className='link' rel='noopener noreferrer' href={'/account/personal-details'} />,\n                        ]}\n                    />\n                ),\n            };\n        if (self_exclusion)\n            return {\n                icon: 'IcCashierDepositLock',\n                title: localize('Deposits are locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='You have chosen to exclude yourself from trading on our website until {{exclude_until}}. If you are unable to place a trade or deposit after your self-exclusion period, please contact us via <0>live chat</0>.'\n                        values={{ exclude_until: formatDate(excluded_until, 'DD MMM, YYYY') }}\n                        components={[<span key={0} className='link link--orange' onClick={Chat.open} />]}\n                    />\n                ),\n            };\n        if (unwelcome_status)\n            return {\n                icon: 'IcCashierDepositLock',\n                title: localize('Deposits are locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Please contact us via <0>live chat</0>.'\n                        components={[<span key={0} className='link link--orange' onClick={Chat.open} />]}\n                    />\n                ),\n            };\n    }\n\n    if (is_withdrawal_locked) {\n        if (financial_assessment_required)\n            return {\n                icon: 'IcCashierWithdrawalLock',\n                title: localize('Withdrawals are locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='You can only make deposits. Please complete the <0>financial assessment</0> to unlock withdrawals.'\n                        components={[\n                            <a\n                                key={0}\n                                className='link'\n                                href={'/account/financial-assessment'}\n                                data-testid='dt_financial_assessment_link'\n                            />,\n                        ]}\n                    />\n                ),\n            };\n        if (ask_authenticate)\n            return {\n                icon: 'IcCashierWithdrawalLock',\n                title: localize('Withdrawals are locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Your account has not been authenticated. Please submit your <0>proof of identity</0> and <1>proof of address</1> to authenticate your account and request for withdrawals.'\n                        components={[\n                            <a\n                                key={0}\n                                className='link'\n                                rel='noopener noreferrer'\n                                href={'/account/proof-of-identity'}\n                            />,\n                            <a key={1} className='link' rel='noopener noreferrer' href={'/account/proof-of-address'} />,\n                        ]}\n                    />\n                ),\n            };\n        if (ask_fix_details)\n            return {\n                icon: 'IcCashierWithdrawalLock',\n                title: localize('Withdrawals are locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Your <0>personal details</0> are incomplete. Please go to your account settings and complete your personal details to enable withdrawals.'\n                        components={[\n                            <a key={0} className='link' rel='noopener noreferrer' href={'/account/personal-details'} />,\n                        ]}\n                    />\n                ),\n            };\n        if (withdraw_service_unavailable_for_pa)\n            return {\n                icon: 'IcCashierWithdrawalLock',\n                title: localize('Withdrawals are locked'),\n                description: localize('This feature is not available for payment agents.'),\n            };\n        if (no_withdrawal_or_trading_status)\n            return {\n                icon: 'IcCashierWithdrawalLock',\n                title: localize('Withdrawals are locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Unfortunately, you can only make deposits. Please contact us via <0>live chat</0> to enable withdrawals.'\n                        components={[<span key={0} className='link link--orange' onClick={Chat.open} />]}\n                    />\n                ),\n            };\n        if (withdrawal_locked_status)\n            return {\n                icon: 'IcCashierWithdrawalLock',\n                title: localize('Withdrawals are locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='Unfortunately, you can only make deposits. Please contact us via <0>live chat</0> to enable withdrawals.'\n                        components={[<span key={0} className='link link--orange' onClick={Chat.open} />]}\n                    />\n                ),\n            };\n        if (only_pa_withdrawals_allowed_status)\n            return {\n                icon: 'IcCashierWithdrawalLock',\n                title: localize('Withdrawals are locked'),\n                description: (\n                    <Localize\n                        i18n_default_text='You can only make deposits. Please contact us via <0>live chat</0> for more information.'\n                        components={[<span key={0} className='link link--orange' onClick={Chat.open} />]}\n                    />\n                ),\n            };\n        if (pa_commision_withdrawal_limit)\n            return {\n                icon: 'IcCashierWithdrawalLock',\n                title: localize('Cashier is locked for withdrawals'),\n                description: localize(\n                    \"It seems that you've no commissions to withdraw at the moment. You can make withdrawals once you receive your commissions.\"\n                ),\n            };\n    }\n\n    return {\n        icon: 'IcCashierLocked',\n        title: localize('Cashier is locked'),\n        description: (\n            <Localize\n                i18n_default_text='Your cashier is currently locked. Please contact us via <0>live chat</0> to find out how to unlock it.'\n                components={[<span key={0} className='link link--orange' onClick={Chat.open} />]}\n            />\n        ),\n    };\n};\n\nexport default getMessage;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { useStore, observer } from '@deriv/stores';\nimport { EmptyState } from '@deriv/components';\nimport {\n    useCashierLocked,\n    useDepositLocked,\n    useDuplicateDOBPhone,\n    useIsSystemMaintenance,\n    useMFAccountStatus,\n} from '@deriv/hooks';\nimport getMessage from './cashier-locked-provider';\nimport './cashier-locked.scss';\nimport { ACCOUNT_BADGE_STATUS } from '@deriv/shared';\n\nconst CashierLocked = observer(() => {\n    const {\n        client,\n        traders_hub: { closeAccountTransferModal },\n    } = useStore();\n    const {\n        account_status,\n        accounts,\n        current_currency_type,\n        is_eu,\n        is_withdrawal_lock: is_withdrawal_locked,\n        loginid,\n        is_identity_verification_needed,\n        is_account_to_be_closed_by_residence,\n        account_time_of_closure,\n    } = client;\n    const mf_account_status = useMFAccountStatus();\n    const is_cashier_locked = useCashierLocked();\n    const is_system_maintenance = useIsSystemMaintenance();\n    const is_deposit_locked = useDepositLocked();\n    const is_duplicate_dob_phone = useDuplicateDOBPhone();\n    const history = useHistory();\n\n    const state = getMessage({\n        cashier_validation: account_status?.cashier_validation,\n        closeAccountTransferModal,\n        excluded_until: loginid ? accounts[loginid]?.excluded_until : undefined,\n        history,\n        is_crypto: current_currency_type === 'crypto',\n        is_eu,\n        is_system_maintenance,\n        is_cashier_locked,\n        is_deposit_locked,\n        is_withdrawal_locked,\n        is_identity_verification_needed,\n        is_pending_verification: mf_account_status === ACCOUNT_BADGE_STATUS.PENDING,\n        is_duplicate_dob_phone,\n        is_account_to_be_closed_by_residence,\n        account_time_of_closure,\n    });\n\n    return (\n        <div className='cashier-locked'>\n            <EmptyState icon={state.icon} title={state.title} description={state.description} action={state.action} />\n        </div>\n    );\n});\n\nexport default CashierLocked;\n","import CashierLocked from './cashier-locked';\n\nexport default CashierLocked;\n","import React from 'react';\nimport { Button, Icon, ButtonLink, StaticUrl, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport ErrorStore from '../../stores/error-store';\nimport './error.scss';\n\ntype TErrorComponentProps = {\n    button_link?: string;\n    button_text?: string;\n    footer?: JSX.Element;\n    header?: JSX.Element | string;\n    message?: JSX.Element;\n    onClickButton?: VoidFunction;\n};\n\ntype TErrorFields = {\n    [k: string]: string;\n};\n\nconst ErrorComponent = ({ header, message, button_link, onClickButton, button_text, footer }: TErrorComponentProps) => {\n    const { isMobile } = useDevice();\n\n    return (\n        <div className='cashier__wrapper cashier__wrapper-error'>\n            <Icon icon='IcCashierError' className='error__icon' />\n            {header && (\n                <Text as='h2' color='loss-danger' weight='bold' align='center' className='error__header'>\n                    {header}\n                </Text>\n            )}\n            {message && (\n                <Text\n                    as='p'\n                    align='center'\n                    size={!isMobile ? 'xs' : 'xxs'}\n                    line_height='s'\n                    className='cashier__paragraph'\n                >\n                    {message}\n                </Text>\n            )}\n            {button_link && (\n                <ButtonLink className='error__button' to={button_link} onClick={onClickButton} size='large'>\n                    <span className='dc-btn__text'>{button_text}</span>\n                </ButtonLink>\n            )}\n            {!button_link && button_text && (\n                <Button className='error__button' onClick={onClickButton} text={button_text} primary large />\n            )}\n            {footer && (\n                <Text as='h2' size='xxs'>\n                    {footer}\n                </Text>\n            )}\n        </div>\n    );\n};\n\n/** @deprecated Use `ErrorState` instead */\nconst Error = ({\n    error,\n}: {\n    error: Pick<ErrorStore, 'code' | 'message'> &\n        Partial<Pick<ErrorStore, 'fields' | 'onClickButton' | 'setErrorMessage'>>;\n}) => {\n    const error_fields: TErrorFields = {\n        address_city: localize('Town/City'),\n        address_line_1: localize('First line of home address'),\n        address_postcode: localize('Postal Code/ZIP'),\n        address_state: localize('State/Province'),\n        email: localize('Email address'),\n        phone: localize('Telephone'),\n        residence: localize('Country of Residence'),\n    };\n\n    const onClickButton = () => {\n        if (typeof error.onClickButton === 'function') {\n            error.onClickButton();\n        }\n        clearErrorMessage();\n    };\n\n    const clearErrorMessage = () => {\n        error.setErrorMessage?.({ code: '', message: '' });\n    };\n\n    let AccountError;\n    switch (error.code) {\n        case 'InvalidToken':\n            AccountError = (\n                <ErrorComponent\n                    header={localize('Email verification failed')}\n                    message={\n                        <Localize i18n_default_text='The verification link you used is invalid or expired. Please request for a new one.' />\n                    }\n                    onClickButton={onClickButton}\n                    button_text={localize('Resend email')}\n                />\n            );\n            break;\n        case 'ASK_FIX_DETAILS':\n            AccountError = (\n                <ErrorComponent\n                    header={localize('Update your personal details')}\n                    message={\n                        <React.Fragment>\n                            <Localize\n                                i18n_default_text={\n                                    \"We can't validate your personal details because there is some information missing.\"\n                                }\n                            />\n                            &nbsp;\n                            {Array.isArray(error.fields) ? (\n                                <Localize\n                                    i18n_default_text={'Please update your {{details}} to continue.'}\n                                    values={{\n                                        details: error.fields\n                                            .map((field: string) => error_fields[field] || field)\n                                            .join(', '),\n                                        interpolation: { escapeValue: false },\n                                    }}\n                                />\n                            ) : (\n                                <Localize i18n_default_text={'Please update your details to continue.'} />\n                            )}\n                        </React.Fragment>\n                    }\n                    button_link='/account/personal-details'\n                    onClickButton={onClickButton}\n                    button_text={localize('Update my details')}\n                    footer={\n                        <Localize\n                            i18n_default_text='Need help? <0>Contact us</0>.'\n                            components={[<StaticUrl key={0} className='link' href='help-centre' is_document={false} />]}\n                        />\n                    }\n                />\n            );\n            break;\n        case 'WrongResponse':\n            AccountError = (\n                <ErrorComponent\n                    header={error.message}\n                    onClickButton={onClickButton}\n                    button_text={localize('Try again')}\n                />\n            );\n            break;\n        case 'PaymentAgentWithdrawError':\n            AccountError = <ErrorComponent header={error.message} onClickButton={onClickButton} />;\n            break;\n        default:\n            AccountError = <ErrorComponent header={error.message} />;\n            break;\n    }\n    return AccountError;\n};\n\nexport default Error;\n","import Error from './error';\n\nexport default Error;\n","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { Button, Icon, Text } from '@deriv/components';\nimport { useDepositLocked } from '@deriv/hooks';\nimport { routes, getCurrencyDisplayCode, startPerformanceEventTimer } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { useStore, observer } from '@deriv/stores';\nimport { useCashierStore } from '../../stores/useCashierStores';\n\ntype TNoBalanceProps = RouteComponentProps & {\n    onClickDeposit?: () => void;\n};\n\nconst NoBalance = observer(({ history, onClickDeposit }: TNoBalanceProps) => {\n    const { client } = useStore();\n    const { currency } = client;\n    const { general_store } = useCashierStore();\n    const { setCashierTabIndex: setTabIndex } = general_store;\n    const is_deposit_locked = useDepositLocked();\n\n    const onClickDepositHandler = () => {\n        startPerformanceEventTimer('load_cashier_time');\n        if (onClickDeposit) {\n            onClickDeposit();\n        } else {\n            // index of deposit tab in the cashier modal is 0\n            setTabIndex(0);\n            history.push(routes.cashier_deposit);\n        }\n    };\n\n    return (\n        <div className='cashier__wrapper cashier__no-balance'>\n            <Icon icon='IcCashierNoBalance' className='cashier__no-balance-icon' size={116} />\n            <Text as='h2' weight='bold' align='center'>\n                <Localize\n                    i18n_default_text='You have no funds in your {{currency}} account'\n                    values={{ currency: getCurrencyDisplayCode(currency) }}\n                />\n            </Text>\n            {!is_deposit_locked && (\n                <>\n                    <Text as='p' size='xs' line_height='s' align='center' className='cashier__text'>\n                        <Localize i18n_default_text='Please make a deposit to use this feature.' />\n                    </Text>\n                    <Button\n                        style={{ marginTop: '2rem' }}\n                        className='cashier__no-balance-button'\n                        has_effect\n                        text={localize('Deposit now')}\n                        onClick={onClickDepositHandler}\n                        primary\n                        large\n                    />\n                </>\n            )}\n        </div>\n    );\n});\n\nexport default withRouter(NoBalance);\n","import NoBalance from './no-balance';\n\nexport default NoBalance;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { useDevice } from '@deriv-com/ui';\nimport './virtual.scss';\n\nconst Virtual = observer(() => {\n    const {\n        ui: { is_dark_mode_on, toggleAccountsDialog },\n    } = useStore();\n\n    const { isMobile } = useDevice();\n\n    return (\n        <div className='cashier__wrapper virtual' data-testid='dt_cashier_wrapper_id'>\n            <React.Fragment>\n                <div\n                    data-testid={\n                        is_dark_mode_on\n                            ? 'dt_virtual_account_switch_icon_dark_id'\n                            : 'dt_virtual_account_switch_icon_light_id'\n                    }\n                    className={classNames(\n                        'virtual__account-switch-icon',\n                        is_dark_mode_on ? 'virtual__account-switch-icon--dark' : 'virtual__account-switch-icon--light'\n                    )}\n                />\n                <Text as='h2' align='center' weight='bold' color='prominent' className='virtual__header'>\n                    <Localize i18n_default_text={'You are using a demo account'} />\n                </Text>\n                <Text\n                    as='p'\n                    size={!isMobile ? 'xs' : 'xxs'}\n                    line_height='s'\n                    align='center'\n                    className='cashier__paragraph cashier__text'\n                >\n                    <Localize\n                        i18n_default_text='You need to switch to a real money account to use this feature.<0/>You can do this by selecting a real account from the <1>Account Switcher.</1>'\n                        components={[\n                            <br key={0} />,\n                            <span\n                                key={1}\n                                className='virtual__account-switch-text'\n                                onClick={() => {\n                                    toggleAccountsDialog();\n                                }}\n                            />,\n                        ]}\n                    />\n                </Text>\n            </React.Fragment>\n        </div>\n    );\n});\n\nexport default withRouter(Virtual);\n","import Virtual from './virtual';\n\nexport default Virtual;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { routes } from '@deriv/shared';\nimport { Icon, Checklist, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { useStore, observer } from '@deriv/stores';\n\nconst AccountTransferLocked = observer(() => {\n    const {\n        client: { is_financial_account, is_financial_information_incomplete, is_trading_experience_incomplete },\n    } = useStore();\n\n    const history = useHistory();\n    const items = [\n        ...(is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete)\n            ? [\n                  {\n                      content: localize('Complete the financial assessment form'),\n                      status: 'action',\n                      onClick: () => history.push(routes.financial_assessment),\n                  },\n              ]\n            : []),\n    ];\n    return (\n        <div className='cashier-locked'>\n            <Icon icon='IcMoneyTransfer' className='cashier-locked__icon' />\n            <Text as='h2' weight='bold' align='center' className='cashier-locked__title'>\n                {localize('Transfers are locked')}\n            </Text>\n            <React.Fragment>\n                <p className='cashier-locked__desc'>\n                    {localize('To enable this feature you must complete the following:')}\n                </p>\n                <Checklist className='cashier-locked__checklist' items={items} />\n            </React.Fragment>\n        </div>\n    );\n});\n\nexport default AccountTransferLocked;\n","import AccountTransferLocked from './account-transfer-locked';\n\nexport default AccountTransferLocked;\n","import React from 'react';\nimport { Icon, Button, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { useStore, observer } from '@deriv/stores';\nimport './account-transfer-no-account.scss';\nimport { useHistory } from 'react-router-dom';\n\nconst AccountTransferNoAccount = observer(() => {\n    const {\n        common: { is_from_derivgo },\n        traders_hub: { closeModal },\n    } = useStore();\n\n    const history = useHistory();\n\n    React.useEffect(() => {\n        closeModal();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className='cashier__wrapper cashier__no-balance'>\n            <Icon icon='IcCashierNoBalance' className='cashier__no-balance-icon' size={116} />\n            <Text as='h2' weight='bold' align='center'>\n                <Localize i18n_default_text='You only have one account' />\n            </Text>\n            <Text as='p' size='xs' line_height='s' align='center'>\n                <Localize i18n_default_text='Transferring funds will require you to create a second account.' />\n            </Text>\n            {!is_from_derivgo && (\n                <Button\n                    className='account-transfer-no-account__button'\n                    primary\n                    large\n                    onClick={() => {\n                        history.push(routes.traders_hub);\n                    }}\n                >\n                    <Localize i18n_default_text=\"Back to Trader's Hub\" />\n                </Button>\n            )}\n        </div>\n    );\n});\n\nexport default AccountTransferNoAccount;\n","import AccountTransferNoAccount from './account-transfer-no-account';\n\nexport default AccountTransferNoAccount;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport TradingPlatformIcon from 'Assets/svgs/trading-platform';\nimport { TAccountsList } from '../../types';\n\ntype TAccountPlatformIcon = {\n    size: number;\n    account: TAccountsList['account'];\n    icon_class_name?: string;\n    appstore_icon_class_name?: string;\n    appstoreIconOnClickHandler?: () => void;\n};\n\nconst AccountPlatformIcon = ({\n    account,\n    size,\n    icon_class_name,\n    appstore_icon_class_name,\n    appstoreIconOnClickHandler,\n}: TAccountPlatformIcon) => {\n    return account.is_mt && account.platform_icon ? (\n        <TradingPlatformIcon\n            icon={account.platform_icon}\n            size={size}\n            className={appstore_icon_class_name}\n            onClick={appstoreIconOnClickHandler}\n        />\n    ) : (\n        <Icon\n            icon={account.platform_icon || `IcCurrency-${account?.currency?.toLowerCase()}`}\n            size={size}\n            className={icon_class_name}\n            data_testid={`dt_account_platform_icon_${\n                account.platform_icon || `currency_${account?.currency?.toLowerCase()}`\n            }`}\n        />\n    );\n};\n\nexport default AccountPlatformIcon;\n","import AccountPlatformIcon from './account-platform-icon';\n\nexport default AccountPlatformIcon;\n","import React from 'react';\nimport { Field, FieldProps, useFormikContext } from 'formik';\nimport { Icon, Input } from '@deriv/components';\nimport { useExchangeRate } from '@deriv/hooks';\nimport { getCurrencyDisplayCode } from '@deriv/shared';\nimport { observer } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport { useCashierStore } from '../../stores/useCashierStores';\nimport { TReactChangeEvent } from '../../types';\n\nimport './crypto-fiat-converter.scss';\n\ntype TInputGroupProps = React.PropsWithChildren<{\n    className: string;\n}>;\n\ntype TCryptoFiatConverterProps = {\n    arrow_icon_direction: 'right' | 'left';\n    from_currency: string;\n    hint?: React.ReactNode;\n    onChangeConverterFromAmount: (\n        event: { target: { value: string } },\n        from_currency: string,\n        to_currency: string,\n        converted_amount?: number\n    ) => void;\n    onChangeConverterToAmount: (\n        event: TReactChangeEvent,\n        to_currency: string,\n        from_currency: string,\n        converted_amount?: number\n    ) => void;\n    resetConverter: VoidFunction;\n    setArrowIconDirection: React.Dispatch<React.SetStateAction<'right' | 'left'>>;\n    to_currency: string;\n    validateFromAmount: VoidFunction;\n    validateToAmount: VoidFunction;\n};\n\nconst InputGroup = ({ children, className }: TInputGroupProps) => {\n    return (\n        <fieldset>\n            <div className={className}>{children}</div>\n        </fieldset>\n    );\n};\n\nconst CryptoFiatConverter = observer(\n    ({\n        arrow_icon_direction,\n        from_currency,\n        hint,\n        onChangeConverterFromAmount,\n        onChangeConverterToAmount,\n        resetConverter,\n        setArrowIconDirection,\n        to_currency,\n        validateFromAmount,\n        validateToAmount,\n    }: TCryptoFiatConverterProps) => {\n        const { crypto_fiat_converter } = useCashierStore();\n        const { exchange_rates } = useExchangeRate();\n        const { isDesktop } = useDevice();\n        const { converter_from_amount, converter_from_error, converter_to_error, converter_to_amount } =\n            crypto_fiat_converter;\n\n        const { handleChange } = useFormikContext();\n\n        React.useEffect(() => {\n            return () => resetConverter();\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        React.useEffect(() => {\n            setArrowIconDirection('right');\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [from_currency]);\n\n        return (\n            <div className='crypto-fiat-converter'>\n                <Field name='converter_from_amount' validate={validateFromAmount}>\n                    {({ field }: FieldProps<string>) => (\n                        <Input\n                            {...field}\n                            onFocus={() => {\n                                setArrowIconDirection('right');\n                            }}\n                            onChange={(e: TReactChangeEvent) => {\n                                const rate = exchange_rates?.[from_currency]?.[to_currency] ?? 0;\n                                const converted_amount = Number(e.target.value) * rate;\n                                onChangeConverterFromAmount(e, from_currency, to_currency, converted_amount);\n                                handleChange(e);\n                            }}\n                            type='text'\n                            error={converter_from_error as string}\n                            label={localize('Amount ({{currency}})', {\n                                currency: getCurrencyDisplayCode(from_currency),\n                            })}\n                            value={converter_from_amount}\n                            autoComplete='off'\n                            required\n                            hint={hint}\n                            classNameHint='crypto-fiat-converter__hint'\n                            data-testid='dt_converter_from_amount_input'\n                        />\n                    )}\n                </Field>\n                {isDesktop ? (\n                    <div className='crypto-fiat-converter__arrow-container'>\n                        {arrow_icon_direction === 'right' ? (\n                            <Icon icon='IcArrowRightBold' id='arrow_right_bold' data_testid='dti_arrow_right_bold' />\n                        ) : (\n                            <Icon icon='IcArrowLeftBold' id='arrow_left_bold' data_testid='dti_arrow_left_bold' />\n                        )}\n                    </div>\n                ) : arrow_icon_direction === 'right' ? (\n                    <Icon icon='IcArrowDownBold' />\n                ) : (\n                    <Icon icon='IcArrowUpBold' />\n                )}\n                <Field name='converter_to_amount' validate={validateToAmount}>\n                    {({ field }: FieldProps<string>) => (\n                        <InputGroup className='input-group'>\n                            <Input\n                                {...field}\n                                onFocus={() => {\n                                    setArrowIconDirection('left');\n                                }}\n                                onChange={(e: TReactChangeEvent) => {\n                                    const rate = exchange_rates?.[to_currency]?.[from_currency] ?? 0;\n                                    const converted_amount = Number(e.target.value) * rate;\n                                    onChangeConverterToAmount(e, to_currency, from_currency, converted_amount);\n                                    handleChange(e);\n                                }}\n                                type='text'\n                                error={converter_to_error}\n                                label={localize('Amount ({{currency}})', {\n                                    currency: getCurrencyDisplayCode(to_currency),\n                                })}\n                                value={converter_to_amount}\n                                autoComplete='off'\n                                hint={localize('Approximate value')}\n                                classNameHint='crypto-fiat-converter__hint'\n                                data-testid='dt_converter_to_amount_input'\n                            />\n                        </InputGroup>\n                    )}\n                </Field>\n            </div>\n        );\n    }\n);\n\nexport default CryptoFiatConverter;\n","import CryptoFiatConverter from './crypto-fiat-converter';\n\nexport default CryptoFiatConverter;\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Dialog } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { routes } from '@deriv/shared';\nimport { useStore, observer } from '@deriv/stores';\nimport { TError, TReactElement } from '../../types';\n\ntype TErrorDialogProps = {\n    className?: string;\n    error?: Partial<TError> | Record<string, never>;\n};\n\ntype TSetDetails = {\n    title: string;\n    cancel_button_text?: string;\n    confirm_button_text: undefined | string;\n    onConfirm?: () => void;\n    message: undefined | string | TReactElement;\n    has_close_icon?: boolean;\n};\n\nconst ErrorDialog = observer(({ className, error = {} }: TErrorDialogProps) => {\n    const {\n        ui: { disableApp, enableApp },\n    } = useStore();\n\n    const history = useHistory();\n    const [is_visible, setIsVisible] = React.useState(false);\n    const [details, setDetails] = React.useState<TSetDetails>({\n        title: '',\n        cancel_button_text: undefined,\n        confirm_button_text: '',\n        onConfirm: undefined,\n        message: '',\n    });\n\n    const dismissError = React.useCallback(() => {\n        if (error.setErrorMessage) {\n            error.setErrorMessage({ code: '', message: '' }, null, false);\n        }\n        setErrorVisibility(false);\n    }, [error]);\n\n    const mapErrorToDetails = React.useCallback(\n        (error_code?: string, error_message?: string) => {\n            if (\n                error_code &&\n                [\n                    'Fiat2CryptoTransferOverLimit',\n                    'Crypto2FiatTransferOverLimit',\n                    'Crypto2CryptoTransferOverLimit',\n                    'CryptoLimitAgeVerified',\n                ].includes(error_code)\n            ) {\n                setDetails({\n                    title: localize('Please verify your identity'),\n                    cancel_button_text: localize('Cancel'),\n                    confirm_button_text: localize('Verify identity'),\n                    onConfirm: () => history.push(routes.proof_of_identity),\n                    message: error_message,\n                });\n            } else if (error_code === 'FinancialAssessmentRequired') {\n                setDetails({\n                    title: localize('Cashier Error'),\n                    cancel_button_text: undefined,\n                    confirm_button_text: localize('OK'),\n                    onConfirm: undefined,\n                    message: (\n                        <Localize\n                            i18n_default_text='Please complete your <0>financial assessment</0>.'\n                            components={[\n                                <Link\n                                    to={routes.financial_assessment}\n                                    key={0}\n                                    className='link'\n                                    onClick={dismissError}\n                                />,\n                            ]}\n                        />\n                    ),\n                });\n            } else if (\n                error_code &&\n                [\n                    'CryptoMissingRequiredParameter',\n                    'CryptoWithdrawalBalanceExceeded',\n                    'CryptoWithdrawalLimitExceeded',\n                    'CryptoWithdrawalMaxReached',\n                    'CryptoWithdrawalNotAuthenticated',\n                    'CryptoWithdrawalError',\n                ].includes(error_code)\n            ) {\n                setDetails({\n                    title: localize('Error'),\n                    cancel_button_text: undefined,\n                    confirm_button_text: localize('Retry'),\n                    onConfirm: undefined,\n                    message: error_message,\n                    has_close_icon: true,\n                });\n            } else if (error_code === 'CryptoWithdrawalReadMore') {\n                setDetails({\n                    title: '',\n                    cancel_button_text: undefined,\n                    confirm_button_text: localize('OK'),\n                    onConfirm: undefined,\n                    message: error_message,\n                });\n            } else if (error_code === 'ShareMyAdsError') {\n                setDetails({\n                    title: localize('Deriv P2P unavailable'),\n                    confirm_button_text: localize('OK'),\n                    message: error_message,\n                    has_close_icon: true,\n                });\n            } else {\n                setDetails({\n                    title: localize('Cashier Error'),\n                    cancel_button_text: undefined,\n                    confirm_button_text: localize('OK'),\n                    onConfirm: undefined,\n                    message: error_message,\n                });\n            }\n        },\n        [dismissError, history]\n    );\n\n    React.useEffect(() => {\n        // avoid resetting the text when dismissing the pop up\n        if (error.message) {\n            mapErrorToDetails(error.code, error.message);\n        }\n    }, [error.code, error.message, mapErrorToDetails]);\n\n    React.useEffect(() => {\n        setErrorVisibility(!!error.message);\n    }, [error.message]);\n\n    React.useEffect(() => {\n        return () => dismissError();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const setErrorVisibility = (is_error_visible: boolean) => {\n        setIsVisible(is_error_visible);\n    };\n\n    return (\n        <Dialog\n            title={details.title}\n            confirm_button_text={details.confirm_button_text}\n            cancel_button_text={details.cancel_button_text}\n            className={className}\n            onConfirm={() => {\n                if (typeof details.onConfirm === 'function') {\n                    details.onConfirm();\n                }\n                dismissError();\n            }}\n            onEscapeButtonCancel={dismissError}\n            onCancel={details.cancel_button_text ? dismissError : undefined}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_visible={is_visible}\n            portal_element_id='modal_root'\n            dismissable={false}\n            has_close_icon={details.has_close_icon ?? false}\n        >\n            {/* to avoid the message disappearing before the pop-up */}\n            {/* use details.message instead of error.message */}\n            {/* since the setErrorVisibility hook gets called after error.message is removed */}\n            {details.message}\n        </Dialog>\n    );\n});\n\nexport default ErrorDialog;\n","import ErrorDialog from './error-dialog';\n\nexport default ErrorDialog;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { formatMoney, getCurrencyDisplayCode, getDecimalPlaces } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { TReactMouseEvent } from '../../types';\nimport { useExchangeRate } from '@deriv/hooks';\n\ntype TPercentageSelectorProps = {\n    amount: number;\n    from_account?: string;\n    getCalculatedAmount: (amount: string, converted_amount: number) => void;\n    percentage: number;\n    should_percentage_reset: boolean;\n    to_account?: string;\n    from_currency: string;\n    to_currency: string;\n};\n\ntype TCalculateAmountInputEvent = { target: { id: number } };\n\nconst PercentageSelector = ({\n    amount,\n    from_account,\n    getCalculatedAmount,\n    percentage,\n    should_percentage_reset,\n    to_account,\n    from_currency,\n    to_currency,\n}: TPercentageSelectorProps) => {\n    const [selected_percentage, setSelectedPercentage] = React.useState<number | string>('0');\n    const { exchange_rates } = useExchangeRate();\n    React.useEffect(() => {\n        if (should_percentage_reset) {\n            for (let i = 1; i <= 4; i++) {\n                const percentage_selector_block = document.getElementById(String(i));\n                if (percentage_selector_block)\n                    percentage_selector_block.style.backgroundColor = 'var(--general-section-1)';\n            }\n        }\n    }, [should_percentage_reset]);\n\n    React.useEffect(() => {\n        setSelectedPercentage(percentage || 0);\n    }, [percentage]);\n\n    React.useEffect(() => {\n        calculateAmount({ target: { id: 0 } }, 0);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [from_account, to_account]);\n\n    const calculateAmount = (e: TCalculateAmountInputEvent | TReactMouseEvent, percent: number) => {\n        let new_percentage = percent;\n        const is_percentage_selected = percent > 0 && percent === Number(selected_percentage);\n        if (is_percentage_selected) new_percentage -= 25;\n\n        setSelectedPercentage(new_percentage || 0);\n        const rate = exchange_rates?.[from_currency]?.[to_currency] ?? 1;\n        const converted_amount = amount * (new_percentage / 100) * rate;\n\n        getCalculatedAmount(\n            (amount * (new_percentage / 100)).toFixed(getDecimalPlaces(from_currency)),\n            converted_amount\n        );\n\n        for (let i = 1; i <= 4; i++) {\n            const percentage_selector_block = document.getElementById(String(i));\n            if (percentage_selector_block) {\n                if (\n                    i < (e as TCalculateAmountInputEvent).target.id ||\n                    (i === Number((e as TCalculateAmountInputEvent).target.id) && !is_percentage_selected)\n                ) {\n                    percentage_selector_block.style.backgroundColor = 'var(--status-success)';\n                } else {\n                    percentage_selector_block.style.backgroundColor = 'var(--general-section-1)';\n                }\n            }\n        }\n    };\n    const format_amount = formatMoney(from_currency, amount, true);\n    const currency__display_code = getCurrencyDisplayCode(from_currency);\n    return (\n        <React.Fragment>\n            <div className='percentage-selector' data-testid='dt_percentage_selector_id'>\n                <div className='percentage-selector__block-container'>\n                    <Text color='prominent' size='xs' className='percentage-selector__text'>\n                        {'25%'}\n                    </Text>\n                    <div\n                        id='1'\n                        className='percentage-selector-block'\n                        onClick={e => calculateAmount(e, 25)}\n                        data-testid='dt_percentage_selector_block_id_1'\n                    />\n                </div>\n                <div className='percentage-selector__block-container'>\n                    <Text color='prominent' size='xs' className='percentage-selector__text'>\n                        {'50%'}\n                    </Text>\n                    <div\n                        id='2'\n                        className='percentage-selector-block'\n                        onClick={e => calculateAmount(e, 50)}\n                        data-testid='dt_percentage_selector_block_id_2'\n                    />\n                </div>\n                <div className='percentage-selector__block-container'>\n                    <Text color='prominent' size='xs' className='percentage-selector__text'>\n                        {'75%'}\n                    </Text>\n                    <div\n                        id='3'\n                        className='percentage-selector-block'\n                        onClick={e => calculateAmount(e, 75)}\n                        data-testid='dt_percentage_selector_block_id_3'\n                    />\n                </div>\n                <div className='percentage-selector__block-container'>\n                    <Text color='prominent' size='xs' className='percentage-selector__text'>\n                        <Localize i18n_default_text='All' />\n                    </Text>\n                    <div\n                        id='4'\n                        className='percentage-selector-block'\n                        onClick={e => calculateAmount(e, 100)}\n                        data-testid='dt_percentage_selector_block_id_4'\n                    />\n                </div>\n            </div>\n            <Text color='less-prominent' size='xxs' line_height='l' className='percentage-selector__text'>\n                <Localize\n                    i18n_default_text='{{selected_percentage}}% of available balance ({{format_amount}} {{currency__display_code}})'\n                    values={{ selected_percentage, format_amount, currency__display_code }}\n                />\n            </Text>\n        </React.Fragment>\n    );\n};\n\nexport default PercentageSelector;\n","import PercentageSelector from './percentage-selector';\nimport './percentage-selector.scss';\n\nexport default PercentageSelector;\n","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { Button, Icon, Modal, Text } from '@deriv/components';\nimport { getCurrencyDisplayCode, routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport AccountPlatformIcon from '../../../components/account-platform-icon';\nimport { useCashierStore } from '../../../stores/useCashierStores';\n\nimport './account-transfer-receipt.scss';\n\ntype TSwitch = {\n    value?: string;\n    currency?: string;\n};\n\ntype TAccountTransferReceipt = RouteComponentProps & {\n    onClose: () => void;\n};\n\nconst AccountTransferReceipt = observer(({ onClose, history }: TAccountTransferReceipt) => {\n    const { common, client, traders_hub } = useStore();\n    const { account_transfer } = useCashierStore();\n    const { is_from_derivgo, is_from_outside_cashier } = common;\n    const { loginid, switchAccount } = client;\n    const { closeAccountTransferModal } = traders_hub;\n    const { isDesktop } = useDevice();\n    const { receipt, resetAccountTransfer, selected_from, selected_to, setShouldSwitchAccount } = account_transfer;\n\n    const [is_switch_visible, setIsSwitchVisible] = React.useState(false);\n    const [switch_to, setSwitchTo] = React.useState<TSwitch>({});\n\n    React.useEffect(() => {\n        return () => {\n            resetAccountTransfer();\n            closeAccountTransferModal();\n        };\n    }, [resetAccountTransfer]);\n\n    const openStatement = () => {\n        history.push(routes.statement);\n        resetAccountTransfer();\n    };\n\n    const switchAndRedirect = async () => {\n        await switchAccount(switch_to.value);\n        openStatement();\n    };\n\n    const toggleSwitchAlert = () => {\n        setIsSwitchVisible(!is_switch_visible);\n    };\n\n    const checkAccount = () => {\n        // we should always show the statement of the account transferred to\n        // unless if the account transferred to is your logged in account, or\n        // the account transferred to is a Deriv MT5 account that can't be switched to and from account is your logged in account\n        if (\n            selected_to.value === loginid ||\n            ((selected_to.is_mt || selected_to.is_dxtrade || selected_to.is_ctrader) && selected_from.value === loginid)\n        ) {\n            openStatement();\n        } else {\n            // if the account transferred to is a Deriv MT5 account that can't be switched to, switch to from account instead\n            // otherwise switch to the account transferred to\n            setShouldSwitchAccount(true);\n            setSwitchTo(selected_to.is_mt ? selected_from : selected_to);\n            toggleSwitchAlert();\n        }\n    };\n\n    return (\n        <div className='account-transfer-receipt__crypto'>\n            <Text as='h2' color='prominent' align='center' weight='bold' className='cashier__header'>\n                <Localize i18n_default_text='Your funds have been transferred' />\n            </Text>\n            <div className='account-transfer-receipt__crypto--amount'>\n                <Text as='p' size='l' weight='bold' color='profit-success'>\n                    <Localize\n                        i18n_default_text='{{amount}} {{currency}}'\n                        values={{\n                            amount: receipt.amount_transferred,\n                            currency: getCurrencyDisplayCode(selected_from.currency),\n                        }}\n                    />\n                </Text>\n            </div>\n            <div className='account-transfer-receipt__crypto--details-wrapper'>\n                <div className='crypto-transfer-from'>\n                    <div className='crypto-transfer-from-details'>\n                        <AccountPlatformIcon account={selected_from} size={32} />\n                        <Text as='p' size='s' weight='bold'>\n                            <Localize i18n_default_text={selected_from.text} />\n                        </Text>\n                    </div>\n                    {!is_from_derivgo && (\n                        <Text as='p' size='s' color='less-prominent' align='center'>\n                            {selected_from.value}\n                        </Text>\n                    )}\n                </div>\n                <Icon className='crypto-transferred-icon' icon='IcArrowDownBold' />\n                <div className='crypto-transfer-to'>\n                    <div className='crypto-transfer-to-details'>\n                        <AccountPlatformIcon account={selected_to} size={32} />\n                        <Text as='p' size='s' weight='bold'>\n                            <Localize i18n_default_text={selected_to.text} />\n                        </Text>\n                    </div>\n                    {!is_from_derivgo && (\n                        <Text as='p' size='s' color='less-prominent' align='center'>\n                            {selected_to.value}\n                        </Text>\n                    )}\n                </div>\n            </div>\n            <div className='account-transfer-receipt__crypto--form-submit'>\n                {!is_from_derivgo && (\n                    <Button\n                        className='account-transfer-receipt__button'\n                        has_effect\n                        text={localize('View transaction details')}\n                        onClick={checkAccount}\n                        secondary\n                        large\n                    />\n                )}\n                <Button\n                    className='account-transfer-receipt__button'\n                    has_effect\n                    text={is_from_outside_cashier ? localize('Close') : localize('Make a new transfer')}\n                    onClick={is_from_outside_cashier ? onClose : resetAccountTransfer}\n                    primary\n                    large\n                />\n            </div>\n            <Modal\n                is_open={is_switch_visible}\n                toggleModal={toggleSwitchAlert}\n                has_close_icon={!isDesktop}\n                className='account_transfer_switch_modal'\n                small\n                title={localize(`Switch to ${switch_to.currency} account?`)}\n            >\n                <Modal.Body>\n                    <Localize\n                        i18n_default_text='We’re switching over to your {{currency}} account to view the transaction.'\n                        values={{ currency: switch_to.currency }}\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        has_effect\n                        text={localize('Cancel')}\n                        onClick={() => {\n                            setShouldSwitchAccount(false);\n                            toggleSwitchAlert();\n                        }}\n                        secondary\n                        large\n                    />\n                    <Button\n                        has_effect\n                        text={localize(`Switch to ${switch_to.currency} account`)}\n                        onClick={switchAndRedirect}\n                        primary\n                        large\n                    />\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n});\n\nexport default withRouter(AccountTransferReceipt);\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Field, FieldProps, Form, Formik } from 'formik';\nimport { Button, Dropdown, InlineMessage, Input, Loading, Money, StatusBadge, Text } from '@deriv/components';\nimport {\n    CFD_PLATFORMS,\n    getCurrencyDisplayCode,\n    getCurrencyName,\n    getDecimalPlaces,\n    getPlatformSettings,\n    MT5_ACCOUNT_STATUS,\n    routes,\n    startPerformanceEventTimer,\n    TRADING_PLATFORM_STATUS,\n    validNumber,\n} from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { useMFAccountStatus, useExchangeRate } from '@deriv/hooks';\nimport { useDevice } from '@deriv-com/ui';\nimport AccountPlatformIcon from '../../../components/account-platform-icon';\nimport CryptoFiatConverter from '../../../components/crypto-fiat-converter';\nimport ErrorDialog from '../../../components/error-dialog';\nimport PercentageSelector from '../../../components/percentage-selector';\nimport { useCashierStore } from '../../../stores/useCashierStores';\nimport { TAccount, TAccountsList, TError, TReactChangeEvent, TradingPlatformStatusResponse } from '../../../types';\nimport AccountTransferReceipt from '../account-transfer-receipt/account-transfer-receipt';\nimport './account-transfer-form.scss';\n\ntype TAccountTransferFormProps = {\n    error?: TError;\n    onClickDeposit?: () => void;\n    onClickNotes?: () => void;\n    onClose: () => void;\n    TradingPlatformStatusData?: TradingPlatformStatusResponse['trading_platform_status'];\n};\n\nconst AccountOption = ({\n    account,\n    idx,\n    is_pending_verification,\n    is_verification_failed,\n    is_verification_needed,\n    is_account_unavailable,\n    is_server_maintenance,\n}: TAccountsList) => {\n    const is_cfd_account = account.is_dxtrade || account.is_ctrader || account.is_mt;\n\n    const has_show_account_status =\n        is_pending_verification ||\n        is_verification_needed ||\n        is_verification_failed ||\n        is_server_maintenance ||\n        is_account_unavailable;\n\n    const getAccountStatusText = () => {\n        if (is_pending_verification) {\n            return (\n                <Text color='warning' size='xs'>\n                    <Localize i18n_default_text='In review' />\n                </Text>\n            );\n        } else if (is_verification_needed) {\n            return (\n                <Text color='info-blue' size='xs'>\n                    <Localize i18n_default_text='Needs verification' />\n                </Text>\n            );\n        } else if (is_verification_failed) {\n            return (\n                <Text color='red' size='xs'>\n                    <Localize i18n_default_text='Failed' />\n                </Text>\n            );\n        } else if (is_server_maintenance) {\n            return (\n                <StatusBadge\n                    account_status='under_maintenance'\n                    icon='IcAlertWarning'\n                    text={<Localize i18n_default_text='<0>Server maintenance</0>' components={[<span key={0} />]} />}\n                />\n            );\n        } else if (is_account_unavailable) {\n            return (\n                <StatusBadge\n                    account_status={TRADING_PLATFORM_STATUS.UNAVAILABLE}\n                    icon='IcAlertWarning'\n                    text={\n                        <Localize i18n_default_text='<0>Temporarily unavailable</0>' components={[<span key={0} />]} />\n                    }\n                />\n            );\n        }\n    };\n\n    return (\n        <React.Fragment key={idx}>\n            {(account.currency || account.platform_icon) && (\n                <div className='account-transfer-form__icon'>\n                    <AccountPlatformIcon account={account} size={16} />\n                </div>\n            )}\n\n            <div className='account-transfer-form__currency-wrapper'>\n                <Text size='xxs' line_height='xs' styles={{ color: 'prominent', fontWeight: 'inherit' }}>\n                    {!is_cfd_account ? getCurrencyName(account.currency) : account.text}\n                </Text>\n                <Text size='xxxs' align='left' color='less-prominent'>\n                    {account.value}\n                </Text>\n            </div>\n\n            <span className='account-transfer-form__balance'>\n                {!has_show_account_status ? (\n                    <Money\n                        amount={account.balance}\n                        currency={account.currency}\n                        has_sign={Boolean(account.balance && Number(account.balance) < 0)}\n                        show_currency\n                    />\n                ) : (\n                    getAccountStatusText()\n                )}\n            </span>\n        </React.Fragment>\n    );\n};\n\nlet accounts_from: TAccount[] = [];\nlet accounts_to: TAccount[] = [];\nlet ctrader_accounts_from: TAccount[] = [];\nlet ctrader_accounts_to: TAccount[] = [];\nlet dxtrade_accounts_from: TAccount[] = [];\nlet dxtrade_accounts_to: TAccount[] = [];\nlet mt_accounts_from: TAccount[] = [];\nlet mt_accounts_to: TAccount[] = [];\nlet remaining_transfers: number | undefined;\nlet has_reached_maximum_daily_transfers = false;\n\nconst AccountTransferForm = observer(\n    ({\n        error,\n        onClickDeposit,\n        onClickNotes,\n\n        onClose,\n        TradingPlatformStatusData,\n    }: TAccountTransferFormProps) => {\n        const [arrow_icon_direction, setArrowIconDirection] = React.useState<'right' | 'left'>('right');\n        const {\n            client,\n            common: { is_from_outside_cashier },\n            traders_hub: { closeAccountTransferModal },\n        } = useStore();\n        const { isDesktop, isMobile } = useDevice();\n        const { account_limits, authentication_status, getLimits: onMount } = client;\n\n        const mf_account_status = useMFAccountStatus();\n        const { account_transfer, crypto_fiat_converter, general_store } = useCashierStore();\n        const { handleSubscription } = useExchangeRate();\n\n        const {\n            account_transfer_amount,\n            accounts_list,\n            onChangeTransferFrom,\n            onChangeTransferTo,\n            requestTransferBetweenAccounts,\n            selected_from,\n            selected_to,\n            setAccountTransferAmount,\n            error: { setErrorMessage },\n            setTransferPercentageSelectorResult,\n            transfer_limit,\n            validateTransferFromAmount,\n            validateTransferToAmount,\n            is_transfer_confirm,\n        } = account_transfer;\n        const { percentage, should_percentage_reset } = general_store;\n        const {\n            converter_from_amount,\n            converter_from_error,\n            converter_to_amount,\n            converter_to_error,\n            onChangeConverterFromAmount,\n            onChangeConverterToAmount,\n            resetConverter,\n        } = crypto_fiat_converter;\n\n        const is_migration_status_present =\n            selected_to.status === MT5_ACCOUNT_STATUS.MIGRATED_WITH_POSITION ||\n            selected_to.status === MT5_ACCOUNT_STATUS.MIGRATED_WITHOUT_POSITION;\n\n        const [from_accounts, setFromAccounts] = React.useState({});\n        const [to_accounts, setToAccounts] = React.useState({});\n        const [transfer_to_hint, setTransferToHint] = React.useState<JSX.Element>();\n\n        const { daily_transfers } = account_limits;\n        const mt5_remaining_transfers = daily_transfers?.mt5;\n        const ctrader_remaining_transfers = daily_transfers?.ctrader;\n        const dxtrade_remaining_transfers = daily_transfers?.dxtrade;\n        const internal_remaining_transfers = daily_transfers?.internal;\n\n        const is_mt_transfer = selected_to.is_mt || selected_from.is_mt;\n        const is_ctrader_transfer = selected_to.is_ctrader || selected_from.is_ctrader;\n        const is_dxtrade_transfer = selected_to.is_dxtrade || selected_from.is_dxtrade;\n\n        const is_mf_status_pending = mf_account_status === 'pending';\n        const is_mf_status_need_verification = mf_account_status === 'needs_verification';\n        const is_mf_status_verification_failed = mf_account_status === 'failed';\n        const is_mf_status_pending_or_needs_verification =\n            is_mf_status_pending || is_mf_status_need_verification || is_mf_status_verification_failed;\n        const is_unavailable_status_present = [selected_from.status, selected_to.status].includes(\n            MT5_ACCOUNT_STATUS.UNAVAILABLE\n        );\n        const is_maintenance_status_present = [selected_from.status, selected_to.status].includes(\n            MT5_ACCOUNT_STATUS.UNDER_MAINTENANCE\n        );\n        const platform_name_dxtrade = getPlatformSettings(CFD_PLATFORMS.DXTRADE).name;\n\n        const history = useHistory();\n\n        const validateAmount = (amount: string) => {\n            if (!amount) return localize('This field is required.');\n\n            if (is_mf_status_need_verification || is_mf_status_verification_failed)\n                return (\n                    <Localize\n                        i18n_default_text='<0>Verify your account to transfer funds.</0> <1>Verify now</1>'\n                        components={[\n                            <Text color='var(--status-info)' key={0} size={!isMobile ? 'xxs' : 'xxxs'} />,\n                            <Link\n                                className='account-transfer-form__link'\n                                key={1}\n                                onClick={closeAccountTransferModal}\n                                to='/account/proof-of-identity'\n                            />,\n                        ]}\n                    />\n                );\n\n            if (is_mf_status_pending)\n                return (\n                    <Text color='var(--status-info)' size={!isMobile ? 'xxs' : 'xxxs'}>\n                        <Localize i18n_default_text='Unavailable as your documents are still under review' />\n                    </Text>\n                );\n\n            const { is_ok, message } = validNumber(amount, {\n                type: 'float',\n                decimals: getDecimalPlaces(selected_from.currency || ''),\n                min: Number(transfer_limit.min),\n                max: Number(transfer_limit.max),\n            });\n            if (!is_ok) return message;\n\n            if (typeof selected_from.balance !== 'undefined' && Number(selected_from.balance) < Number(amount))\n                return localize('Insufficient balance');\n\n            return undefined;\n        };\n\n        const shouldShowTransferButton = (amount: string) => {\n            return selected_from.currency === selected_to.currency ? !amount : !converter_from_amount;\n        };\n\n        const getAccounts = (type: string, { is_mt, is_ctrader, is_dxtrade }: TAccount) => {\n            if (type === 'from') {\n                if (is_mt) return mt_accounts_from;\n                if (is_ctrader) return ctrader_accounts_from;\n                if (is_dxtrade) return dxtrade_accounts_from;\n\n                return accounts_from;\n            } else if (type === 'to') {\n                if (is_mt) return mt_accounts_to;\n                if (is_ctrader) return ctrader_accounts_to;\n                if (is_dxtrade) return dxtrade_accounts_to;\n\n                return accounts_to;\n            }\n            return [];\n        };\n\n        React.useEffect(() => {\n            if (selected_from?.currency && selected_to?.currency) {\n                const is_arrow_right = arrow_icon_direction === 'right';\n                const base_currency = is_arrow_right ? selected_from.currency : selected_to.currency;\n                const target_currency = is_arrow_right ? selected_to.currency : selected_from.currency;\n                handleSubscription(base_currency, target_currency);\n            }\n        }, [selected_from, selected_to, arrow_icon_direction, handleSubscription]);\n\n        React.useEffect(() => {\n            onMount();\n        }, [onMount]);\n\n        React.useEffect(() => {\n            accounts_from = [];\n            mt_accounts_from = [];\n            ctrader_accounts_from = [];\n            dxtrade_accounts_from = [];\n            accounts_to = [];\n            mt_accounts_to = [];\n            ctrader_accounts_to = [];\n            dxtrade_accounts_to = [];\n            accounts_list.forEach((account, idx) => {\n                const is_selected_from = account.value === selected_from.value;\n                let platform = '';\n                if (account.is_mt) {\n                    platform = CFD_PLATFORMS.MT5;\n                } else if (account.is_ctrader) {\n                    platform = CFD_PLATFORMS.CTRADER;\n                } else {\n                    platform = CFD_PLATFORMS.DXTRADE;\n                }\n\n                const is_server_maintenance =\n                    TradingPlatformStatusData?.find(status => status?.platform === platform)?.status ===\n                        TRADING_PLATFORM_STATUS.MAINTENANCE || account.status === MT5_ACCOUNT_STATUS.UNDER_MAINTENANCE;\n\n                const is_account_unavailable = account.status === MT5_ACCOUNT_STATUS.UNAVAILABLE;\n\n                const text = (\n                    <AccountOption\n                        idx={idx}\n                        account={account}\n                        is_pending_verification={is_mf_status_pending}\n                        is_selected_from={is_selected_from}\n                        is_account_unavailable={is_account_unavailable}\n                        is_verification_failed={is_mf_status_verification_failed}\n                        is_verification_needed={is_mf_status_need_verification}\n                        is_server_maintenance={is_server_maintenance}\n                    />\n                );\n\n                const value = account.value;\n\n                const is_cfd_account = account.is_mt || account.is_ctrader || account.is_dxtrade;\n                getAccounts('from', account).push({\n                    text,\n                    value,\n                    is_mt: account.is_mt,\n                    is_ctrader: account.is_ctrader,\n                    is_dxtrade: account.is_dxtrade,\n                    nativepicker_text: `${is_cfd_account ? account.market_type : getCurrencyName(account.currency)} (${\n                        account.balance\n                    } ${is_cfd_account ? account.currency : account.text})`,\n                });\n\n                if (\n                    (selected_from.is_mt && (account.is_dxtrade || account.is_ctrader)) ||\n                    (selected_from.is_dxtrade && (account.is_mt || account.is_ctrader)) ||\n                    (selected_from.is_ctrader && (account.is_mt || account.is_dxtrade))\n                )\n                    return;\n\n                // account from and to cannot be the same\n                if (!is_selected_from) {\n                    const is_selected_from_mt = selected_from.is_mt && account.is_mt;\n                    const is_selected_from_ctrader = selected_from.is_ctrader && account.is_ctrader;\n                    const is_selected_from_dxtrade = selected_from.is_dxtrade && account.is_dxtrade;\n\n                    // cannot transfer to MT account from MT\n                    // cannot transfer to cTrader account from cTrader\n                    // cannot transfer to Dxtrade account from Dxtrade\n\n                    const is_disabled = is_selected_from_mt || is_selected_from_ctrader || is_selected_from_dxtrade;\n\n                    getAccounts('to', account).push({\n                        text,\n                        value,\n                        is_mt: account.is_mt,\n                        is_ctrader: account.is_ctrader,\n                        is_dxtrade: account.is_dxtrade,\n                        disabled: is_disabled,\n                        nativepicker_text: `${\n                            is_cfd_account ? account.market_type : getCurrencyName(account.currency)\n                        } (${account.balance} ${is_cfd_account ? account.currency : account.text})`,\n                    });\n                }\n            });\n\n            setFromAccounts({\n                ...(mt_accounts_from.length && { [localize('Deriv MT5 accounts')]: mt_accounts_from }),\n                ...(ctrader_accounts_from.length && { [localize('Deriv cTrader accounts')]: ctrader_accounts_from }),\n                ...(dxtrade_accounts_from.length && {\n                    [localize('{{platform_name_dxtrade}} accounts', { platform_name_dxtrade })]: dxtrade_accounts_from,\n                }),\n                ...(accounts_from.length && { [localize('Deriv accounts')]: accounts_from }),\n            });\n\n            setToAccounts({\n                ...(mt_accounts_to.length && { [localize('Deriv MT5 accounts')]: mt_accounts_to }),\n                ...(ctrader_accounts_to.length && { [localize('Deriv cTrader accounts')]: ctrader_accounts_to }),\n                ...(dxtrade_accounts_to.length && {\n                    [localize('{{platform_name_dxtrade}} accounts', { platform_name_dxtrade })]: dxtrade_accounts_to,\n                }),\n                ...(accounts_to.length && { [localize('Deriv accounts')]: accounts_to }),\n            });\n        }, [accounts_list, selected_to, selected_from]); // eslint-disable-line react-hooks/exhaustive-deps\n\n        React.useEffect(() => {\n            const getRemainingTransfers = () => {\n                if (is_mt_transfer) {\n                    return mt5_remaining_transfers?.available;\n                } else if (is_ctrader_transfer) {\n                    return ctrader_remaining_transfers?.available;\n                } else if (is_dxtrade_transfer) {\n                    return dxtrade_remaining_transfers?.available;\n                }\n                return internal_remaining_transfers?.available;\n            };\n\n            remaining_transfers = Number(getRemainingTransfers() ?? 0);\n            has_reached_maximum_daily_transfers = !remaining_transfers;\n\n            let hint_text;\n            if (is_migration_status_present) {\n                hint_text = <Localize i18n_default_text='You can no longer open new positions with this account.' />;\n            } else if (is_unavailable_status_present) {\n                hint_text = <Localize i18n_default_text='Check back in a few minutes by refreshing the page.' />;\n            } else if (is_maintenance_status_present) {\n                hint_text = (\n                    <Localize\n                        i18n_default_text={`We’re currently performing server maintenance. Service may be affected.`}\n                        components={[<strong key={0} />]}\n                    />\n                );\n            } else {\n                const transfer_text = remaining_transfers > 1 ? 'transfers' : 'transfer';\n                hint_text = (\n                    <Localize\n                        i18n_default_text='You have {{remaining_transfers}} {{transfer_text}} remaining for today.'\n                        values={{ remaining_transfers, transfer_text }}\n                    />\n                );\n            }\n            setTransferToHint(hint_text);\n            resetConverter();\n        }, [account_limits, is_migration_status_present, selected_from, selected_to]); // eslint-disable-line react-hooks/exhaustive-deps\n\n        const is_mt5_restricted =\n            selected_from?.is_mt &&\n            selected_from?.status?.includes('poa_failed') &&\n            authentication_status?.document_status !== 'verified';\n\n        const poa_pending_msg = localize(\n            'You will be able to transfer funds between MT5 accounts and other accounts once your address is verified.'\n        );\n\n        const Mt5RestrictedMsg = () => (\n            <Localize\n                i18n_default_text='Please <0>resubmit</0> your proof of address to transfer funds between MT5 and Deriv accounts.'\n                components={[<Link key={0} to={routes.proof_of_address} className='link dark' />]}\n            />\n        );\n\n        const depositClick = () => {\n            startPerformanceEventTimer('load_cashier_time');\n            if (onClickDeposit) {\n                onClickDeposit();\n            }\n            history.push(routes.cashier_deposit);\n        };\n\n        const getMt5Error = () => {\n            if (is_mt5_restricted) {\n                return authentication_status?.document_status === 'pending' ? poa_pending_msg : <Mt5RestrictedMsg />;\n            }\n            return null;\n        };\n\n        const NotesLink = () => {\n            return (\n                <div className='account-transfer-form__button-link' onClick={onClickNotes}>\n                    <Text size='xs' weight='bold' color='red'>\n                        <Localize i18n_default_text='Notes ' />\n                    </Text>\n                </div>\n            );\n        };\n\n        if (is_transfer_confirm) {\n            return <AccountTransferReceipt onClose={onClose} />;\n        }\n\n        return (\n            <div\n                className='cashier__wrapper account-transfer-form__wrapper'\n                data-testid='dt_account_transfer_form_wrapper'\n            >\n                {!is_from_outside_cashier && (\n                    <Text\n                        as='h2'\n                        color='prominent'\n                        weight='bold'\n                        align='center'\n                        className='cashier__header account-transfer-form__header'\n                    >\n                        {localize('Transfer between your accounts in Deriv')}\n                    </Text>\n                )}\n                <Formik\n                    initialValues={{\n                        amount: account_transfer_amount || '',\n                        converter_from_amount: converter_from_amount || '',\n                        converter_to_amount: converter_to_amount || '',\n                    }}\n                    onSubmit={() => {\n                        requestTransferBetweenAccounts({\n                            amount: account_transfer_amount ? Number(account_transfer_amount) : 0,\n                        });\n                    }}\n                    validateOnBlur={false}\n                    enableReinitialize\n                >\n                    {({ errors, handleChange, isSubmitting, setFieldValue, setFieldError, values }) => (\n                        <React.Fragment>\n                            {isSubmitting || accounts_list.length === 0 ? (\n                                <div className='cashier__loader-wrapper' data-testid='dt_cashier_loader_wrapper'>\n                                    <Loading className='cashier__loader' is_fullscreen={false} />\n                                </div>\n                            ) : (\n                                <>\n                                    {has_reached_maximum_daily_transfers && (\n                                        <div className='account-transfer-form__inline-warning-message'>\n                                            <InlineMessage\n                                                message={localize(\n                                                    'You have reached the maximum daily transfers. Please try again tomorrow.'\n                                                )}\n                                                size='sm'\n                                            />\n                                        </div>\n                                    )}\n                                    <Form className='account-transfer-form' noValidate>\n                                        <div\n                                            className='cashier__drop-down-wrapper account-transfer-form__drop-down-wrapper'\n                                            data-testid='dt_account_transfer_form_drop_down_wrapper'\n                                        >\n                                            <Dropdown\n                                                id='transfer_from'\n                                                className={classNames('account-transfer-form__drop-down', {\n                                                    'account-transfer-form__drop-down--disabled':\n                                                        is_mf_status_pending_or_needs_verification,\n                                                })}\n                                                classNameDisplay='cashier__drop-down-display'\n                                                classNameDisplaySpan='cashier__drop-down-display-span'\n                                                classNameItems='cashier__drop-down-items'\n                                                classNameLabel='cashier__drop-down-label'\n                                                disabled={is_mf_status_pending_or_needs_verification}\n                                                test_id='dt_account_transfer_form_drop_down'\n                                                is_large\n                                                label={localize('From')}\n                                                list={from_accounts}\n                                                list_height='404'\n                                                name='transfer_from'\n                                                value={selected_from.value}\n                                                onChange={(e: TReactChangeEvent) => {\n                                                    onChangeTransferFrom(e);\n                                                    handleChange(e);\n                                                    setFieldValue('amount', '');\n                                                    setTimeout(() => setFieldError('amount', ''));\n                                                }}\n                                                error={selected_from.error}\n                                            />\n                                            <Dropdown\n                                                id='transfer_to'\n                                                className='account-transfer-form__drop-down account-transfer-form__drop-down--to-dropdown'\n                                                classNameDisplay='cashier__drop-down-display'\n                                                classNameDisplaySpan='cashier__drop-down-display-span'\n                                                classNameItems='cashier__drop-down-items'\n                                                classNameLabel='cashier__drop-down-label'\n                                                cclassNameHint={classNames('account-transfer-form__hint', {\n                                                    'account-transfer-form__hint__disabled':\n                                                        has_reached_maximum_daily_transfers,\n                                                })}\n                                                test_id='dt_account_transfer_form_to_dropdown'\n                                                is_large\n                                                label={localize('To')}\n                                                list={to_accounts}\n                                                list_height='404'\n                                                initial_height_offset={isDesktop ? 180 : 160}\n                                                name='transfer_to'\n                                                value={selected_to.value}\n                                                onChange={(e: TReactChangeEvent) => {\n                                                    onChangeTransferTo(e);\n                                                    setFieldValue('amount', '');\n                                                    setTimeout(() => setFieldError('amount', ''));\n                                                }}\n                                                hint={transfer_to_hint}\n                                                error={getMt5Error() ?? selected_to.error}\n                                            />\n                                        </div>\n                                        {selected_from.currency === selected_to.currency ? (\n                                            <Field name='amount' validate={validateAmount}>\n                                                {({ field }: FieldProps<string>) => (\n                                                    <Input\n                                                        {...field}\n                                                        onChange={(e: TReactChangeEvent) => {\n                                                            setErrorMessage({ code: '', message: '' });\n                                                            handleChange(e);\n                                                            setAccountTransferAmount(e.target.value);\n                                                        }}\n                                                        className={classNames(\n                                                            'cashier__input dc-input--no-placeholder account-transfer-form__input',\n                                                            {\n                                                                'account-transfer-form__input-fit-content':\n                                                                    !is_from_outside_cashier,\n                                                            }\n                                                        )}\n                                                        classNameHint={classNames('account-transfer-form__hint', {\n                                                            'account-transfer-form__hint__disabled':\n                                                                is_mt5_restricted ||\n                                                                has_reached_maximum_daily_transfers,\n                                                        })}\n                                                        data-testid='dt_account_transfer_form_input'\n                                                        name='amount'\n                                                        type='text'\n                                                        label={localize('Amount')}\n                                                        error={errors.amount ? errors.amount : ''}\n                                                        required\n                                                        trailing_icon={\n                                                            selected_from.currency ? (\n                                                                <span\n                                                                    className={classNames(\n                                                                        'symbols',\n                                                                        `symbols--${selected_from.currency.toLowerCase()}`\n                                                                    )}\n                                                                >\n                                                                    {getCurrencyDisplayCode(selected_from.currency)}\n                                                                </span>\n                                                            ) : undefined\n                                                        }\n                                                        autoComplete='off'\n                                                        maxLength={30}\n                                                        hint={\n                                                            transfer_limit.max ? (\n                                                                <Localize\n                                                                    i18n_default_text='Transfer limits: <0 /> - <1 />'\n                                                                    components={[\n                                                                        <Money\n                                                                            className='account-transfer-form__hint-amount'\n                                                                            key={0}\n                                                                            amount={transfer_limit.min}\n                                                                            currency={selected_from.currency}\n                                                                            show_currency\n                                                                        />,\n                                                                        <Money\n                                                                            className='account-transfer-form__hint-amount'\n                                                                            key={1}\n                                                                            amount={transfer_limit.max}\n                                                                            currency={selected_from.currency}\n                                                                            show_currency\n                                                                        />,\n                                                                    ]}\n                                                                />\n                                                            ) : (\n                                                                ''\n                                                            )\n                                                        }\n                                                        disabled={is_mt5_restricted}\n                                                    />\n                                                )}\n                                            </Field>\n                                        ) : (\n                                            <div\n                                                className={\n                                                    is_mt5_restricted ? 'account-transfer-form__crypto--disabled' : ''\n                                                }\n                                            >\n                                                <div className='account-transfer-form__crypto--percentage-selector'>\n                                                    <PercentageSelector\n                                                        amount={\n                                                            selected_from.balance ? Number(selected_from.balance) : 0\n                                                        }\n                                                        from_account={selected_from.value}\n                                                        getCalculatedAmount={setTransferPercentageSelectorResult}\n                                                        percentage={percentage}\n                                                        should_percentage_reset={should_percentage_reset}\n                                                        to_account={selected_to.value}\n                                                        from_currency={selected_from.currency || ''}\n                                                        to_currency={selected_to.currency || ''}\n                                                    />\n                                                </div>\n                                                <CryptoFiatConverter\n                                                    arrow_icon_direction={arrow_icon_direction}\n                                                    from_currency={selected_from.currency || ''}\n                                                    to_currency={selected_to.currency || ''}\n                                                    hint={\n                                                        transfer_limit.max ? (\n                                                            <Localize\n                                                                i18n_default_text='Transfer limits: <0 /> - <1 />'\n                                                                components={[\n                                                                    <Money\n                                                                        className='account-transfer-form__hint-amount'\n                                                                        key={0}\n                                                                        amount={transfer_limit.min}\n                                                                        currency={selected_from.currency}\n                                                                        show_currency\n                                                                    />,\n                                                                    <Money\n                                                                        className='account-transfer-form__hint-amount'\n                                                                        key={1}\n                                                                        amount={transfer_limit.max}\n                                                                        currency={selected_from.currency}\n                                                                        show_currency\n                                                                    />,\n                                                                ]}\n                                                            />\n                                                        ) : (\n                                                            ''\n                                                        )\n                                                    }\n                                                    onChangeConverterFromAmount={onChangeConverterFromAmount}\n                                                    onChangeConverterToAmount={onChangeConverterToAmount}\n                                                    resetConverter={resetConverter}\n                                                    setArrowIconDirection={setArrowIconDirection}\n                                                    validateFromAmount={validateTransferFromAmount}\n                                                    validateToAmount={validateTransferToAmount}\n                                                />\n                                            </div>\n                                        )}\n                                        <div\n                                            className={classNames(\n                                                'cashier__form-submit',\n                                                'account-transfer-form__form-buttons',\n                                                {\n                                                    'account-transfer-form__form-buttons--with-notes':\n                                                        is_from_outside_cashier,\n                                                }\n                                            )}\n                                            data-testid='dt_account_transfer_form_submit'\n                                        >\n                                            {is_from_outside_cashier && <NotesLink />}\n                                            <div className='account-transfer-form__form-buttons__default'>\n                                                <Button\n                                                    is_disabled={is_mf_status_verification_failed}\n                                                    secondary\n                                                    large\n                                                    onClick={depositClick}\n                                                >\n                                                    <Localize i18n_default_text='Deposit' />\n                                                </Button>\n\n                                                <Button\n                                                    className='account-transfer-form__submit-button'\n                                                    type='submit'\n                                                    is_disabled={\n                                                        isSubmitting ||\n                                                        has_reached_maximum_daily_transfers ||\n                                                        !!selected_from.error ||\n                                                        !!selected_to.error ||\n                                                        (selected_from.balance && !Number(selected_from.balance)) ||\n                                                        !!converter_from_error ||\n                                                        !!converter_to_error ||\n                                                        !!errors.amount ||\n                                                        shouldShowTransferButton(values.amount) ||\n                                                        is_mt5_restricted ||\n                                                        is_unavailable_status_present ||\n                                                        is_maintenance_status_present\n                                                    }\n                                                    primary\n                                                    large\n                                                >\n                                                    <Localize i18n_default_text='Transfer' />\n                                                </Button>\n                                            </div>\n                                        </div>\n                                        {!is_from_outside_cashier && <ErrorDialog error={error} />}\n                                    </Form>\n                                </>\n                            )}\n                        </React.Fragment>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n);\nAccountTransferForm.displayName = 'AccountTransferForm';\nexport default AccountTransferForm;\n","import AccountTransferForm from './account-transfer-form';\n\nexport default AccountTransferForm;\n","import React, { useCallback } from 'react';\nimport { SideNote, Text } from '@deriv/components';\nimport { getCurrencyDisplayCode, getPlatformSettings } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { useCashierStore } from '../../../stores/useCashierStores';\nimport { observer, useStore } from '@deriv/stores';\n\nconst AccountTransferFormSideNoteBullet = ({ children }: React.PropsWithChildren) => (\n    <div className='account-transfer-form__bullet-wrapper'>\n        <div className='account-transfer-form__bullet' />\n        <Text size='xxs'>{children}</Text>\n    </div>\n);\n\nconst AccountTransferFormSideNote = observer(() => {\n    const platform_name_dxtrade = getPlatformSettings('dxtrade').name;\n    const platform_name_mt5 = getPlatformSettings('mt5').name;\n    const platform_name_ctrader = getPlatformSettings('ctrader').name;\n\n    const { client } = useStore();\n    const { account_limits, is_dxtrade_allowed } = client;\n\n    const { account_transfer } = useCashierStore();\n\n    const { minimum_fee, selected_from, selected_to, transfer_fee } = account_transfer;\n\n    const { daily_transfers } = account_limits;\n    const mt5_remaining_transfers = daily_transfers?.mt5;\n    const ctrader_remaining_transfers = daily_transfers?.ctrader;\n    const dxtrade_remaining_transfers = daily_transfers?.dxtrade;\n    const internal_remaining_transfers = daily_transfers?.internal;\n\n    const allowed_transfers_count = {\n        internal: internal_remaining_transfers?.allowed,\n        mt5: mt5_remaining_transfers?.allowed,\n        ctrader: ctrader_remaining_transfers?.allowed,\n        dxtrade: dxtrade_remaining_transfers?.allowed,\n    };\n    const currency = selected_from.currency || '';\n    const is_crypto_to_crypto_transfer = selected_from.is_crypto && selected_to.is_crypto;\n    const is_dxtrade_transfer = selected_to.is_dxtrade || selected_from.is_dxtrade;\n    const is_mt_transfer = selected_to.is_mt || selected_from.is_mt;\n\n    const getTransferFeeNote = useCallback(() => {\n        if (transfer_fee === 0) {\n            return is_dxtrade_allowed ? (\n                <Localize\n                    i18n_default_text='We do not charge a transfer fee for transfers in the same currency between your Deriv fiat and {{platform_name_mt5}} accounts, between your Deriv fiat and {{platform_name_ctrader}} accounts, and between your Deriv fiat and {{platform_name_dxtrade}} accounts.'\n                    values={{ platform_name_dxtrade, platform_name_mt5, platform_name_ctrader }}\n                />\n            ) : (\n                <Localize\n                    i18n_default_text='You’ll not be charged a transfer fee for transfers in the same currency between your Deriv fiat and {{platform_name_mt5}} accounts.'\n                    values={{ platform_name_mt5 }}\n                />\n            );\n        } else if (transfer_fee === 1) {\n            return is_dxtrade_allowed ? (\n                <Localize\n                    i18n_default_text='We’ll charge a 1% transfer fee for transfers in different currencies between your Deriv fiat and {{platform_name_mt5}} accounts and between your Deriv fiat and {{platform_name_dxtrade}} accounts.'\n                    values={{ platform_name_dxtrade, platform_name_mt5 }}\n                />\n            ) : (\n                <Localize\n                    i18n_default_text='We’ll charge a 1% transfer fee for transfers in different currencies between your Deriv fiat and {{platform_name_mt5}} accounts.'\n                    values={{ platform_name_mt5 }}\n                />\n            );\n        } else if (transfer_fee === 2 && is_crypto_to_crypto_transfer) {\n            return (\n                <Localize\n                    i18n_default_text='We’ll charge a 2% transfer fee or {{minimum_fee}} {{currency}}, whichever is higher, for transfers between your Deriv cryptocurrency accounts.'\n                    values={{\n                        minimum_fee,\n                        currency: getCurrencyDisplayCode(currency),\n                    }}\n                />\n            );\n        } else if (transfer_fee === 2 && (is_mt_transfer || is_dxtrade_transfer)) {\n            return is_dxtrade_allowed ? (\n                <Localize\n                    i18n_default_text='We’ll charge a 2% transfer fee or {{minimum_fee}} {{currency}}, whichever is higher, for transfers between your Deriv cryptocurrency and Deriv MT5 accounts and between your Deriv cryptocurrency and {{platform_name_dxtrade}} accounts.'\n                    values={{\n                        minimum_fee,\n                        currency: getCurrencyDisplayCode(currency),\n                        platform_name_dxtrade,\n                    }}\n                />\n            ) : (\n                <Localize\n                    i18n_default_text='We’ll charge a 2% transfer fee or {{minimum_fee}} {{currency}}, whichever is higher, for transfers between your Deriv cryptocurrency and Deriv MT5 accounts.'\n                    values={{\n                        minimum_fee,\n                        currency: getCurrencyDisplayCode(currency),\n                    }}\n                />\n            );\n        } else if (transfer_fee === 2 && !is_mt_transfer && !is_dxtrade_transfer) {\n            return (\n                <Localize\n                    i18n_default_text='We’ll charge a 2% transfer fee or {{minimum_fee}} {{currency}}, whichever is higher, for transfers between your Deriv fiat and Deriv cryptocurrency accounts.'\n                    values={{\n                        minimum_fee,\n                        currency: getCurrencyDisplayCode(currency),\n                    }}\n                />\n            );\n        }\n        return null;\n    }, [\n        currency,\n        is_crypto_to_crypto_transfer,\n        is_dxtrade_allowed,\n        is_dxtrade_transfer,\n        is_mt_transfer,\n        minimum_fee,\n        platform_name_dxtrade,\n        platform_name_mt5,\n        platform_name_ctrader,\n        transfer_fee,\n        selected_from.value,\n        selected_to.value,\n    ]);\n\n    const getDxtradeAllowedNotes = useCallback(() => {\n        if (is_dxtrade_allowed) {\n            return (\n                <React.Fragment>\n                    <AccountTransferFormSideNoteBullet>\n                        <Localize\n                            i18n_default_text='You may transfer between your Deriv fiat, cryptocurrency, {{platform_name_mt5}}, {{platform_name_ctrader}}, and {{platform_name_dxtrade}} accounts.'\n                            values={{ platform_name_dxtrade, platform_name_mt5, platform_name_ctrader }}\n                        />\n                    </AccountTransferFormSideNoteBullet>\n                    <AccountTransferFormSideNoteBullet>\n                        <Localize\n                            i18n_default_text='Each day, you can make up to {{ allowed_internal }} transfers between your Deriv accounts, up to {{ allowed_mt5 }} transfers between your Deriv and {{platform_name_mt5}} accounts, up to {{ allowed_ctrader }} transfers between your Deriv and {{platform_name_ctrader}} accounts, and up to {{ allowed_dxtrade }} transfers between your Deriv and {{platform_name_dxtrade}} accounts.'\n                            values={{\n                                allowed_internal: allowed_transfers_count?.internal,\n                                allowed_mt5: allowed_transfers_count?.mt5,\n                                allowed_dxtrade: allowed_transfers_count?.dxtrade,\n                                allowed_ctrader: allowed_transfers_count?.ctrader,\n                                platform_name_dxtrade,\n                                platform_name_mt5,\n                                platform_name_ctrader,\n                            }}\n                        />\n                    </AccountTransferFormSideNoteBullet>\n                </React.Fragment>\n            );\n        }\n        return (\n            <React.Fragment>\n                <AccountTransferFormSideNoteBullet>\n                    <Localize\n                        i18n_default_text='You may transfer between your Deriv fiat, cryptocurrency, and {{platform_name_mt5}} accounts.'\n                        values={{ platform_name_mt5 }}\n                    />\n                </AccountTransferFormSideNoteBullet>\n                <AccountTransferFormSideNoteBullet>\n                    <Localize\n                        i18n_default_text='Each day, you can make up to {{ allowed_internal }} transfers between your Deriv accounts and up to {{ allowed_mt5 }} transfers between your Deriv and {{platform_name_mt5}} accounts.'\n                        values={{\n                            allowed_internal: allowed_transfers_count?.internal,\n                            allowed_mt5: allowed_transfers_count?.mt5,\n                            platform_name_mt5,\n                        }}\n                    />\n                </AccountTransferFormSideNoteBullet>\n            </React.Fragment>\n        );\n    }, [\n        allowed_transfers_count?.dxtrade,\n        allowed_transfers_count?.internal,\n        allowed_transfers_count?.ctrader,\n        allowed_transfers_count?.mt5,\n        is_dxtrade_allowed,\n        platform_name_dxtrade,\n        platform_name_mt5,\n        platform_name_ctrader,\n        selected_from.value,\n        selected_to.value,\n    ]);\n\n    return (\n        <SideNote title={<Localize i18n_default_text='Notes' />}>\n            {getDxtradeAllowedNotes()}\n            <AccountTransferFormSideNoteBullet>\n                <Localize i18n_default_text='Transfer limits may vary depending on the exchange rates.' />\n            </AccountTransferFormSideNoteBullet>\n            <AccountTransferFormSideNoteBullet>\n                {getTransferFeeNote()}{' '}\n                <Localize i18n_default_text='Please bear in mind that some transfers may not be possible.' />\n            </AccountTransferFormSideNoteBullet>\n            <AccountTransferFormSideNoteBullet>\n                <Localize i18n_default_text='Transfers may be unavailable due to high volatility or technical issues and when the exchange markets are closed.' />\n            </AccountTransferFormSideNoteBullet>\n        </SideNote>\n    );\n});\n\nexport default AccountTransferFormSideNote;\n","import React from 'react';\nimport { Loading } from '@deriv/components';\nimport { useCashierLocked, useTradingPlatformStatus } from '@deriv/hooks';\nimport { WS } from '@deriv/shared';\nimport { useStore, observer } from '@deriv/stores';\nimport { useCashierStore } from '../../stores/useCashierStores';\nimport PageContainer from '../../components/page-container';\nimport CashierLocked from '../../components/cashier-locked';\nimport Error from '../../components/error';\nimport NoBalance from '../../components/no-balance';\nimport Virtual from '../../components/cashier-container/virtual';\nimport AccountTransferLocked from './account-transfer-locked';\nimport AccountTransferNoAccount from './account-transfer-no-account';\nimport AccountTransferForm from './account-transfer-form';\nimport AccountTransferFormSideNote from './account-transfer-form/account-transfer-form-side-note';\n\ntype TAccountTransferProps = {\n    onClickDeposit?: VoidFunction;\n    onClickNotes?: VoidFunction;\n    onClose: VoidFunction;\n    openAccountSwitcherModal?: VoidFunction;\n};\n\nconst AccountTransfer = observer(({ onClickDeposit, onClickNotes, onClose }: TAccountTransferProps) => {\n    const { client } = useStore();\n    const { account_transfer, general_store } = useCashierStore();\n\n    const {\n        accounts_list,\n        error,\n        has_no_account,\n        has_no_accounts_balance,\n        is_transfer_locked,\n        onMountAccountTransfer: onMount,\n        setAccountTransferAmount,\n        setIsTransferConfirm,\n    } = account_transfer;\n    const { is_loading } = general_store;\n    const is_cashier_locked = useCashierLocked();\n    const { data: TradingPlatformStatusData } = useTradingPlatformStatus();\n\n    const { is_switching, is_virtual } = client;\n    const [is_loading_status, setIsLoadingStatus] = React.useState(true);\n\n    React.useEffect(() => {\n        onMount();\n        (async () => {\n            try {\n                await WS.wait('authorize', 'website_status', 'get_settings', 'paymentagent_list');\n                setIsLoadingStatus(false);\n            } catch (e) {\n                // eslint-disable-next-line no-console\n                console.error(e);\n            }\n        })();\n\n        return () => {\n            setAccountTransferAmount('');\n            setIsTransferConfirm(false);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (is_virtual) {\n        return (\n            <PageContainer hide_breadcrumb right={<React.Fragment />}>\n                <Virtual />\n            </PageContainer>\n        );\n    }\n    if (is_loading || is_switching || is_loading_status || !TradingPlatformStatusData) {\n        return (\n            <PageContainer hide_breadcrumb right={<React.Fragment />}>\n                <Loading className='cashier__loader' is_fullscreen={false} />\n            </PageContainer>\n        );\n    }\n\n    if (is_cashier_locked) {\n        return (\n            <PageContainer hide_breadcrumb right={<React.Fragment />}>\n                <CashierLocked />\n            </PageContainer>\n        );\n    }\n    if (is_transfer_locked) {\n        return (\n            <PageContainer hide_breadcrumb right={<React.Fragment />}>\n                <AccountTransferLocked />\n            </PageContainer>\n        );\n    }\n    if (error.is_show_full_page || (error.message && !accounts_list.length)) {\n        // for errors with CTA hide the form and show the error,\n        // for others show them at the bottom of the form next to submit button\n        return (\n            <PageContainer hide_breadcrumb right={<React.Fragment />}>\n                <Error error={error} />\n            </PageContainer>\n        );\n    }\n    if (has_no_account) {\n        return (\n            <PageContainer hide_breadcrumb right={<React.Fragment />}>\n                <AccountTransferNoAccount />\n            </PageContainer>\n        );\n    }\n    if (has_no_accounts_balance) {\n        return (\n            <PageContainer hide_breadcrumb right={<React.Fragment />}>\n                <NoBalance onClickDeposit={onClickDeposit} />\n            </PageContainer>\n        );\n    }\n\n    return (\n        <PageContainer hide_breadcrumb right={<AccountTransferFormSideNote />}>\n            <AccountTransferForm\n                onClose={onClose}\n                error={error}\n                onClickDeposit={onClickDeposit}\n                onClickNotes={onClickNotes}\n                TradingPlatformStatusData={TradingPlatformStatusData}\n            />\n        </PageContainer>\n    );\n});\n\nexport default AccountTransfer;\n","import AccountTransfer from './account-transfer';\n\nexport default AccountTransfer;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Modal } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { useStore, observer } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport AccountTransfer from '@deriv/cashier/src/pages/account-transfer';\nimport ErrorDialog from '@deriv/cashier/src/components/error-dialog';\nimport './account-transfer-modal.scss';\n\ntype TAccountTransferModal = {\n    is_modal_open: boolean;\n    toggleModal: (e?: boolean) => void;\n};\n\nconst AccountTransferModal = observer(({ is_modal_open, toggleModal }: TAccountTransferModal) => {\n    const {\n        modules: {\n            cashier: {\n                account_transfer: { is_transfer_confirm, should_switch_account, setShouldSwitchAccount, error },\n                general_store: { setActiveTab },\n            },\n        },\n        traders_hub: { closeModal, setSelectedAccount },\n    } = useStore();\n\n    const history = useHistory();\n\n    React.useEffect(() => {\n        if (is_modal_open) setActiveTab('account_transfer');\n\n        return () => {\n            if (is_modal_open) {\n                setShouldSwitchAccount(false);\n                setSelectedAccount({});\n                setActiveTab('deposit');\n                closeModal();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [is_modal_open, error.code]);\n\n    const modal_title = !is_transfer_confirm && <Localize i18n_default_text={'Transfer funds to your accounts'} />;\n\n    const onClickDeposit = () => {\n        toggleModal();\n        history.push(routes.cashier_deposit);\n    };\n\n    const onClickNotes = () => {\n        toggleModal();\n        history.push(routes.cashier_acc_transfer);\n    };\n\n    if (error.code?.length) {\n        return <ErrorDialog error={error} />;\n    }\n\n    return (\n        <Modal\n            className={should_switch_account ? 'account-transfer-modal' : ''}\n            has_close_icon={!is_transfer_confirm}\n            is_open={is_modal_open}\n            is_title_centered={is_transfer_confirm}\n            small\n            title={modal_title}\n            toggleModal={toggleModal}\n            should_header_stick_body={false}\n        >\n            <Modal.Body>\n                <AccountTransfer onClickDeposit={onClickDeposit} onClickNotes={onClickNotes} onClose={toggleModal} />\n            </Modal.Body>\n        </Modal>\n    );\n});\n\nexport default AccountTransferModal;\n","import AccountTransferModal from './account-transfer-modal';\n\nexport default AccountTransferModal;\n"],"names":["_account_status$statu","account_status","useStore","client","status","some","CashierBreadcrumb","React","observer","_ref","children","_ref$hide_breadcrumb","hide_breadcrumb","left","right","_useStore","is_from_outside_cashier","common","isDesktop","useDevice","is_loading","is_authorize","className","classNames","Loading","is_fullscreen","ThemedScrollbars","height","is_scrollbar_hidden","_account_status$cashi","cashier_validation","validation","traders_hub","is_authentication_needed","is_low_risk_cr_eu_real","is_financial_account","is_financial_information_incomplete","is_trading_experience_incomplete","is_deposit_lock","landing_company_shortcode","is_account_to_be_closed_by_residence","is_need_authentication","useNeedAuthentication","is_tnc_needed","useIsTNCNeeded","is_need_financial_assessment","useNeedFinancialAssessment","is_duplicate_dob_phone","closeAccountTransferModal","excluded_until","history","is_crypto","is_eu","is_system_maintenance","is_cashier_locked","is_deposit_locked","is_withdrawal_locked","is_identity_verification_needed","is_pending_verification","account_time_of_closure","no_residence","includes","unwelcome_status","self_exclusion","no_withdrawal_or_trading_status","only_pa_withdrawals_allowed_status","withdraw_service_unavailable_for_pa","withdrawal_locked_status","documents_expired","cashier_locked_status","disabled_status","financial_assessment_required","ask_currency","ask_authenticate","ask_financial_risk_approval","ask_tin_information","ask_self_exclusion_max_turnover_set","ask_fix_details","pa_commision_withdrawal_limit","pathname","location","routes","cashier_deposit","icon","title","localize","description","Localize","i18n_default_text","values","date","formatDate","components","key","onClick","Chat","open","href","cashier_withdrawal","cashier_acc_transfer","getDescription","action","push","proof_of_identity","label","rel","exclude_until","_accounts$loginid","accounts","current_currency_type","is_withdrawal_lock","loginid","mf_account_status","useMFAccountStatus","useCashierLocked","useIsSystemMaintenance","useDepositLocked","useDuplicateDOBPhone","useHistory","state","getMessage","undefined","ACCOUNT_BADGE_STATUS","PENDING","EmptyState","ErrorComponent","header","message","button_link","onClickButton","button_text","footer","isMobile","Icon","Text","as","color","weight","align","size","line_height","ButtonLink","to","Button","text","primary","large","_ref2","AccountError","error","error_fields","address_city","address_line_1","address_postcode","address_state","email","phone","residence","clearErrorMessage","_error$setErrorMessag","setErrorMessage","call","code","Array","isArray","fields","details","map","field","join","interpolation","escapeValue","StaticUrl","is_document","NoBalance","onClickDeposit","currency","setTabIndex","useCashierStore","general_store","setCashierTabIndex","getCurrencyDisplayCode","style","marginTop","has_effect","startPerformanceEventTimer","withRouter","Virtual","_useStore$ui","ui","is_dark_mode_on","toggleAccountsDialog","_useStore$client","items","_toConsumableArray","content","financial_assessment","Checklist","is_from_derivgo","closeModal","_account$currency","_account$currency2","account","icon_class_name","appstore_icon_class_name","appstoreIconOnClickHandler","is_mt","platform_icon","TradingPlatformIcon","concat","toLowerCase","data_testid","InputGroup","CryptoFiatConverter","arrow_icon_direction","from_currency","hint","onChangeConverterFromAmount","onChangeConverterToAmount","resetConverter","setArrowIconDirection","to_currency","validateFromAmount","validateToAmount","crypto_fiat_converter","exchange_rates","useExchangeRate","converter_from_amount","converter_from_error","converter_to_error","converter_to_amount","handleChange","useFormikContext","Field","name","validate","_ref3","Input","_extends","onFocus","onChange","e","_exchange_rates$from_","_exchange_rates$from_2","rate","converted_amount","Number","target","value","type","autoComplete","required","classNameHint","id","_ref4","_exchange_rates$to_cu","_exchange_rates$to_cu2","ErrorDialog","_details$has_close_ic","_ref$error","disableApp","enableApp","_React$useState2","_slicedToArray","is_visible","setIsVisible","_React$useState4","cancel_button_text","confirm_button_text","onConfirm","setDetails","dismissError","setErrorVisibility","mapErrorToDetails","error_code","error_message","Link","has_close_icon","is_error_visible","Dialog","onEscapeButtonCancel","onCancel","portal_element_id","dismissable","amount","from_account","getCalculatedAmount","percentage","should_percentage_reset","to_account","selected_percentage","setSelectedPercentage","i","percentage_selector_block","document","getElementById","String","backgroundColor","calculateAmount","percent","new_percentage","is_percentage_selected","toFixed","getDecimalPlaces","format_amount","formatMoney","currency__display_code","_regeneratorRuntime","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_arrayWithHoles","_iterableToArrayLimit","_arrayLikeToArray","toString","from","test","_unsupportedIterableToArray","_nonIterableRest","AccountTransferReceipt","onClose","account_transfer","switchAccount","receipt","resetAccountTransfer","selected_from","selected_to","setShouldSwitchAccount","is_switch_visible","setIsSwitchVisible","switch_to","setSwitchTo","openStatement","statement","switchAndRedirect","_callee","_context","arguments","apply","_next","_throw","toggleSwitchAlert","amount_transferred","AccountPlatformIcon","is_dxtrade","is_ctrader","secondary","Modal","is_open","toggleModal","small","Body","Footer","remaining_transfers","AccountOption","idx","is_verification_failed","is_verification_needed","is_account_unavailable","is_server_maintenance","is_cfd_account","has_show_account_status","styles","fontWeight","getCurrencyName","StatusBadge","TRADING_PLATFORM_STATUS","UNAVAILABLE","Money","balance","has_sign","Boolean","show_currency","accounts_from","accounts_to","ctrader_accounts_from","ctrader_accounts_to","dxtrade_accounts_from","dxtrade_accounts_to","mt_accounts_from","mt_accounts_to","has_reached_maximum_daily_transfers","AccountTransferForm","_selected_from$status","onClickNotes","TradingPlatformStatusData","_useDevice","account_limits","authentication_status","onMount","getLimits","_useCashierStore","handleSubscription","account_transfer_amount","accounts_list","onChangeTransferFrom","onChangeTransferTo","requestTransferBetweenAccounts","setAccountTransferAmount","setTransferPercentageSelectorResult","transfer_limit","validateTransferFromAmount","validateTransferToAmount","is_transfer_confirm","is_migration_status_present","MT5_ACCOUNT_STATUS","MIGRATED_WITH_POSITION","MIGRATED_WITHOUT_POSITION","from_accounts","setFromAccounts","_React$useState6","to_accounts","setToAccounts","_React$useState8","transfer_to_hint","setTransferToHint","daily_transfers","mt5_remaining_transfers","mt5","ctrader_remaining_transfers","ctrader","dxtrade_remaining_transfers","dxtrade","internal_remaining_transfers","internal","is_mt_transfer","is_ctrader_transfer","is_dxtrade_transfer","is_mf_status_pending","is_mf_status_need_verification","is_mf_status_verification_failed","is_mf_status_pending_or_needs_verification","is_unavailable_status_present","is_maintenance_status_present","UNDER_MAINTENANCE","platform_name_dxtrade","getPlatformSettings","CFD_PLATFORMS","DXTRADE","validateAmount","_validNumber","validNumber","decimals","min","max","is_ok","getAccounts","is_arrow_right","base_currency","target_currency","_TradingPlatformStatu","is_selected_from","platform","MT5","CTRADER","find","MAINTENANCE","nativepicker_text","market_type","is_selected_from_mt","is_selected_from_ctrader","is_selected_from_dxtrade","is_disabled","disabled","_objectSpread","_defineProperty","_getRemainingTransfer","hint_text","available","transfer_text","is_mt5_restricted","document_status","poa_pending_msg","Mt5RestrictedMsg","proof_of_address","depositClick","NotesLink","Formik","initialValues","onSubmit","validateOnBlur","enableReinitialize","_ref12","_getMt5Error","errors","isSubmitting","setFieldValue","setFieldError","InlineMessage","Form","noValidate","Dropdown","classNameDisplay","classNameDisplaySpan","classNameItems","classNameLabel","test_id","is_large","list","list_height","setTimeout","cclassNameHint","initial_height_offset","_ref13","trailing_icon","maxLength","PercentageSelector","AccountTransferFormSideNoteBullet","AccountTransferFormSideNote","platform_name_mt5","platform_name_ctrader","is_dxtrade_allowed","minimum_fee","transfer_fee","allowed_transfers_count","allowed","is_crypto_to_crypto_transfer","getTransferFeeNote","useCallback","getDxtradeAllowedNotes","allowed_internal","allowed_mt5","allowed_dxtrade","allowed_ctrader","SideNote","AccountTransfer","has_no_account","has_no_accounts_balance","is_transfer_locked","onMountAccountTransfer","setIsTransferConfirm","useTradingPlatformStatus","data","is_switching","is_virtual","is_loading_status","setIsLoadingStatus","WS","wait","t0","console","PageContainer","CashierLocked","AccountTransferLocked","is_show_full_page","_Error","AccountTransferNoAccount","AccountTransferModal","_error$code","is_modal_open","_useStore$modules$cas","modules","cashier","_useStore$modules$cas2","should_switch_account","setActiveTab","_useStore$traders_hub","setSelectedAccount","modal_title","is_title_centered","should_header_stick_body"],"sourceRoot":""}