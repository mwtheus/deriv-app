{"version":3,"file":"js/core.verification-modal.0b232a694f3ef83c665a.js","mappings":"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","sources":["webpack:///../../account/src/Components/icon-message-content/icon-message-content.tsx","webpack:///../../account/src/Components/icon-message-content/index.ts","webpack:///../../api/src/hooks/useAuthorize.ts","webpack:///../../api/src/hooks/useResidenceList.ts","webpack:///../../api/src/hooks/useSettings.ts","webpack:///../../account/src/Components/poa/status/expired/expired.tsx","webpack:///../../account/src/Components/poa/status/expired/index.ts","webpack:///../../account/src/Components/poa/status/not-required/index.ts","webpack:///../../account/src/Components/poa/status/not-required/not-required.tsx","webpack:///../../account/src/Components/load-error-message/load-error-message.tsx","webpack:///../../account/src/Components/load-error-message/index.ts","webpack:///../../account/src/Components/leave-confirm/leave-confirm.tsx","webpack:///../../account/src/Components/leave-confirm/index.ts","webpack:///../../account/src/Constants/api-error-codes.ts","webpack:///../../account/src/Components/file-uploader-container/file-uploader.tsx","webpack:///../../account/src/hooks/useKycAuthStatus.ts","webpack:///../../account/src/Constants/file-uploader.tsx","webpack:///../../account/src/Components/file-uploader-container/file-uploader-container.tsx","webpack:///../../account/src/Components/file-uploader-container/index.ts","webpack:///../../account/src/Components/file-uploader-container/files-descriptions.tsx","webpack:///../../account/src/Components/scrollbars-container/scrollbars-container.tsx","webpack:///../../account/src/Components/form-body/index.ts","webpack:///../../account/src/Components/form-body/form-body.tsx","webpack:///../../account/src/Components/form-footer/form-footer.tsx","webpack:///../../account/src/Components/form-footer/index.ts","webpack:///../../account/src/Components/poa/common-mistakes/common-mistake-examples.tsx","webpack:///../../account/src/Configs/poa-common-mistake-examples-config.tsx","webpack:///../../account/src/Sections/Verification/ProofOfAddress/poa-desktop-layout.tsx","webpack:///../../account/src/Sections/Verification/ProofOfAddress/poa-mobile-layout.tsx","webpack:///../../account/src/Sections/Verification/ProofOfAddress/proof-of-address-form.tsx","webpack:///../../account/src/Components/route-button/index.ts","webpack:///../../account/src/Components/route-button/route-button.tsx","webpack:///../../account/src/Components/poa/status/submitted/index.ts","webpack:///../../account/src/Components/poa/status/submitted/submitted.tsx","webpack:///../../account/src/Components/poa/status/unverified/index.ts","webpack:///../../account/src/Components/poa/status/unverified/unverified.tsx","webpack:///../../account/src/Components/poa/continue-trading-button/continue-trading-button.tsx","webpack:///../../account/src/Components/poi/poi-button/poi-button.tsx","webpack:///../../account/src/Components/poa/status/verified/verified.tsx","webpack:///../../account/src/Components/poa/status/verified/index.ts","webpack:///../../account/src/Sections/Verification/Helpers/verification.js","webpack:///../../account/src/Sections/Verification/ProofOfAddress/proof-of-address-container.tsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/proof-of-identity-utils.ts","webpack:///../../account/src/Components/icon-with-message/index.ts","webpack:///../../account/src/Components/icon-with-message/icon-with-message.tsx","webpack:///../../account/src/Components/demo-message/index.ts","webpack:///../../account/src/Components/demo-message/demo-message.tsx","webpack:///../../account/src/Components/error-component/error-component.tsx","webpack:///../../account/src/Components/error-component/index.ts","webpack:///../../account/src/Components/poi/status/expired/index.js","webpack:///../../account/src/Components/poi/status/expired/expired.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-limited/idv-limited.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-limited/index.ts","webpack:///../../account/src/Components/poa/poa-button/poa-button.tsx","webpack:///../../account/src/Components/poa/poa-button/index.ts","webpack:///../../account/src/Components/poi/idv-status/idv-submit-complete/idv-submit-complete.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-submit-complete/index.js","webpack:///../../account/src/Components/poi/idv-status/idv-verified/idv-verified.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-verified/index.js","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/idv.jsx","webpack:///../../account/src/Components/poi/status/limited/limited.tsx","webpack:///../../account/src/Components/poi/status/limited/index.js","webpack:///../../account/src/Components/poi/status/not-required/index.ts","webpack:///../../account/src/Components/poi/status/not-required/not-required.tsx","webpack:///../../account/src/Components/poi/status/upload-complete/upload-complete.tsx","webpack:///../../account/src/Components/poi/status/upload-complete/index.ts","webpack:///../../account/src/Components/poa/continue-trading-button/index.ts","webpack:///../../account/src/Components/poi/status/verified/verified.tsx","webpack:///../../account/src/Components/poi/status/verified/index.ts","webpack:///../../account/src/Components/icon-message-list/list-item.tsx","webpack:///../../account/src/Components/icon-message-list/index.ts","webpack:///../../account/src/Components/icon-message-list/icon-message-list.tsx","webpack:///../../account/src/Components/poi/status/rejected-reasons/index.ts","webpack:///../../account/src/Components/poi/status/rejected-reasons/rejected-reasons.tsx","webpack:///../../account/src/Components/poi-manual-upload-failed/index.ts","webpack:///../../account/src/Components/poi-manual-upload-failed/poi-manual-upload-failed.tsx","webpack:///../../account/src/Components/file-uploader-container/upload-file.ts","webpack:///../../account/src/Components/poi/missing-personal-details/missing-personal-details.tsx","webpack:///../../account/src/Components/poi/missing-personal-details/index.js","webpack:///../../account/src/Configs/poi-error-config.tsx","webpack:///../../account/src/Components/poi/poi-confirm-with-example-form-container/poi-confirm-with-example-form-container.tsx","webpack:///../../account/src/Components/poi/poi-confirm-with-example-form-container/index.ts","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/onfido-sdk-view.tsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/onfido-sdk-view-container.tsx","webpack:///../../account/src/Components/poi/status/unsupported/constants.ts","webpack:///../../account/src/Components/poi/status/unsupported/card-details/input-field.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/uploader.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/utils.ts","webpack:///../../account/src/Components/poi/status/unsupported/card-details/documents-upload.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/selfie-upload.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/card-details.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/index.ts","webpack:///../../account/src/Components/poi/status/unsupported/detail-component.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-with-arrow.tsx","webpack:///../../account/src/Components/poi/status/unsupported/documents.tsx","webpack:///../../account/src/Components/poi/status/unsupported/unsupported.tsx","webpack:///../../account/src/Components/poi/status/unsupported/index.js","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/onfido.jsx","webpack:///../../account/src/Components/poi/poi-country-selector/poi-country-selector.tsx","webpack:///../../account/src/Components/poi/poi-country-selector/index.ts","webpack:///../../account/src/Components/poi/idv-document-submit/idv-document-submit.tsx","webpack:///../../account/src/Components/poi/idv-document-submit/index.js","webpack:///../../account/src/Components/poi/idv-status/idv-failed/idv-failed.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-failed/index.ts","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/proof-of-identity-submission.jsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/proof-of-identity-container.jsx","webpack:///./App/Containers/VerificationModal/verification-modal-content.tsx","webpack:///./App/Containers/VerificationModal/index.ts","webpack:///./App/Containers/VerificationModal/verification-modal.tsx","webpack:///../../hooks/src/useFileUploader.ts","webpack:///../../hooks/src/useNotificationEvent.ts","webpack:///../../hooks/src/useServiceToken.ts"],"sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { Div100vhContainer, Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TIconMessageContent = {\n    className?: string;\n    full_width?: boolean;\n    icon: React.ReactElement;\n    is_disabled_for_mobile?: boolean;\n    message: React.ReactNode;\n    text?: React.ReactNode;\n};\n\nconst IconMessageContent = ({\n    children,\n    className,\n    full_width,\n    icon,\n    is_disabled_for_mobile = false,\n    message,\n    text,\n}: React.PropsWithChildren<TIconMessageContent>) => {\n    const { isDesktop } = useDevice();\n\n    return (\n        <Div100vhContainer\n            className={clsx('account-management__message-wrapper', {\n                'account-management__message-wrapper-full-width': full_width,\n            })}\n            is_disabled={isDesktop || is_disabled_for_mobile}\n            height_offset='110px'\n        >\n            <div\n                className={clsx('account-management__message-content', {\n                    [`${className}__message-content`]: className,\n                })}\n            >\n                {icon && (\n                    <div\n                        className={clsx('account-management__message-icon', {\n                            [`${className}__message-icon`]: className,\n                        })}\n                    >\n                        {icon}\n                    </div>\n                )}\n                <Text\n                    as='div'\n                    color='general'\n                    weight='bold'\n                    align='center'\n                    className={clsx('account-management__message', {\n                        [`${className}__message`]: className,\n                    })}\n                >\n                    {message}\n                </Text>\n                {text && (\n                    <div className='account-management__text-container'>\n                        <Text\n                            className={clsx({\n                                [`${className}__text`]: className,\n                            })}\n                            as='p'\n                            size='xs'\n                            align='center'\n                        >\n                            {text}\n                        </Text>\n                    </div>\n                )}\n                {children}\n            </div>\n        </Div100vhContainer>\n    );\n};\n\nexport default IconMessageContent;\n","import IconMessageContent from './icon-message-content';\n\nexport default IconMessageContent;\n","import { useCallback, useMemo, useState } from 'react';\nimport { getActiveAuthTokenIDFromLocalStorage, getActiveLoginIDFromLocalStorage } from '@deriv/utils';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useQuery from '../useQuery';\nimport { useAPIContext } from '../APIProvider';\n\n/** A custom hook that authorize the user with the given token. If no token is given,\n * it will use the current token from localStorage.\n */\nconst useAuthorize = () => {\n    const current_token = getActiveAuthTokenIDFromLocalStorage();\n    const invalidate = useInvalidateQuery();\n    const { switchEnvironment, queryClient } = useAPIContext();\n\n    const [currentLoginID, setCurrentLoginID] = useState(getActiveLoginIDFromLocalStorage());\n\n    const { data, ...rest } = useQuery('authorize', {\n        payload: { authorize: current_token || '' },\n        options: {\n            enabled: Boolean(current_token),\n            // for authorise request - we cannot affort any race hazards due to it being randomly triggered\n            // e.g. during the process of swithcing account or smth\n            refetchOnWindowFocus: false,\n            refetchOnReconnect: false,\n        },\n    });\n\n    // Add additional information to the authorize response.\n    const modified_authorize = useMemo(() => ({ ...data?.authorize }), [data?.authorize]);\n\n    const switchAccount = useCallback(\n        (loginid: string) => {\n            const active_loginid = getActiveLoginIDFromLocalStorage();\n            if (active_loginid !== loginid) {\n                sessionStorage.setItem('active_loginid', loginid);\n                localStorage.setItem('active_loginid', loginid);\n                switchEnvironment(active_loginid);\n                // whenever we change the loginid, we need to invalidate all queries\n                // as there might be ongoing queries against previous loginid\n                // and we really do not want data from previous loginid, to be mixed with current loginid\n                queryClient.cancelQueries();\n                setCurrentLoginID(loginid);\n            }\n        },\n        [invalidate, switchEnvironment, currentLoginID]\n    );\n\n    return {\n        /** The authorize response. */\n        data: modified_authorize,\n        /** Function to switch to another account */\n        switchAccount,\n        currentLoginID,\n        ...rest,\n    };\n};\n\nexport default useAuthorize;\n","import { useMemo } from 'react';\n\nimport useQuery from '../useQuery';\n\n/** A custom hook that gets the residence list. */\nconst useResidenceList = () => {\n    const { data, ...residence_list_rest } = useQuery('residence_list');\n\n    /** Modify the residence list data. */\n    const modified_residence_list = useMemo(() => {\n        if (!data || !data.residence_list) return [];\n\n        return data.residence_list.map(residence => ({\n            ...residence,\n        }));\n    }, [data]);\n\n    return {\n        /** The residence list */\n        data: modified_residence_list,\n        ...residence_list_rest,\n    };\n};\n\nexport default useResidenceList;\n","import { useCallback, useMemo } from 'react';\nimport useAuthorize from './useAuthorize';\nimport useQuery from '../useQuery';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useMutation from '../useMutation';\n\ntype TSetSettingsPayload = NonNullable<\n    NonNullable<NonNullable<Parameters<ReturnType<typeof useMutation<'set_settings'>>['mutate']>>[0]>['payload']\n>;\n\n/** A custom hook to get and update the user settings. */\nconst useSettings = () => {\n    const { isSuccess } = useAuthorize();\n    const { data, ...rest } = useQuery('get_settings', { options: { enabled: isSuccess } });\n    const { mutate, ...mutate_rest } = useMutation('set_settings', { onSuccess: () => invalidate('get_settings') });\n    const invalidate = useInvalidateQuery();\n\n    const update = useCallback((payload: TSetSettingsPayload) => mutate({ payload }), [mutate]);\n\n    // Add additional information to the settings response.\n    const modified_settings = useMemo(() => {\n        const citizenship = data?.get_settings?.citizen ?? '';\n        const account = data?.get_settings?.account_opening_reason ?? '';\n        const placeofbirth = data?.get_settings?.place_of_birth ?? '';\n        const taxResidence = data?.get_settings?.tax_residence ?? '';\n        const taxIdentificationnumber = data?.get_settings?.tax_identification_number ?? '';\n\n        return {\n            ...data?.get_settings,\n            has_submitted_personal_details: Boolean(\n                citizenship && account && placeofbirth && taxResidence && taxIdentificationnumber\n            ),\n        };\n    }, [data?.get_settings]);\n\n    return {\n        /** The settings response. */\n        data: modified_settings,\n        /** Function to update user settings */\n        update,\n        /** The mutation related information */\n        mutation: mutate_rest,\n        ...rest,\n    };\n};\n\nexport default useSettings;\n","import { Button, Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport React from 'react';\nimport IconMessageContent from '../../../icon-message-content';\n\ntype TExpired = {\n    onClick: () => void;\n};\n\nexport const Expired = ({ onClick }: TExpired) => (\n    <div className='account-management__container'>\n        <IconMessageContent\n            message={<Localize i18n_default_text='New proof of address is needed' />}\n            text={\n                <Localize\n                    i18n_default_text='Your document for proof of address is expired. <0/>Please submit again.'\n                    components={[<br key={0} />]}\n                />\n            }\n            icon={<Icon icon='IcPoaUpload' size={128} />}\n        >\n            <Button onClick={onClick} has_effect primary>\n                <Text className='dc-btn__text' size='xs' weight='bold' as='p'>\n                    <Localize i18n_default_text='Resubmit' />\n                </Text>\n            </Button>\n        </IconMessageContent>\n    </div>\n);\n","import { Expired as PoaExpired } from './expired';\n\nexport default PoaExpired;\n","import { NotRequired as PoaNotRequired } from './not-required';\n\nexport default PoaNotRequired;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\nexport const NotRequired = () => (\n    <IconMessageContent\n        message={localize('Proof of address verification not required')}\n        text={localize(\n            'Your account does not need address verification at this time. We will inform you if address verification is required in the future.'\n        )}\n        icon={<Icon icon='IcPoaVerified' size={128} />}\n    />\n);\n","import { ReactNode } from 'react';\nimport { Icon } from '@deriv/components';\nimport IconMessageContent from '../icon-message-content';\n\ntype TLoadErrorMessage = {\n    error_message: ReactNode;\n};\n\nconst LoadErrorMessage = ({ error_message }: TLoadErrorMessage) => (\n    <IconMessageContent message={error_message} icon={<Icon icon='IcPoaLock' size={128} />} />\n);\n\nexport default LoadErrorMessage;\n","import LoadErrorMessage from './load-error-message';\n\nexport default LoadErrorMessage;\n","import React from 'react';\nimport { useHistory, useLocation, RouteComponentProps, withRouter } from 'react-router-dom';\nimport { FormikConsumer } from 'formik';\nimport { Button, Icon, Modal } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../icon-message-content';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TLeaveConfirmMessage = {\n    back: () => void;\n    leave: () => void;\n};\ntype TTransitionBlocker = RouteComponentProps & {\n    dirty: boolean;\n    onDirty?: (prop: boolean) => void;\n};\n\nconst LeaveConfirmMessage = ({ back, leave }: TLeaveConfirmMessage) => {\n    const { isMobile } = useDevice();\n\n    return (\n        <IconMessageContent\n            className='leave-confirm'\n            message={localize('Unsaved changes')}\n            text={localize('You have unsaved changes. Are you sure you want to discard changes and leave this page?')}\n            icon={<Icon icon='IcUnsavedChanges' size={isMobile ? 93 : 128} data_testid='dt_unsaved_changes_icon' />}\n            is_disabled_for_mobile={true}\n        >\n            <div className='account-management-flex-wrapper account-management-leave-confirm'>\n                <Button type='button' has_effect onClick={back} text={localize('Cancel')} secondary large={isMobile} />\n                <Button\n                    type='button'\n                    has_effect\n                    onClick={leave}\n                    text={localize('Leave Settings')}\n                    primary\n                    large={isMobile}\n                />\n            </div>\n        </IconMessageContent>\n    );\n};\n/**\n *\\ Blocks routing if Formik form is dirty\n * Has to be a child of <Formik> for FormikConsumer to work\n */\nexport const TransitionBlocker = ({ dirty, onDirty }: TTransitionBlocker) => {\n    const history = useHistory();\n    const location = useLocation();\n    const { isMobile } = useDevice();\n    const [showModal, setShowModal] = React.useState(false);\n    const [nextLocation, setNextLocation] = React.useState(location.pathname);\n    React.useEffect(() => {\n        const unblock = history.block((location: Location) => {\n            if (dirty && !showModal) {\n                if (onDirty) onDirty(false);\n                setNextLocation(location.pathname);\n                setShowModal(true);\n                return false;\n            }\n            return true;\n        });\n        return () => unblock();\n    }, [dirty, showModal, history, onDirty]);\n    const leave = React.useCallback(() => {\n        if (nextLocation) {\n            setShowModal(false);\n            history.push(nextLocation);\n            if (onDirty) {\n                onDirty(false);\n            }\n        }\n    }, [nextLocation, history, onDirty]);\n    const back = () => {\n        setShowModal(false);\n        setNextLocation(location.pathname);\n        if (onDirty) {\n            onDirty(true);\n        }\n    };\n    return (\n        <>\n            {showModal && isMobile ? (\n                <LeaveConfirmMessage back={back} leave={leave} />\n            ) : (\n                <Modal is_open={showModal} small toggleModal={back}>\n                    <Modal.Body>\n                        <LeaveConfirmMessage back={back} leave={leave} />\n                    </Modal.Body>\n                </Modal>\n            )}\n        </>\n    );\n};\n\nexport const TransitionBlockerWithRouter = withRouter(TransitionBlocker);\nconst LeaveConfirm = ({ onDirty }: { onDirty?: (prop: boolean) => void }) => {\n    return (\n        <FormikConsumer>\n            {formik => (\n                <TransitionBlockerWithRouter onDirty={onDirty} dirty={formik.dirty && formik.submitCount === 0} />\n            )}\n        </FormikConsumer>\n    );\n};\nexport default LeaveConfirm;\n","import LeaveConfirm from './leave-confirm';\n\nexport default LeaveConfirm;\n","/**\n * Object containing error code strings returned by the API.\n */\nexport const API_ERROR_CODES = Object.freeze({\n    DUPLICATE_ACCOUNT: 'DuplicateAccount',\n    CLAIMED_DOCUMENT: 'ClaimedDocument',\n    DUPLICATE_DOCUMENT: 'DuplicateUpload',\n});\n","import React from 'react';\nimport clsx from 'clsx';\nimport { FileDropzone, Icon, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport { getSupportedFiles, max_document_size, supported_filetypes } from '@deriv/shared';\nimport { DropzoneOptions } from 'react-dropzone';\nimport { useDevice } from '@deriv-com/ui';\nimport { TFile } from '../../Types';\n\ntype THandleRejectedFiles = DropzoneOptions['onDropRejected'];\n\ntype TFileUploaderProps = {\n    onFileDrop: (files: File[]) => void;\n    onError?: (error_message: string) => void;\n};\n\nconst UploadMessage = () => {\n    const { isDesktop, isMobile } = useDevice();\n\n    return (\n        <React.Fragment>\n            <Icon icon='IcUpload' className='dc-file-dropzone__message-icon' size={30} />\n            <div className='dc-file-dropzone__message-subtitle'>\n                <Text size='xxs' align='center' weight='bold' color='less-prominent'>\n                    {isDesktop ? (\n                        <Localize i18n_default_text='Drag and drop a file or click to browse your files.' />\n                    ) : (\n                        <Localize i18n_default_text='Click here to browse your files.' />\n                    )}\n                </Text>\n                <Text size={isMobile ? 'xxxxs' : 'xxxs'} align='center' color='less-prominent'>\n                    <Localize i18n_default_text='Remember, selfies, pictures of houses, or non-related images will be rejected.' />\n                </Text>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst FileUploader = ({ onFileDrop, onError }: TFileUploaderProps) => {\n    const [document_files, setDocumentFiles] = React.useState<File[]>([]);\n    const [file_error, setFileError] = React.useState<string | null>(null);\n\n    React.useEffect(() => {\n        if (document_files) {\n            onFileDrop(document_files);\n            onError?.('');\n        }\n    }, [document_files, onFileDrop, onError]);\n\n    const handleAcceptedFiles = (files: File[]) => {\n        if (files.length > 0) {\n            setDocumentFiles(files);\n            setFileError(null);\n            onError?.('');\n        }\n    };\n\n    const handleRejectedFiles: THandleRejectedFiles = files => {\n        const is_file_too_large = files.length > 0 && files[0].file.size > max_document_size;\n        const supported_files = files.filter(each_file => getSupportedFiles(each_file.file.name));\n        const error_message =\n            is_file_too_large && supported_files.length > 0\n                ? localize('File size should be 8MB or less')\n                : localize('File uploaded is not supported');\n\n        setDocumentFiles([]);\n        onError?.(error_message);\n        setFileError(error_message);\n    };\n\n    const removeFile = () => {\n        setDocumentFiles([]);\n        setFileError(null);\n        onError?.('');\n    };\n\n    return (\n        <React.Fragment>\n            <FileDropzone\n                accept={supported_filetypes}\n                error_message={localize('Please upload supported file type.')}\n                filename_limit={26}\n                hover_message={localize('Drop files here..')}\n                max_size={max_document_size}\n                message={<UploadMessage />}\n                multiple={false}\n                onDropAccepted={handleAcceptedFiles}\n                onDropRejected={handleRejectedFiles}\n                validation_error_message={file_error}\n                value={document_files as TFile[]}\n            />\n            {((document_files && document_files?.length > 0) || file_error) && (\n                <div className='file-uploader__remove-btn-container'>\n                    <Icon\n                        icon='IcCloseCircle'\n                        className={clsx('file-uploader__remove-btn', {\n                            'file-uploader__remove-btn--error': file_error,\n                        })}\n                        onClick={removeFile}\n                        color='secondary'\n                        data_testid='dt_remove_file_icon'\n                    />\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default FileUploader;\n","import { useQuery } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\nimport { useStore } from '@deriv/stores';\n\ntype TKycAuthStatusPayload = TSocketRequestPayload<'kyc_auth_status'>['payload'];\n\n/** Custom hook that returns Proof of Identity (POI) and Proof of Address (POA) authentication status details. */\nexport const useKycAuthStatus = (payload?: TKycAuthStatusPayload) => {\n    const { client } = useStore();\n\n    const { is_authorize } = client;\n    const { data, ...kyc_auth_status_rest } = useQuery('kyc_auth_status', {\n        payload,\n        options: { enabled: is_authorize },\n    });\n    return {\n        /** The KYC auth status */\n        kyc_auth_status: data?.kyc_auth_status,\n        ...kyc_auth_status_rest,\n    };\n};\n","import React from 'react';\nimport { TFilesDescription, TListItem } from '../Types';\nimport { localize, Localize } from '@deriv-com/translations';\n\nexport const getFileUploaderDescriptions = (page: string, is_eu?: boolean): TFilesDescription => {\n    const proof_of_income_descriptions = {\n        title: <Localize i18n_default_text='The document must be recent and include your name and address:' />,\n        descriptions: [\n            {\n                id: 'signed_document',\n                value: (\n                    <Localize i18n_default_text='The document must be up-to-date and signed by the issuance authority.' />\n                ),\n            },\n            {\n                id: 'contains_letterhead',\n                value: <Localize i18n_default_text='The document must contain a letterhead.' />,\n            },\n            {\n                id: 'invalid_rejected',\n                value: <Localize i18n_default_text='Invalid or incomplete documents shall be rejected.' />,\n            },\n        ],\n    };\n    const proof_of_address_descriptions = {\n        title: (\n            <Localize\n                i18n_default_text='Upload an original (unaltered) document that clearly shows your name and address, issued within the past {{expiry_in_months}} months. We accept:'\n                values={{ expiry_in_months: is_eu ? 6 : 12 }}\n            />\n        ),\n        descriptions: [\n            {\n                id: 'utility_bill',\n                value: (\n                    <Localize\n                        i18n_default_text='<0>Utility bill:</0> Electricity, water, gas, or landline phone bill.'\n                        components={[<strong key={0} />]}\n                    />\n                ),\n            },\n            {\n                id: 'financial_legal_government_document',\n                value: (\n                    <Localize\n                        i18n_default_text='<0>Financial, legal, or government document:</0> Recent bank statement, affidavit, or government-issued letter.'\n                        components={[<strong key={0} />]}\n                    />\n                ),\n            },\n            {\n                id: 'tenancy_agreement',\n                value: (\n                    <Localize\n                        i18n_default_text='<0>Tenancy agreement:</0> Valid and current agreement.'\n                        components={[<strong key={0} />]}\n                    />\n                ),\n            },\n        ],\n    };\n\n    if (page === 'poinc') return proof_of_income_descriptions;\n    if (page === 'poa') return proof_of_address_descriptions;\n    return { title: '', descriptions: [] };\n};\n\nexport const getSupportedProofOfAddressDocuments = (): Required<TListItem>[] => {\n    return [\n        {\n            value: 'utility_bill',\n            text: localize('Utility bill (electricity, water, gas)'),\n        },\n        {\n            value: 'phone_bill',\n            text: localize('Landline phone bill'),\n        },\n        {\n            value: 'bank_statement',\n            text: localize('Bank statement'),\n        },\n        {\n            value: 'affidavit',\n            text: localize('Official residence declaration or affidavit'),\n        },\n        {\n            value: 'official_letter',\n            text: localize('Official letter issued by the government or solicitor'),\n        },\n        {\n            value: 'rental_agreement',\n            text: localize('Rental/tenancy agreement'),\n        },\n        {\n            text: localize('Others'),\n            value: 'poa_others',\n        },\n    ];\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors in this file\nimport React from 'react';\nimport { Autocomplete, Loading, Text } from '@deriv/components';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport FileUploader from './file-uploader';\nimport { useDevice } from '@deriv-com/ui';\nimport { useKycAuthStatus } from '../../hooks';\nimport { getSupportedProofOfAddressDocuments } from '../../Constants/file-uploader';\nimport { TListItem } from 'Types';\nimport { Field, FieldProps } from 'formik';\n\ntype TFileUploaderContainer = {\n    onFileDrop: (files: File[]) => void;\n    country_of_residence?: string;\n    files_description?: React.ReactNode;\n    examples?: React.ReactNode;\n    onError?: (error_message: string) => void;\n    placeholder?: string;\n};\n\nconst FileUploaderContainer = ({\n    examples,\n    files_description,\n    country_of_residence,\n    onFileDrop,\n    onError,\n    placeholder,\n}: TFileUploaderContainer) => {\n    const { isMobile } = useDevice();\n    const { localize } = useTranslations();\n    const { kyc_auth_status, isLoading } = useKycAuthStatus({ country: country_of_residence });\n    const [document_list, setDocumentList] = React.useState<Required<TListItem>[]>([]);\n\n    React.useEffect(() => {\n        if (kyc_auth_status) {\n            const { address } = kyc_auth_status;\n            const { supported_documents } = address;\n            const doc_list = getSupportedProofOfAddressDocuments().filter(doc =>\n                supported_documents?.includes(doc.value)\n            );\n            setDocumentList(doc_list);\n        }\n    }, [kyc_auth_status]);\n\n    if (isLoading) {\n        return <Loading is_fullscreen={false} />;\n    }\n\n    return (\n        <div className='file-uploader__container' data-testid='dt_file_uploader_container'>\n            {files_description}\n            {examples}\n            {country_of_residence && (\n                <React.Fragment>\n                    <Text size={isMobile ? 'xxs' : 'xs'} as='div' className='file-uploader__file-title' weight='bold'>\n                        <Localize i18n_default_text='Select the type of document:' />\n                    </Text>\n                    <Field name='document_type'>\n                        {({ field, form: { setFieldValue } }: FieldProps<string>) => (\n                            <Autocomplete\n                                {...field}\n                                data-lpignore='true'\n                                autoComplete='off'\n                                list_items={document_list}\n                                type='text'\n                                value={field.value}\n                                label={placeholder}\n                                placeholder={placeholder ?? localize('Select a document')}\n                                onItemSelection={(item: TListItem) => {\n                                    setFieldValue('document_type', item.text, true);\n                                }}\n                                required\n                            />\n                        )}\n                    </Field>\n                </React.Fragment>\n            )}\n            <Text size={isMobile ? 'xxs' : 'xs'} as='div' className='file-uploader__file-title' weight='bold'>\n                <Localize i18n_default_text='Upload file' />\n            </Text>\n            <div className='file-uploader__file-dropzone-wrapper'>\n                <FileUploader onError={onError} onFileDrop={onFileDrop} />\n            </div>\n            <div className='file-uploader__file-supported-formats'>\n                <Text size={isMobile ? 'xxxs' : 'xxs'}>\n                    <Localize i18n_default_text='Supported formats: JPEG, JPG, PNG, PDF, and GIF only' />\n                </Text>\n                <Text size={isMobile ? 'xxxs' : 'xxs'}>\n                    <Localize i18n_default_text='Maximum size: 8MB' />\n                </Text>\n            </div>\n        </div>\n    );\n};\n\nexport default FileUploaderContainer;\n","import FileUploaderContainer from './file-uploader-container';\n\nexport default FileUploaderContainer;\n","import { Text } from '@deriv/components';\nimport React from 'react';\nimport { TFilesDescription } from '../../Types';\nimport { useDevice } from '@deriv-com/ui';\n\nconst FilesDescription = ({ descriptions, title }: TFilesDescription) => {\n    const { isMobile } = useDevice();\n\n    return (\n        <div className='files-description'>\n            <Text size={isMobile ? 'xxs' : 'xs'} as='div' className='files-description__title' weight='bold'>\n                {title}\n            </Text>\n            <ul>\n                {descriptions.map(item => (\n                    <li key={item.id}>\n                        <Text size={isMobile ? 'xxs' : 'xs'} line_height={isMobile ? 'l' : 'xl'}>\n                            {item.value}\n                        </Text>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default FilesDescription;\n","import clsx from 'clsx';\nimport React from 'react';\nimport { ThemedScrollbars } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TScrollbarsContainer = {\n    className?: string;\n    scroll_offset?: string;\n    isFullHeight?: boolean;\n};\n\nexport const ScrollbarsContainer = ({\n    children,\n    className,\n    scroll_offset,\n    isFullHeight = false,\n}: React.PropsWithChildren<TScrollbarsContainer>) => {\n    const { isDesktop } = useDevice();\n    const height_unit = isFullHeight ? '100vh' : '100%';\n    return (\n        <ThemedScrollbars\n            is_bypassed={!isDesktop}\n            height={scroll_offset ? `calc(${height_unit} - ${scroll_offset})` : '100%'}\n        >\n            <div className={clsx('account__scrollbars_container', className)} data-testid='dt_scrollbar_container_div'>\n                {children}\n            </div>\n        </ThemedScrollbars>\n    );\n};\n","import { FormBody } from './form-body';\n\nexport default FormBody;\n","// [TODO] - To be removed once CFD is configured to use the new form-body component\nimport React, { PropsWithChildren, Fragment } from 'react';\nimport { ScrollbarsContainer } from '../scrollbars-container/scrollbars-container';\nimport { Div100vhContainer } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport clsx from 'clsx';\n\ntype TFormBody = {\n    scroll_offset?: string;\n    className?: string;\n    isFullHeight?: boolean;\n};\n\nexport const FormBody = ({ children, scroll_offset, className, isFullHeight }: PropsWithChildren<TFormBody>) => {\n    const { isDesktop } = useDevice();\n    return (\n        <Fragment>\n            {isDesktop ? (\n                <ScrollbarsContainer\n                    className={clsx('account__scrollbars_container--grid-layout', className)}\n                    scroll_offset={scroll_offset}\n                    isFullHeight={isFullHeight}\n                >\n                    {children}\n                </ScrollbarsContainer>\n            ) : (\n                <Div100vhContainer\n                    className={clsx('account__scrollbars_container--grid-layout', className)}\n                    height_offset={scroll_offset || '100%'}\n                >\n                    {children}\n                </Div100vhContainer>\n            )}\n        </Fragment>\n    );\n};\n","import React from 'react';\nimport clsx from 'clsx';\n\nexport type TFormFooter = {\n    className?: string;\n};\n\nconst FormFooter = ({ children, className }: React.PropsWithChildren<TFormFooter>) => (\n    <div className={clsx('account-form__footer', className)} data-testid='form-footer-container'>\n        {children}\n    </div>\n);\n\nexport default FormFooter;\n","import FormFooter from './form-footer';\n\nexport default FormFooter;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { Localize } from '@deriv/translations';\nimport { useStore } from '@deriv/stores';\nimport { getExampleImagesConfig } from '../../../Configs/poa-common-mistake-examples-config';\nimport { LegacyLossIcon } from '@deriv/quill-icons';\nimport './common-mistake-examples.scss';\n\ntype TCommonMistakeExamplePartialsProps = {\n    description: JSX.Element;\n    image: React.ReactElement;\n};\n\n/**\n * Wrapper for displaying the image and description of the mistake\n * @name CommonMistakeExamplePartials\n * @param description - description of the mistake\n * @param image - Sample image\n * @returns  React.ReactElement\n */\nconst CommonMistakeExamplePartials = ({ description, image }: TCommonMistakeExamplePartialsProps) => (\n    <div className='common-mistake-examples__content-layout'>\n        {image}\n        <div className='common-mistake-examples__content-description'>\n            <LegacyLossIcon iconSize='xs' />\n            <Text size='xxxs' line_height='s' role='document'>\n                {description}\n            </Text>\n        </div>\n    </div>\n);\n\n/**\n * Displays the image and description of the mistake\n * @returns React.ReactElement\n */\nconst CommonMistakeExamples = () => {\n    const { isDesktop } = useDevice();\n    const { client } = useStore();\n    const { is_eu } = client;\n    const example_images = getExampleImagesConfig(is_eu);\n    return (\n        <React.Fragment>\n            <Text as='div' weight='bold' size={isDesktop ? 'xs' : 'xxs'} className='common-mistake-examples__title'>\n                <Localize i18n_default_text='Common mistakes' />\n            </Text>\n            <div className='common-mistake-examples__content'>\n                {example_images.map(config => (\n                    <CommonMistakeExamplePartials\n                        key={config.ref}\n                        description={config.description}\n                        image={<config.image />}\n                    />\n                ))}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CommonMistakeExamples;\n","import React from 'react';\nimport { Localize } from '@deriv/translations';\nimport {\n    DerivLightIcBlurryDocumentIcon,\n    DerivLightIcCroppedDocumentIcon,\n    DerivLightIcDocumentAddressMismatchIcon,\n    DerivLightIcDocumentNameMismatchIcon,\n    DerivLightIcEnvelopeIcon,\n    DerivLightIcOldIssuedDocumentMoreThan12Icon,\n    DerivLightIcOldIssuedDocumentMoreThan6Icon,\n} from '@deriv/quill-icons';\n\ntype TExampleImageConfig = {\n    image: React.ComponentType<React.SVGAttributes<SVGElement>>;\n    description: JSX.Element;\n    ref: string;\n};\n/**\n * Returns a configuration containing images and descriptions for common POA document upload mistakes\n * @returns Array of objects containing image and description\n */\nexport const getExampleImagesConfig = (is_eu: boolean): Array<TExampleImageConfig> => [\n    {\n        image: DerivLightIcDocumentNameMismatchIcon,\n        description: <Localize i18n_default_text='Name in document doesn’t match your Deriv profile.' />,\n        ref: 'name_mismatch',\n    },\n    {\n        image: DerivLightIcDocumentAddressMismatchIcon,\n        description: <Localize i18n_default_text='Address in document doesn’t match address you entered above.' />,\n        ref: 'address_mismatch',\n    },\n    {\n        ...(is_eu\n            ? {\n                  image: DerivLightIcOldIssuedDocumentMoreThan6Icon,\n                  description: <Localize i18n_default_text='Document issued more than 6-months ago.' />,\n                  ref: 'old_6_month_issued_document',\n              }\n            : {\n                  image: DerivLightIcOldIssuedDocumentMoreThan12Icon,\n                  description: <Localize i18n_default_text='Document issued more than 12-months ago.' />,\n                  ref: 'old_12_month_issued_document',\n              }),\n    },\n    {\n        image: DerivLightIcBlurryDocumentIcon,\n        description: <Localize i18n_default_text='Blurry document. All information must be clear and visible.' />,\n        ref: 'blurry_document',\n    },\n    {\n        image: DerivLightIcCroppedDocumentIcon,\n        description: <Localize i18n_default_text='Cropped document. All information must be clear and visible.' />,\n        ref: 'cropped_document',\n    },\n    {\n        image: DerivLightIcEnvelopeIcon,\n        description: <Localize i18n_default_text='An envelope with your name and address.' />,\n        ref: 'envelope',\n    },\n];\n","// Need to import React since it is used in CFD\nimport React from 'react';\nimport { useDevice } from '@deriv-com/ui';\nimport { ThemedScrollbars, FormSubmitButton, Button, InlineMessage, Modal, Text } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport FileUploaderContainer from '../../../Components/file-uploader-container';\nimport FilesDescription from '../../../Components/file-uploader-container/files-descriptions';\nimport FormBody from '../../../Components/form-body';\nimport FormBodySection from '../../../Components/form-body-section';\nimport FormFooter from '../../../Components/form-footer';\nimport FormSubHeader from '../../../Components/form-sub-header';\nimport CommonMistakeExamples from '../../../Components/poa/common-mistakes/common-mistake-examples';\nimport { Form, useFormikContext } from 'formik';\nimport PersonalDetailsForm from '../../../Components/forms/personal-details-form.jsx';\nimport { getFileUploaderDescriptions } from '../../../Constants/file-uploader';\nimport { TPOAFormState } from '../../../Types';\nimport { useTranslations, Localize } from '@deriv-com/translations';\n\ntype TPOADesktopLayout = {\n    className?: string;\n    setOffset: (status: { msg: string }) => string;\n    is_for_cfd_modal?: boolean;\n    is_resubmit?: boolean;\n    setDocumentFiles: (files: File[]) => void;\n    document_files: File[];\n    form_state: TPOAFormState;\n};\n\nconst POADesktopLayout = observer(\n    ({\n        className,\n        setOffset,\n        is_for_cfd_modal,\n        is_resubmit,\n        setDocumentFiles,\n        document_files,\n        form_state,\n    }: TPOADesktopLayout) => {\n        const { status, handleSubmit, isSubmitting, isValid } = useFormikContext();\n        const { isDesktop } = useDevice();\n        const { client } = useStore();\n        const [file_selection_error, setFileSelectionError] = React.useState<string | null>(null);\n        const { localize } = useTranslations();\n        const { states_list, account_settings, is_eu, getChangeableFields } = client;\n        const changeable_fields = getChangeableFields();\n        const poa_uploader_files_descriptions = React.useMemo(() => getFileUploaderDescriptions('poa', is_eu), []);\n\n        return (\n            <Form noValidate className='account-form account-form_poa' onSubmit={handleSubmit}>\n                <ThemedScrollbars height='572px' is_bypassed={!is_for_cfd_modal || !isDesktop} className={className}>\n                    <FormBody scroll_offset={setOffset(status)} isFullHeight={!isDesktop}>\n                        {(status?.msg || is_resubmit) && (\n                            <InlineMessage\n                                type='error'\n                                message={\n                                    <Text as='p' size='xs'>\n                                        {!status?.msg && is_resubmit && (\n                                            <Localize i18n_default_text='We were unable to verify your address with the details you provided. Please check and resubmit or choose a different document type.' />\n                                        )}\n                                        {status?.msg}\n                                    </Text>\n                                }\n                                id='dt_poa_submit-error'\n                            />\n                        )}\n                        <FormSubHeader title={localize('Enter your address')} title_text_size='s' />\n                        <PersonalDetailsForm\n                            /* eslint-disable @typescript-eslint/ban-ts-comment */\n                            // @ts-nocheck This needs to fixed in PersonalDetailsForm\n                            is_qualified_for_poa\n                            editable_fields={changeable_fields}\n                            states_list={states_list}\n                        />\n                        <FormSubHeader title={localize('Submit your document')} title_text_size='s' />\n                        <FormBodySection>\n                            <FileUploaderContainer\n                                onFileDrop={files => {\n                                    setDocumentFiles(files);\n                                }}\n                                onError={setFileSelectionError}\n                                files_description={\n                                    <FilesDescription\n                                        title={poa_uploader_files_descriptions.title}\n                                        descriptions={poa_uploader_files_descriptions.descriptions}\n                                    />\n                                }\n                                examples={<CommonMistakeExamples />}\n                                country_of_residence={account_settings?.country_code as string}\n                                placeholder={localize('Type of document')}\n                            />\n                        </FormBodySection>\n                    </FormBody>\n                </ThemedScrollbars>\n                {is_for_cfd_modal ? (\n                    <Modal.Footer has_separator>\n                        <FormSubmitButton\n                            is_disabled={\n                                isSubmitting ||\n                                !isValid ||\n                                (document_files && document_files.length < 1) ||\n                                !!file_selection_error\n                            }\n                            label={localize('Continue')}\n                            is_loading={isSubmitting}\n                        />\n                    </Modal.Footer>\n                ) : (\n                    <FormFooter className='account-form__footer-poa'>\n                        <Button\n                            className='account-form__footer-btn'\n                            type='submit'\n                            is_disabled={\n                                isSubmitting ||\n                                !isValid ||\n                                (document_files && document_files.length < 1) ||\n                                !!file_selection_error\n                            }\n                            has_effect\n                            is_loading={form_state.is_btn_loading}\n                            is_submit_success={form_state.is_submit_success}\n                            text={localize('Save and submit')}\n                            primary\n                        />\n                    </FormFooter>\n                )}\n            </Form>\n        );\n    }\n);\n\nexport default POADesktopLayout;\n","import React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport { Text, InlineMessage, Button } from '@deriv/components';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport clsx from 'clsx';\nimport { useFormikContext, Form } from 'formik';\nimport FormBody from '../../../Components/form-body';\nimport PersonalDetailsForm from '../../../Components/forms/personal-details-form.jsx';\nimport { TPOAFormState } from '../../../Types';\nimport FormFooter from '../../../Components/form-footer';\nimport FileUploaderContainer from '../../../Components/file-uploader-container';\nimport FilesDescription from '../../../Components/file-uploader-container/files-descriptions';\nimport CommonMistakeExamples from '../../../Components/poa/common-mistakes/common-mistake-examples';\nimport { getFileUploaderDescriptions } from '../../../Constants/file-uploader';\nimport { LabelPairedArrowLeftMdBoldIcon } from '@deriv/quill-icons';\nimport './poa-mobile-layout.scss';\n\ntype TPOAMobileLayout = {\n    className?: string;\n    setOffset: (status: { msg: string }) => string;\n    is_for_cfd_modal?: boolean;\n    is_resubmit?: boolean;\n    setDocumentFiles: (files: File[]) => void;\n    document_files: File[];\n    form_state: TPOAFormState;\n};\n\ntype TFormInitialValues = Record<\n    'address_line_1' | 'address_line_2' | 'address_city' | 'address_state' | 'address_postcode',\n    string\n> & {\n    document_type?: Record<'text' | 'value', string>;\n};\n\nconst ProgressBar = ({ is_active }: { is_active: boolean }) => (\n    <div className='progress-container'>\n        <div className={clsx('progress-bar', { 'progress-bar--animate': is_active })} />\n    </div>\n);\n\nconst POAMobileLayout = observer(\n    ({ setOffset, is_resubmit, form_state, document_files, setDocumentFiles, is_for_cfd_modal }: TPOAMobileLayout) => {\n        const { localize } = useTranslations();\n        const { status, handleSubmit, isSubmitting, isValid, values, errors } = useFormikContext<TFormInitialValues>();\n        const { client } = useStore();\n        const [file_selection_error, setFileSelectionError] = React.useState<string | null>(null);\n        const [step, setStep] = React.useState({ id: 1, text: localize('Enter your address') });\n\n        const { states_list, account_settings, is_eu, getChangeableFields } = client;\n\n        const changeable_fields = getChangeableFields();\n        const poa_uploader_files_descriptions = React.useMemo(() => getFileUploaderDescriptions('poa', is_eu), [is_eu]);\n\n        const isNextBtnDisabled = React.useMemo(() => {\n            if (step.id === 2) {\n                return false;\n            }\n            return (\n                !values.address_line_1 ||\n                !!errors.address_line_1 ||\n                !!errors.address_line_2 ||\n                !values.address_city ||\n                !!errors.address_city ||\n                !!errors.address_state ||\n                !!errors.address_postcode\n            );\n        }, [values, errors, step.id]);\n\n        return (\n            <div className='poa-mobile-layout'>\n                <div className={clsx('poa-header', { 'poa-header--non-modal': !is_for_cfd_modal })}>\n                    <div className='timeline'>\n                        {step.id === 2 && (\n                            <LabelPairedArrowLeftMdBoldIcon\n                                onClick={() => setStep({ id: 1, text: localize('Enter your address') })}\n                            />\n                        )}\n                        <Text as='p' size='xxs'>\n                            <Localize\n                                i18n_default_text='<0>Step {{step}}/2:&nbsp;</0> {{title}}'\n                                values={{ step: step.id, title: step.text }}\n                                components={[<strong key={0} />]}\n                            />\n                        </Text>\n                    </div>\n                    <div className='timeline-item'>\n                        <ProgressBar is_active={step.id <= 2} />\n                        <ProgressBar is_active={step.id === 2} />\n                    </div>\n                </div>\n                <Form noValidate className='account-form account-form_poa' onSubmit={handleSubmit}>\n                    <FormBody scroll_offset={setOffset(status)}>\n                        {(status?.msg || is_resubmit) && (\n                            <InlineMessage\n                                type='error'\n                                message={\n                                    <Text as='p' size='xxxs'>\n                                        {!status?.msg && is_resubmit && (\n                                            <Localize i18n_default_text='We were unable to verify your address with the details you provided. Please check and resubmit or choose a different document type.' />\n                                        )}\n                                        {status?.msg}\n                                    </Text>\n                                }\n                                className='poa-error-banner'\n                                id='dt_poa_submit-error'\n                            />\n                        )}\n                        {step.id === 1 && (\n                            <React.Fragment>\n                                <PersonalDetailsForm\n                                    /* eslint-disable @typescript-eslint/ban-ts-comment */\n                                    // @ts-nocheck This needs to fixed in PersonalDetailsForm\n                                    is_qualified_for_poa\n                                    editable_fields={changeable_fields}\n                                    states_list={states_list}\n                                />\n                                <FormFooter className='account-form__footer-poa'>\n                                    <Button\n                                        className='account-form__footer-btn'\n                                        type='button'\n                                        has_effect\n                                        text={localize('Next')}\n                                        primary\n                                        is_disabled={isNextBtnDisabled}\n                                        onClick={() =>\n                                            setStep(prev_step => ({\n                                                ...prev_step,\n                                                id: 2,\n                                                text: localize(' Document submission'),\n                                            }))\n                                        }\n                                    />\n                                </FormFooter>\n                            </React.Fragment>\n                        )}\n                        {step.id === 2 && (\n                            <React.Fragment>\n                                <FileUploaderContainer\n                                    onFileDrop={files => {\n                                        setDocumentFiles(files);\n                                    }}\n                                    onError={setFileSelectionError}\n                                    files_description={\n                                        <FilesDescription\n                                            title={poa_uploader_files_descriptions.title}\n                                            descriptions={poa_uploader_files_descriptions.descriptions}\n                                        />\n                                    }\n                                    examples={<CommonMistakeExamples />}\n                                    country_of_residence={account_settings?.country_code as string}\n                                    placeholder={localize('Type of document')}\n                                />\n                                <FormFooter className='account-form__footer-poa'>\n                                    <Button\n                                        className='account-form__footer-btn'\n                                        type='submit'\n                                        has_effect\n                                        text={localize('Submit')}\n                                        primary\n                                        is_disabled={\n                                            isSubmitting ||\n                                            !isValid ||\n                                            (document_files && document_files.length < 1) ||\n                                            !!file_selection_error\n                                        }\n                                        is_loading={form_state.is_btn_loading}\n                                        is_submit_success={form_state.is_submit_success}\n                                    />\n                                </FormFooter>\n                            </React.Fragment>\n                        )}\n                    </FormBody>\n                </Form>\n            </div>\n        );\n    }\n);\n\nexport default POAMobileLayout;\n","import React from 'react';\nimport { Formik, FormikErrors, FormikHelpers, FormikValues } from 'formik';\nimport { useDevice } from '@deriv-com/ui';\nimport { Loading } from '@deriv/components';\nimport { useFileUploader } from '@deriv/hooks';\nimport {\n    validAddress,\n    validPostCode,\n    validLetterSymbol,\n    validAddressState,\n    validLength,\n    getLocation,\n    WS,\n} from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport LoadErrorMessage from '../../../Components/load-error-message';\nimport LeaveConfirm from '../../../Components/leave-confirm';\nimport { isServerError, validate } from '../../../Helpers/utils';\nimport { API_ERROR_CODES } from '../../../Constants/api-error-codes';\nimport { DocumentUploadRequest } from '@deriv/api-types';\nimport POADesktopLayout from './poa-desktop-layout';\nimport { TPOAFormState } from '../../../Types';\nimport { useTranslations } from '@deriv-com/translations';\nimport POAMobileLayout from './poa-mobile-layout';\nimport { getSupportedProofOfAddressDocuments } from '../../../Constants/file-uploader';\n\ntype TProofOfAddressForm = {\n    className: string;\n    is_resubmit: boolean;\n    is_for_cfd_modal: boolean;\n    onCancel: () => void;\n    onSubmit: (needs_poi: boolean, has_submitted_duplicate_poa?: boolean) => void;\n    onSubmitForCFDModal: (values: FormikValues, has_submitted_duplicate_poa?: boolean) => void;\n};\n\ntype TFormInitialValues = Record<\n    'address_line_1' | 'address_line_2' | 'address_city' | 'address_state' | 'address_postcode',\n    string\n> & {\n    document_type?: string;\n};\n\nconst ProofOfAddressForm = observer(\n    ({ is_resubmit, is_for_cfd_modal, onSubmit, onSubmitForCFDModal, className }: Partial<TProofOfAddressForm>) => {\n        const { isMobile, isDesktop } = useDevice();\n        const { client, notifications } = useStore();\n        const { account_settings, fetchResidenceList, fetchStatesList, states_list } = client;\n        const {\n            addNotificationMessageByKey: addNotificationByKey,\n            removeNotificationMessage,\n            removeNotificationByKey,\n        } = notifications;\n        const [document_files, setDocumentFiles] = React.useState<File[]>([]);\n        const [is_loading, setIsLoading] = React.useState(true);\n        const [form_values, setFormValues] = React.useState<TFormInitialValues>({\n            address_line_1: '',\n            address_line_2: '',\n            address_city: '',\n            address_state: '',\n            address_postcode: '',\n        });\n        const [api_initial_load_error, setAPIInitialLoadError] = React.useState(null);\n        const [form_state, setFormState] = React.useState<TPOAFormState>({\n            is_btn_loading: false,\n            is_submit_success: false,\n            should_allow_submit: true,\n            should_show_form: true,\n        });\n\n        const [should_scroll_to_top, setShouldScrollToTop] = React.useState(false);\n\n        const { upload } = useFileUploader();\n        const { localize } = useTranslations();\n\n        React.useEffect(() => {\n            fetchResidenceList?.().then(async () => {\n                Promise.all([fetchStatesList(), WS.wait('get_settings')]).then(() => {\n                    setFormValues({\n                        address_line_1: account_settings.address_line_1 ?? '',\n                        address_line_2: account_settings.address_line_2 ?? '',\n                        address_city: account_settings.address_city ?? '',\n                        address_state: account_settings.address_state ?? '',\n                        address_postcode: account_settings.address_postcode ?? '',\n                    });\n                    setIsLoading(false);\n                });\n            });\n        }, [account_settings, fetchResidenceList, fetchStatesList]);\n\n        React.useEffect(() => {\n            if (should_scroll_to_top) {\n                // Scroll to the top of the page\n                const el = document.querySelector('#dt_poa_submit-error') as HTMLInputElement;\n                const target_element = el?.parentElement ?? el;\n                if (typeof target_element?.scrollIntoView === 'function') {\n                    target_element?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                }\n\n                // Reset the condition\n                setShouldScrollToTop(false);\n            }\n        }, [should_scroll_to_top]);\n\n        const validateFields = (values: TFormInitialValues) => {\n            setFormState({ ...form_state, ...{ should_allow_submit: false } });\n            const errors: FormikErrors<TFormInitialValues> = {};\n            const validateValues = validate(errors, values);\n\n            const required_fields = ['address_line_1', 'address_city'];\n            validateValues(val => val, required_fields, localize('This field is required'));\n\n            const address_line_1_validation_result = validAddress(values.address_line_1, { is_required: true });\n            if (!address_line_1_validation_result.is_ok) {\n                errors.address_line_1 = address_line_1_validation_result.message;\n            }\n            const address_line_2_validation_result = validAddress(values.address_line_2);\n            if (!address_line_2_validation_result.is_ok) {\n                errors.address_line_2 = address_line_2_validation_result.message;\n            }\n\n            const validation_letter_symbol_message = localize(\n                'Only letters, space, hyphen, period, and apostrophe are allowed.'\n            );\n\n            if (values.address_city && !validLetterSymbol(values.address_city)) {\n                errors.address_city = validation_letter_symbol_message;\n            }\n\n            if (values.address_state && !validAddressState(values.address_state) && states_list?.length < 1) {\n                errors.address_state = validation_letter_symbol_message;\n            }\n\n            if (values.address_postcode) {\n                if (!validLength(values.address_postcode, { min: 0, max: 20 })) {\n                    errors.address_postcode = localize(\n                        'Please enter a {{field_name}} under {{max_number}} characters.',\n                        {\n                            field_name: localize('Postal/ZIP code'),\n                            max_number: 20,\n                            interpolation: { escapeValue: false },\n                        }\n                    );\n                } else if (!validPostCode(values.address_postcode)) {\n                    errors.address_postcode = localize('Only letters, numbers, space, and hyphen are allowed.');\n                }\n            }\n\n            if (!values.document_type) {\n                errors.document_type = localize('Document type is required.');\n            }\n\n            return errors;\n        };\n\n        const showForm = (should_show_form: boolean) => {\n            setFormState({ ...form_state, ...{ should_show_form } });\n        };\n\n        const onSubmitValues = async (\n            values: TFormInitialValues,\n            { setStatus, setSubmitting }: FormikHelpers<TFormInitialValues>\n        ) => {\n            setStatus({ msg: '' });\n            setFormState({ ...form_state, ...{ is_btn_loading: true } });\n            const settings_values = { ...values };\n            if (values.address_state && states_list.length) {\n                settings_values.address_state = getLocation(states_list, values.address_state, 'value') || '';\n            }\n            delete settings_values?.document_type;\n\n            const data = await WS.setSettings(settings_values);\n\n            if (data.error) {\n                setStatus({ msg: data.error.message });\n                setFormState({ ...form_state, ...{ is_btn_loading: false } });\n                setSubmitting(false);\n                setShouldScrollToTop(true);\n                return;\n            }\n\n            const get_settings_response = await WS.authorized.storage.getSettings();\n\n            if (get_settings_response.error) {\n                setAPIInitialLoadError(get_settings_response.error.message);\n                setSubmitting(false);\n                return;\n            }\n            const get_settings = get_settings_response.get_settings;\n            const { address_line_1, address_line_2, address_city, address_state, address_postcode } = get_settings;\n\n            setFormValues({\n                address_line_1,\n                address_line_2,\n                address_city,\n                address_state,\n                address_postcode,\n            });\n\n            // upload files\n            try {\n                // This is required as AutoComplate displays only the selected value\n                const selected_doc_type = getSupportedProofOfAddressDocuments().find(\n                    doc => doc.text === values.document_type\n                );\n                const api_response = await upload(document_files, {\n                    document_type: selected_doc_type?.value as DocumentUploadRequest['document_type'],\n                });\n\n                if (api_response?.warning) {\n                    setFormState({ ...form_state, ...{ is_btn_loading: false } });\n\n                    if (api_response.warning === API_ERROR_CODES.DUPLICATE_DOCUMENT) {\n                        if (is_for_cfd_modal) {\n                            onSubmitForCFDModal?.(values, true);\n                        } else {\n                            onSubmit?.(false, true);\n                        }\n                    } else {\n                        setStatus({ msg: api_response?.message });\n                        setShouldScrollToTop(true);\n                    }\n                    return;\n                }\n\n                const get_account_status_response = await WS.authorized.getAccountStatus();\n\n                if (!get_account_status_response || get_account_status_response.error) {\n                    setAPIInitialLoadError(get_account_status_response.error.message);\n                    setSubmitting(false);\n                    return;\n                }\n                const get_account_status = get_account_status_response.get_account_status;\n\n                setFormState({\n                    ...form_state,\n                    ...{ is_submit_success: true, is_btn_loading: false },\n                });\n\n                const { needs_verification } = get_account_status.authentication;\n                const needs_poi = Boolean(needs_verification.length) && needs_verification.includes('identity');\n                onSubmit?.(needs_poi);\n\n                ['authenticate', 'needs_poa', 'poa_expired'].forEach(key => {\n                    removeNotificationMessage({ key });\n                    removeNotificationByKey({ key });\n                });\n\n                if (needs_poi) {\n                    addNotificationByKey('needs_poi');\n                }\n            } catch (error) {\n                if (isServerError(error)) {\n                    setStatus({ msg: error.message });\n                    setSubmitting(false);\n                    setFormState({ ...form_state, ...{ is_btn_loading: false } });\n                    setShouldScrollToTop(true);\n                }\n            }\n            if (is_for_cfd_modal) {\n                onSubmitForCFDModal?.(values);\n            }\n        };\n\n        const { address_line_1, address_line_2, address_city, address_state, address_postcode } = form_values;\n\n        const form_initial_values = {\n            address_line_1,\n            address_line_2,\n            address_city,\n            address_state,\n            address_postcode,\n            document_type: '',\n        };\n\n        if (api_initial_load_error) return <LoadErrorMessage error_message={api_initial_load_error} />;\n        if (is_loading) return <Loading is_fullscreen={false} className='account__initial-loader' />;\n\n        if (form_initial_values.address_state) {\n            const current_value = getLocation(states_list, form_initial_values.address_state, 'text');\n            form_initial_values.address_state =\n                states_list.length && current_value ? current_value : form_initial_values.address_state;\n        } else {\n            form_initial_values.address_state = '';\n        }\n        const setOffset = (status: { msg: string }) => {\n            const mobile_scroll_offset = status?.msg ? '200px' : '166px';\n            return !isDesktop && !is_for_cfd_modal ? mobile_scroll_offset : '94px';\n        };\n\n        return (\n            <Formik\n                initialValues={form_initial_values}\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                onSubmit={onSubmitValues}\n                validate={validateFields}\n                enableReinitialize\n                validateOnMount\n            >\n                {() => (\n                    <React.Fragment>\n                        <LeaveConfirm onDirty={!isDesktop ? showForm : undefined} />\n                        {form_state.should_show_form &&\n                            (isMobile ? (\n                                <POAMobileLayout\n                                    setOffset={setOffset}\n                                    is_for_cfd_modal={is_for_cfd_modal}\n                                    is_resubmit={is_resubmit}\n                                    setDocumentFiles={setDocumentFiles}\n                                    document_files={document_files}\n                                    form_state={form_state}\n                                />\n                            ) : (\n                                <POADesktopLayout\n                                    className={className}\n                                    setOffset={setOffset}\n                                    is_for_cfd_modal={is_for_cfd_modal}\n                                    is_resubmit={is_resubmit}\n                                    setDocumentFiles={setDocumentFiles}\n                                    document_files={document_files}\n                                    form_state={form_state}\n                                />\n                            ))}\n                    </React.Fragment>\n                )}\n            </Formik>\n        );\n    }\n);\n\nexport default ProofOfAddressForm;\n","import { RouteButton } from './route-button';\n\nexport default RouteButton;\n","import clsx from 'clsx';\nimport { ButtonLink, Text } from '@deriv/components';\n\ntype TRouteButtonProps = { route: string; button_label: string; className?: string };\n\n/**\n * Renders a button that redirects to the trading platform\n * @name RouteButton\n * @param route - Route to redirect to\n * @param button_label - Text to be displayed on the button\n * @param className - Styles to be applied to the button\n * @returns React Element\n */\nexport const RouteButton = ({ button_label, className, route }: TRouteButtonProps) => (\n    <ButtonLink className={clsx('account-management__button', className)} to={route}>\n        <Text className='dc-btn__text' as='p' weight='bold' data-testid='route_btn_text'>\n            {button_label}\n        </Text>\n    </ButtonLink>\n);\n","import { Submitted as PoaSubmitted } from './submitted';\n\nexport default PoaSubmitted;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isNavigationFromP2P, isNavigationFromDerivGO, routes } from '@deriv/shared';\nimport IconMessageContent from '../../../icon-message-content';\nimport RouteButton from '../../../route-button';\nimport { TPoaStatusProps } from '../../../../Types';\n\nexport const Submitted = ({ needs_poi, redirect_button }: TPoaStatusProps) => {\n    const message = localize('Review in progress');\n    const is_redirected_from_platform = isNavigationFromP2P() || isNavigationFromDerivGO();\n    if (needs_poi) {\n        return (\n            <div className='account-management__container'>\n                <IconMessageContent message={message} icon={<Icon icon='IcPoaVerified' size={128} />}>\n                    <div className='account-management__text-container'>\n                        <Text align='center' size='xs' as='p'>\n                            {localize(\n                                'Your proof of address is under review. We’ll get back to you in 1–3 working days.'\n                            )}\n                        </Text>\n                        <Text align='center' size='xs' as='p'>\n                            {localize('To start trading, you also need to verify your identity.')}\n                        </Text>\n                    </div>\n                    <RouteButton button_label={localize('Next')} route={routes.proof_of_identity} />\n                </IconMessageContent>\n            </div>\n        );\n    }\n    return (\n        <div className='account-management__container'>\n            <IconMessageContent\n                message={message}\n                text={localize('Your proof of address is under review. We’ll get back to you in 1–3 working days.')}\n                icon={<Icon icon='IcPoaVerified' size={128} />}\n            >\n                {redirect_button ||\n                    (!is_redirected_from_platform && (\n                        <RouteButton button_label={localize(\"Return to Trader's Hub\")} route={routes.traders_hub} />\n                    ))}\n            </IconMessageContent>\n        </div>\n    );\n};\n","import { Unverified as PoaUnverified } from './unverified';\n\nexport default PoaUnverified;\n","import React, { ReactNode } from 'react';\nimport { Button, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\ntype TUnverified = {\n    title?: ReactNode;\n    description?: ReactNode;\n    onClick: () => void;\n    button_text?: ReactNode;\n};\n\nexport const Unverified = ({ title, description, button_text, onClick }: TUnverified) => {\n    return (\n        <IconMessageContent\n            message={title ?? localize('We could not verify your proof of address')}\n            text={description ?? localize('Please check your email for details.')}\n            icon={<Icon icon='IcPoaError' size={128} />}\n        >\n            <Button onClick={onClick} has_effect primary>\n                <Text className='dc-btn__text' size='xs' weight='bold' as='p'>\n                    {button_text ?? localize('Resubmit')}\n                </Text>\n            </Button>\n        </IconMessageContent>\n    );\n};\n","import React from 'react';\nimport clsx from 'clsx';\nimport { ButtonLink, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { routes } from '@deriv/shared/src/utils/routes/routes';\n\ntype TContinueTradingButtonProps = { className?: string };\n\n/**\n * Renders a button that redirects to the trading platform\n * @name ContinueTradingButton\n * @param className - Styles to be applied to the button\n * @returns React Element\n */\nexport const ContinueTradingButton = ({ className }: TContinueTradingButtonProps) => (\n    <ButtonLink className={clsx('account-management__button', className)} to={routes.trade}>\n        <Text className='dc-btn__text' as='p' weight='bold' data-testid='continue_btn_text'>\n            <Localize i18n_default_text='Continue trading' />\n        </Text>\n    </ButtonLink>\n);\n","import { ButtonLink, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport React from 'react';\n\nexport const PoiButton = () => (\n    <ButtonLink className='account-management__button' to='/account/proof-of-identity'>\n        <Text className='dc-btn__text' weight='bold' as='p'>\n            {localize('Proof of identity')}\n        </Text>\n    </ButtonLink>\n);\n","import { Icon } from '@deriv/components';\nimport { isNavigationFromP2P, isNavigationFromDerivGO } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { ContinueTradingButton } from '../../continue-trading-button/continue-trading-button';\nimport IconMessageContent from '../../../icon-message-content';\nimport { PoiButton } from '../../../poi/poi-button/poi-button';\nimport { TPoaStatusProps } from '../../../../Types';\n\nexport const Verified = ({ needs_poi, redirect_button }: TPoaStatusProps) => {\n    const message = localize('Your proof of address is verified');\n    const is_redirected_from_platform = isNavigationFromP2P() || isNavigationFromDerivGO();\n    if (needs_poi) {\n        return (\n            <div className='account-management__container'>\n                <IconMessageContent\n                    message={message}\n                    text={localize('To continue trading, you must also submit a proof of identity.')}\n                    icon={<Icon icon='IcPoaVerified' size={128} />}\n                >\n                    <PoiButton />\n                </IconMessageContent>\n            </div>\n        );\n    }\n    return (\n        <div className='account-management__container'>\n            <IconMessageContent message={message} icon={<Icon icon='IcPoaVerified' size={128} />}>\n                {redirect_button || (!is_redirected_from_platform && <ContinueTradingButton />)}\n            </IconMessageContent>\n        </div>\n    );\n};\n\nexport default Verified;\n","import { Verified as PoaVerified } from './verified';\n\nexport default PoaVerified;\n","export const populateVerificationStatus = account_status => {\n    if (!account_status || !account_status.authentication) return {};\n\n    const { attempts, document, identity, income, needs_verification } = account_status.authentication;\n\n    const identity_status = identity.status;\n    const document_status = document.status;\n    const income_status = income.status;\n\n    const allow_document_upload = account_status.status.some(status => status === 'allow_document_upload');\n    const allow_poi_resubmission = account_status.status.some(status => status === 'allow_poi_resubmission');\n    const allow_poa_resubmission = account_status.status.some(status => status === 'allow_poa_resubmission');\n    const allow_poinc_resubmission = account_status.status.some(status => status === 'allow_poinc_resubmission');\n    const is_age_verified = account_status.status.some(status => status === 'age_verification');\n    const is_fully_authenticated = account_status.status.some(status => status === 'authenticated');\n    const is_idv_disallowed = account_status.status.some(status => status === 'idv_disallowed');\n    const poa_address_mismatch = account_status.status.some(status => status === 'poa_address_mismatch');\n    const poi_expiring_soon = account_status.status.some(status => status === 'poi_expiring_soon');\n    const poa_authenticated_with_idv = account_status.status.some(status => status === 'poa_authenticated_with_idv');\n    const poa_authenticated_with_idv_photo = account_status.status.some(\n        status => status === 'poa_authenticated_with_idv_photo'\n    );\n    const poa_expiring_soon = account_status.status.some(status => status === 'poa_expiring_soon');\n    const poi_acknowledged = ['pending', 'verified'].includes(identity_status);\n    const has_poa = !(document && document.status === 'none');\n    const has_poi = !(identity && identity.status === 'none');\n    const has_poinc = !(income && income.status === 'none');\n    const has_submitted_poa = document_status === 'pending' && !allow_poa_resubmission;\n    const needs_poa =\n        !(has_submitted_poa || document_status === 'verified') ||\n        (needs_verification.length && needs_verification.includes('document'));\n    const needs_poi =\n        !poi_acknowledged || (Boolean(needs_verification.length) && needs_verification.includes('identity'));\n    const needs_poinc = needs_verification.length && needs_verification.includes('income');\n\n    const { idv, onfido, manual } = identity.services;\n    const identity_last_attempt = attempts.latest;\n    const has_attempted_idv = Boolean(attempts.history.length && attempts.history.find(h => h.service === 'idv'));\n\n    return {\n        allow_document_upload,\n        allow_poa_resubmission,\n        allow_poi_resubmission,\n        allow_poinc_resubmission,\n        has_attempted_idv,\n        has_poa,\n        has_poi,\n        has_poinc,\n        has_submitted_poa,\n        identity_last_attempt,\n        identity_status,\n        document_status,\n        income_status,\n        idv,\n        is_age_verified,\n        is_fully_authenticated,\n        is_idv_disallowed,\n        manual,\n        needs_poa,\n        needs_poi,\n        needs_poinc,\n        needs_verification,\n        onfido,\n        poa_address_mismatch,\n        poa_authenticated_with_idv,\n        poa_authenticated_with_idv_photo,\n        poi_expiring_soon,\n        poa_expiring_soon,\n    };\n};\n","import React from 'react';\nimport { AccountStatusResponse, GetAccountStatus } from '@deriv/api-types';\nimport { Button, Loading } from '@deriv/components';\nimport { WS, getPlatformRedirect, platforms, routes, AUTH_STATUS_CODES } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport Expired from '../../../Components/poa/status/expired';\nimport NotRequired from '../../../Components/poa/status/not-required';\nimport ProofOfAddressForm from './proof-of-address-form';\nimport Submitted from '../../../Components/poa/status/submitted';\nimport Unverified from '../../../Components/poa/status/unverified';\nimport Verified from '../../../Components/poa/status/verified';\nimport { populateVerificationStatus } from '../Helpers/verification.js';\n\ntype TProofOfAddressContainer = {\n    onSubmit?: () => void;\n};\n\ntype TAuthenticationStatus = Record<\n    | 'allow_document_upload'\n    | 'allow_poi_resubmission'\n    | 'allow_poa_resubmission'\n    | 'is_age_verified'\n    | 'has_poi'\n    | 'has_submitted_poa'\n    | 'needs_poa'\n    | 'needs_poi'\n    | 'poa_address_mismatch'\n    | 'resubmit_poa'\n    | 'poa_expiring_soon'\n    | 'poa_authenticated_with_idv'\n    | 'poa_authenticated_with_idv_photo'\n    | 'has_submitted_duplicate_poa',\n    boolean\n> & { document_status?: DeepRequired<GetAccountStatus>['authentication']['document']['status'] };\n\nconst ProofOfAddressContainer = observer(({ onSubmit }: TProofOfAddressContainer) => {\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [authentication_status, setAuthenticationStatus] = React.useState<TAuthenticationStatus>({\n        allow_document_upload: false,\n        allow_poi_resubmission: false,\n        allow_poa_resubmission: false,\n        needs_poi: false,\n        needs_poa: false,\n        has_poi: false,\n        resubmit_poa: false,\n        has_submitted_poa: false,\n        document_status: undefined,\n        is_age_verified: false,\n        poa_address_mismatch: false,\n        poa_expiring_soon: false,\n        poa_authenticated_with_idv: false,\n        poa_authenticated_with_idv_photo: false,\n        has_submitted_duplicate_poa: false,\n    });\n\n    const { client, notifications, common, ui } = useStore();\n    const { app_routing_history } = common;\n    const { has_restricted_mt5_account, is_switching } = client;\n    const { is_verification_modal_visible } = ui;\n    const { refreshNotifications } = notifications;\n    const mt5_poa_status = localStorage.getItem('mt5_poa_status');\n\n    React.useEffect(() => {\n        if (!is_switching) {\n            WS.authorized.getAccountStatus().then((response: AccountStatusResponse) => {\n                const { get_account_status } = response;\n                if (get_account_status) {\n                    const {\n                        allow_document_upload,\n                        allow_poa_resubmission,\n                        document_status,\n                        has_submitted_poa,\n                        is_age_verified,\n                        needs_poa,\n                        needs_poi,\n                        poa_address_mismatch,\n                        poa_authenticated_with_idv,\n                        poa_authenticated_with_idv_photo,\n                        poa_expiring_soon,\n                    } = populateVerificationStatus(get_account_status);\n\n                    setAuthenticationStatus(authentication_status => ({\n                        ...authentication_status,\n                        allow_document_upload,\n                        allow_poa_resubmission,\n                        document_status,\n                        has_submitted_poa: has_submitted_poa as boolean,\n                        is_age_verified,\n                        needs_poa,\n                        needs_poi,\n                        poa_address_mismatch,\n                        poa_authenticated_with_idv,\n                        poa_authenticated_with_idv_photo,\n                        poa_expiring_soon,\n                    }));\n                    setIsLoading(false);\n                    refreshNotifications();\n                }\n            });\n        }\n    }, [is_switching, refreshNotifications]);\n    React.useEffect(() => {\n        return () => {\n            localStorage.removeItem('mt5_poa_status');\n        };\n    }, []);\n\n    const handleResubmit = () => {\n        setAuthenticationStatus(authentication_status => ({\n            ...authentication_status,\n            ...{ resubmit_poa: true },\n        }));\n    };\n\n    const handleDuplicatePOASubmission = () => {\n        setAuthenticationStatus(authentication_status => ({\n            ...authentication_status,\n            ...{ resubmit_poa: true, has_submitted_duplicate_poa: false, has_submitted_poa: false },\n        }));\n    };\n\n    const onSubmitDocument = (needs_poi: boolean, has_submitted_duplicate_poa?: boolean) => {\n        setAuthenticationStatus(authentication_status => ({\n            ...authentication_status,\n            ...{\n                has_submitted_poa: true,\n                needs_poi,\n                poa_expiring_soon: false,\n                has_submitted_duplicate_poa: has_submitted_duplicate_poa ?? false,\n            },\n        }));\n        if (is_verification_modal_visible) {\n            onSubmit?.();\n        }\n    };\n\n    const {\n        allow_document_upload,\n        allow_poa_resubmission,\n        document_status,\n        needs_poi,\n        resubmit_poa,\n        has_submitted_poa,\n        poa_address_mismatch,\n        poa_expiring_soon,\n        poa_authenticated_with_idv,\n        poa_authenticated_with_idv_photo,\n        has_submitted_duplicate_poa,\n    } = authentication_status;\n\n    const from_platform = getPlatformRedirect(app_routing_history);\n\n    const should_show_redirect_btn = Object.keys(platforms).includes(from_platform?.ref ?? '');\n\n    const should_allow_resubmit =\n        resubmit_poa ||\n        allow_poa_resubmission ||\n        (has_restricted_mt5_account &&\n            document_status &&\n            ['expired', 'rejected', 'suspected'].includes(document_status)) ||\n        poa_address_mismatch ||\n        poa_expiring_soon ||\n        ((poa_authenticated_with_idv || poa_authenticated_with_idv_photo) &&\n            from_platform?.route === routes.cashier_p2p);\n\n    const redirect_button = should_show_redirect_btn && (\n        <Button\n            primary\n            className='proof-of-identity__redirect'\n            onClick={() => {\n                const url = platforms[from_platform.ref as keyof typeof platforms]?.url;\n                if (url) {\n                    window.location.href = url;\n                    window.sessionStorage.removeItem('config.platform');\n                }\n            }}\n        >\n            <Localize i18n_default_text='Back to {{platform_name}}' values={{ platform_name: from_platform.name }} />\n        </Button>\n    );\n\n    if (is_loading) return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    if (!allow_document_upload) return <NotRequired />;\n    if (has_submitted_duplicate_poa)\n        return (\n            <Unverified\n                title={<Localize i18n_default_text='Proof of address documents upload failed' />}\n                description={\n                    <Localize i18n_default_text='It seems you’ve submitted this document before. Upload a new document.' />\n                }\n                button_text={<Localize i18n_default_text='Try again' />}\n                onClick={handleDuplicatePOASubmission}\n            />\n        );\n    if (has_submitted_poa && !poa_address_mismatch)\n        return <Submitted needs_poi={needs_poi} redirect_button={redirect_button} />;\n    if (should_allow_resubmit) {\n        return <ProofOfAddressForm is_resubmit={!poa_expiring_soon} onSubmit={onSubmitDocument} />;\n    }\n    const getDocumentStatus = (\n        document_status: DeepRequired<GetAccountStatus>['authentication']['document']['status'] | string\n    ) => {\n        switch (document_status) {\n            case AUTH_STATUS_CODES.NONE:\n                return <ProofOfAddressForm onSubmit={onSubmitDocument} />;\n            case AUTH_STATUS_CODES.PENDING:\n                return <Submitted needs_poi={needs_poi} redirect_button={redirect_button} />;\n            case AUTH_STATUS_CODES.VERIFIED:\n                return <Verified needs_poi={needs_poi} redirect_button={redirect_button} />;\n            case AUTH_STATUS_CODES.EXPIRED:\n                return <Expired onClick={handleResubmit} />;\n            case AUTH_STATUS_CODES.REJECTED:\n            case AUTH_STATUS_CODES.SUSPECTED:\n                return <Unverified onClick={handleResubmit} />;\n            default:\n                return null;\n        }\n    };\n    if (mt5_poa_status) return getDocumentStatus(mt5_poa_status);\n    else if (document_status) return getDocumentStatus(document_status);\n    return null;\n});\n\nexport default ProofOfAddressContainer;\n","export const identity_status_codes = {\n    none: 'none',\n    pending: 'pending',\n    rejected: 'rejected',\n    verified: 'verified',\n    expired: 'expired',\n    suspected: 'suspected',\n} as const;\n\nexport const submission_status_code = {\n    selecting: 'selecting',\n    submitting: 'submitting',\n    complete: 'complete',\n} as const;\n\nexport const service_code = {\n    idv: 'idv',\n    onfido: 'onfido',\n    manual: 'manual',\n} as const;\n","import IconWithMessage from './icon-with-message';\nimport './icon-with-message.scss';\n\nexport default IconWithMessage;\n","import React from 'react';\nimport { Icon, Text, Button } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\n\ntype TIconWithMessage = {\n    icon: string;\n    has_button?: boolean;\n    message: string;\n};\n\nconst IconWithMessage = observer(({ has_button, icon, message }: TIconWithMessage) => {\n    const { client, ui } = useStore();\n    const { isDesktop } = useDevice();\n    const { has_any_real_account: has_real_account } = client;\n    const { toggleAccountsDialog, toggleShouldShowRealAccountsList } = ui;\n\n    return (\n        <div className='da-icon-with-message'>\n            <Icon icon={icon} size={128} />\n            <Text\n                className='da-icon-with-message__text'\n                as='p'\n                color='general'\n                size={isDesktop ? 's' : 'xs'}\n                line_height='m'\n                weight='bold'\n            >\n                {message}\n            </Text>\n            {has_button && (\n                <Button\n                    primary\n                    onClick={() => {\n                        toggleShouldShowRealAccountsList(true);\n                        toggleAccountsDialog();\n                    }}\n                    className='account__demo-message-button'\n                    data-testid='icon-with-message-button'\n                >\n                    {has_real_account ? localize('Switch to real account') : localize('Add a real account')}\n                </Button>\n            )}\n        </div>\n    );\n});\n\nexport default IconWithMessage;\n","import DemoMessage from './demo-message';\n\nexport default DemoMessage;\n","import { useTranslations } from '@deriv-com/translations';\nimport IconWithMessage from '../icon-with-message';\n\ntype TDemoMessage = {\n    has_button?: boolean;\n};\n\nconst DemoMessage = ({ has_button }: TDemoMessage) => {\n    const { localize } = useTranslations();\n    return (\n        <IconWithMessage\n            icon='IcPoaLock'\n            message={localize('This feature is not available for demo accounts.')}\n            has_button={has_button}\n        />\n    );\n};\n\nexport default DemoMessage;\n","import { PageError } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\nimport { routes } from '@deriv/shared';\nimport { requestOidcAuthentication } from '@deriv-com/auth-client';\nimport Cookies from 'js-cookie';\nimport { useTMB } from '@deriv/hooks';\nimport { useEffect, useState } from 'react';\n\ntype TErrorComponent = {\n    header: JSX.Element | string;\n    message: JSX.Element | string;\n    code: string;\n    redirect_label: string;\n    redirectOnClick: (() => void) | null;\n    should_show_refresh: boolean;\n};\n\nconst is_deriv_com = /deriv\\.(com)/.test(window.location.hostname) || /localhost:8443/.test(window.location.host);\n\nconst ErrorComponent = ({\n    header,\n    message,\n    code,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}: Partial<TErrorComponent>) => {\n    const { isTmbEnabled } = useTMB();\n    const [isTmbEnabledValue, setIsTmbEnabledValue] = useState(false);\n\n    useEffect(() => {\n        const checkTmbStatus = async () => {\n            const tmbStatus = await isTmbEnabled();\n            setIsTmbEnabledValue(tmbStatus);\n        };\n\n        checkTmbStatus();\n    }, [isTmbEnabled]);\n\n    const refresh_message: JSX.Element | string = should_show_refresh ? (\n        <Localize i18n_default_text='Please refresh this page to continue.' />\n    ) : (\n        ''\n    );\n\n    if (code === 'InvalidToken' && Cookies.get('logged_state') === 'true' && is_deriv_com && !isTmbEnabledValue) {\n        try {\n            requestOidcAuthentication({\n                redirectCallbackUri: `${window.location.origin}/callback`,\n            }).catch((err: string) => {\n                // eslint-disable-next-line no-console\n                console.error(err);\n            });\n        } catch (err) {\n            // eslint-disable-next-line no-console\n            console.error(err);\n        }\n\n        return null;\n    }\n\n    return (\n        <PageError\n            header={header || <Localize i18n_default_text='Oops, something went wrong.' />}\n            messages={\n                message\n                    ? [message, refresh_message]\n                    : [\n                          <Localize\n                              i18n_default_text='Sorry, an error occurred while processing your request.'\n                              key={0}\n                          />,\n                          refresh_message,\n                      ]\n            }\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label ?? <Localize i18n_default_text='Refresh' />]}\n            buttonOnClick={redirectOnClick ?? (() => location.reload())}\n        />\n    );\n};\n\nexport default ErrorComponent;\n","import ErrorComponent from './error-component';\n\nexport default ErrorComponent;\n","import Expired from './expired';\n\nexport default Expired;\n","import React from 'react';\nimport { Button, Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\ntype TExpired = {\n    handleRequireSubmission: () => void;\n    is_from_external?: boolean;\n    redirect_button?: React.ReactElement;\n};\n\nconst Expired = ({ handleRequireSubmission, is_from_external, redirect_button }: TExpired) => {\n    return (\n        <IconMessageContent\n            message={localize('New proof of identity document needed')}\n            icon={<Icon icon='IcPoiUpload' size={128} />}\n        >\n            <Button\n                type='button'\n                className='account-management__continue'\n                onClick={handleRequireSubmission}\n                large\n                text={localize('Upload Document')}\n                primary\n            />\n            {!is_from_external && redirect_button}\n        </IconMessageContent>\n    );\n};\n\nexport default Expired;\n","import React from 'react';\nimport { Button, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { DerivLightExclamationPoiIcon } from '@deriv/quill-icons';\nimport { POIContext } from '@deriv/shared';\nimport { submission_status_code } from '../../../../Sections/Verification/ProofOfIdentity/proof-of-identity-utils';\n\ntype TIdvLimited = {\n    handleRequireSubmission: () => void;\n};\n\nconst IdvLimited = ({ handleRequireSubmission }: TIdvLimited) => {\n    const { setSubmissionStatus } = React.useContext(POIContext);\n\n    return (\n        <div className='proof-of-identity__container'>\n            <DerivLightExclamationPoiIcon className='icon' />\n            <Text className='proof-of-identity__text btm-spacer' align='center' weight='bold'>\n                {localize('ID verification failed')}\n            </Text>\n            <Text className='proof-of-identity__text btm-spacer' align='center' size='xs'>\n                {localize('We were unable to verify your ID with the details you provided. ')}\n                {localize('Please upload your identity document.')}\n            </Text>\n            <Button\n                type='button'\n                className='account-management__continue'\n                onClick={() => {\n                    handleRequireSubmission();\n                    setSubmissionStatus(submission_status_code.selecting);\n                }}\n                large\n                text={localize('Upload identity document')}\n                primary\n            />\n        </div>\n    );\n};\n\nexport default IdvLimited;\n","import IdvLimited from './idv-limited';\n\nexport default IdvLimited;\n","import React from 'react';\nimport { ButtonLink, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport clsx from 'clsx';\n\ntype TPoaButton = {\n    custom_text?: React.ReactNode;\n    class_name?: string;\n};\n\nconst DEFAULT_BTN_TEXT = <Localize i18n_default_text='Submit proof of address' />;\n\nconst PoaButton = ({ custom_text = DEFAULT_BTN_TEXT, class_name }: TPoaButton) => (\n    <ButtonLink className={clsx('account-management__button', class_name)} to={routes.proof_of_address}>\n        <Text className='dc-btn__text' as='p' weight='bold' data-testid='poa_button_text'>\n            {custom_text}\n        </Text>\n    </ButtonLink>\n);\n\nexport default PoaButton;\n","import PoaButton from './poa-button';\n\nexport default PoaButton;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Text } from '@deriv/components';\nimport { TIDVErrorStatus, IDV_ERROR_STATUS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { DerivLightWaitingPoiIcon } from '@deriv/quill-icons';\nimport PoaButton from '../../../poa/poa-button';\n\ntype TIdvSubmitComplete = {\n    is_from_external: boolean;\n    mismatch_status: TIDVErrorStatus;\n    needs_poa: boolean;\n    redirect_button: React.ReactNode;\n};\n\nconst IdvSubmitComplete = observer(\n    ({ is_from_external, mismatch_status, needs_poa, redirect_button }: Partial<TIdvSubmitComplete>) => {\n        const { client } = useStore();\n        const { is_already_attempted } = client;\n\n        const is_mismatch_error =\n            mismatch_status === IDV_ERROR_STATUS.NameDobMismatch.code ||\n            mismatch_status === IDV_ERROR_STATUS.DobMismatch.code ||\n            mismatch_status === IDV_ERROR_STATUS.NameMismatch.code;\n\n        const is_expired_or_failed_error =\n            mismatch_status === IDV_ERROR_STATUS.Expired.code || mismatch_status === IDV_ERROR_STATUS.Failed.code;\n\n        const getHeaderText = () => {\n            if (is_already_attempted) {\n                if (is_mismatch_error) return <Localize i18n_default_text='Your profile is updated' />;\n                if (is_expired_or_failed_error)\n                    return <Localize i18n_default_text='Your document has been submitted' />;\n            }\n            return <Localize i18n_default_text='Review in progress' />;\n        };\n\n        const getDescriptionText = () => {\n            if (is_already_attempted && (is_mismatch_error || is_expired_or_failed_error))\n                return (\n                    <Localize i18n_default_text=\"We'll review your proof of identity again and will give you an update as soon as possible.\" />\n                );\n            return (\n                <Localize i18n_default_text='Your proof of identity is under review. We’ll get back to you within 5 minutes.' />\n            );\n        };\n\n        const poa_button = !is_from_external && <PoaButton custom_text={<Localize i18n_default_text='Next' />} />;\n\n        return (\n            <div className={clsx('proof-of-identity__container', 'proof-of-identity__container--status')}>\n                <DerivLightWaitingPoiIcon className='icon' />\n                <Text className='proof-of-identity__text btm-spacer' align='center' weight='bold'>\n                    {getHeaderText()}\n                </Text>\n                <Text className='proof-of-identity__text text' size='xs' align='center'>\n                    {getDescriptionText()}\n                </Text>\n                {needs_poa ? (\n                    <React.Fragment>\n                        <Text className='text' size='xs' align='center'>\n                            <Localize i18n_default_text='To start trading, you also need to verify your address.' />\n                        </Text>\n                        {poa_button}\n                    </React.Fragment>\n                ) : (\n                    <div className='proof-of-identity__redirection'>{redirect_button}</div>\n                )}\n            </div>\n        );\n    }\n);\n\nexport default React.memo(IdvSubmitComplete);\n","import IdvSubmitComplete from './idv-submit-complete';\n\nexport default IdvSubmitComplete;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { Localize } from '@deriv/translations';\nimport { ContinueTradingButton } from '../../../poa/continue-trading-button/continue-trading-button';\nimport { DerivLightApprovedPoiIcon } from '@deriv/quill-icons';\nimport PoaButton from '../../../poa/poa-button/poa-button';\n\ntype TIdvVerified = {\n    needs_poa: boolean;\n    is_from_external: boolean;\n    redirect_button: React.ReactNode;\n};\n\nconst IdvVerified = ({ needs_poa, is_from_external, redirect_button }: Partial<TIdvVerified>) => {\n    const header_Text = needs_poa ? (\n        <Localize i18n_default_text='Your ID is verified. You will also need to submit proof of your address.' />\n    ) : (\n        <Localize i18n_default_text='ID verification passed' />\n    );\n    const { isDesktop } = useDevice();\n    return (\n        <div\n            className={clsx('proof-of-identity__container', 'proof-of-identity__container--status')}\n            data-testid='poi_idv_verified_container'\n        >\n            <DerivLightApprovedPoiIcon className='icon' />\n            <Text className='proof-of-identity__text btm-spacer' align='center' weight='bold'>\n                {header_Text}\n            </Text>\n            {needs_poa ? (\n                <React.Fragment>\n                    {isDesktop && (\n                        <Text className='text' size='xs' align='center'>\n                            <Localize i18n_default_text=\"Next, we'll need your proof of address.\" />\n                        </Text>\n                    )}\n                    {!is_from_external && (\n                        <PoaButton custom_text={<Localize i18n_default_text='Submit proof of address' />} />\n                    )}\n                </React.Fragment>\n            ) : (\n                redirect_button || <ContinueTradingButton className='continue-trade' />\n            )}\n        </div>\n    );\n};\n\nexport default IdvVerified;\n","import IdvVerified from './idv-verified';\n\nexport default IdvVerified;\n","import React from 'react';\nimport { formatIDVError } from '@deriv/shared';\nimport IdvLimited from '../../../Components/poi/idv-status/idv-limited';\nimport IdvSubmitComplete from '../../../Components/poi/idv-status/idv-submit-complete';\nimport IdvVerified from '../../../Components/poi/idv-status/idv-verified';\nimport { identity_status_codes } from './proof-of-identity-utils';\n\nconst Idv = ({ handleRequireSubmission, idv, is_from_external, needs_poa, redirect_button }) => {\n    const { status, submissions_left, last_rejected } = idv;\n    switch (status) {\n        case identity_status_codes.pending:\n            return (\n                <IdvSubmitComplete\n                    is_from_external={is_from_external}\n                    mismatch_status={formatIDVError(last_rejected, status)}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                />\n            );\n        case identity_status_codes.rejected:\n        case identity_status_codes.suspected:\n        case identity_status_codes.expired:\n            if (Number(submissions_left) < 1) return <IdvLimited handleRequireSubmission={handleRequireSubmission} />;\n            return null;\n        case identity_status_codes.verified:\n            return (\n                <IdvVerified\n                    is_from_external={is_from_external}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                />\n            );\n        default:\n            return null;\n    }\n};\n\nexport default Idv;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\nimport { Chat } from '@deriv/utils';\n\nexport const POILimited = () => (\n    <IconMessageContent\n        message={localize(\"You've reached the limit for uploading your documents.\")}\n        text={\n            <Localize\n                i18n_default_text='Please contact us via <0>live chat</0>.'\n                components={[<span key={0} className='link link--orange' onClick={Chat.open} />]}\n            />\n        }\n        icon={<Icon icon='IcPoiFailed' size={128} />}\n    />\n);\n","import { POILimited } from './limited';\n\nexport default POILimited;\n","import { OnfidoNotRequired } from './not-required';\n\nexport default OnfidoNotRequired;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\nexport const OnfidoNotRequired = () => (\n    <IconMessageContent\n        message={localize('Proof of identity verification not required')}\n        text={localize(\n            'Your account does not need identity verification at this time. We will inform you if identity verification is required in the future.'\n        )}\n        icon={<Icon icon='IcPoiVerified' size={128} />}\n    />\n);\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { useTranslations } from '@deriv-com/translations';\nimport RouteButton from '../../../route-button';\nimport PoaButton from '../../../poa/poa-button';\nimport IconMessageContent from '../../../icon-message-content/icon-message-content';\nimport { TPOIStatus } from 'Types';\n\nexport const UploadComplete = ({\n    needs_poa,\n    redirect_button,\n    is_from_external,\n    is_manual_upload = false,\n}: TPOIStatus) => {\n    const { localize } = useTranslations();\n    const message = localize('Review in progress');\n    const description = is_manual_upload\n        ? localize('Your proof of identity is under review. We’ll get back to you within 1–3 working days.')\n        : localize('Your proof of identity is under review. We’ll get back to you within 5 minutes.');\n\n    if (!needs_poa) {\n        return (\n            <IconMessageContent message={message} text={description} icon={<Icon icon='IcPoiVerified' size={128} />}>\n                {!is_from_external && (\n                    <RouteButton button_label={localize(\"Return to Trader's Hub\")} route={routes.traders_hub} />\n                )}\n            </IconMessageContent>\n        );\n    }\n    return (\n        <IconMessageContent message={message} icon={<Icon icon='IcPoiVerified' size={128} />}>\n            <React.Fragment>\n                <div className='account-management__text-container'>\n                    <Text align='center' size='xs' as='p'>\n                        {description}\n                    </Text>\n                    <Text align='center' size='xs' as='p'>\n                        {localize('To start trading, you also need to verify your address.')}\n                    </Text>\n                </div>\n                <PoaButton custom_text={localize('Next')} />\n            </React.Fragment>\n            {!is_from_external && redirect_button}\n        </IconMessageContent>\n    );\n};\n\nexport default UploadComplete;\n","import { UploadComplete } from './upload-complete';\n\nexport default UploadComplete;\n","import { ContinueTradingButton } from './continue-trading-button';\n\nexport default ContinueTradingButton;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { TPOIStatus } from 'Types';\nimport IconMessageContent from '../../../icon-message-content';\nimport PoaButton from '../../../poa/poa-button';\nimport { service_code } from '../../../../Sections/Verification/ProofOfIdentity/proof-of-identity-utils';\nimport ContinueTradingButton from '../../../poa/continue-trading-button';\n\nexport const Verified = ({ needs_poa, redirect_button, is_from_external, service }: TPOIStatus) => {\n    const message =\n        service === service_code.idv\n            ? localize('ID verification passed')\n            : localize('Your proof of identity is verified');\n\n    if (!needs_poa) {\n        return (\n            <IconMessageContent\n                message={message}\n                icon={<Icon icon='IcPoaVerified' size={128} data_testid='dt_IcPoaVerified' />}\n                className='account-management-dashboard'\n            >\n                {!is_from_external && (redirect_button || <ContinueTradingButton />)}\n            </IconMessageContent>\n        );\n    }\n    return (\n        <IconMessageContent\n            message={message}\n            icon={<Icon icon='IcPoaVerified' size={128} />}\n            className='account-management-dashboard'\n            text={localize('To continue trading, you must also submit a proof of address.')}\n        >\n            {!is_from_external && (\n                <React.Fragment>\n                    <PoaButton />\n                </React.Fragment>\n            )}\n        </IconMessageContent>\n    );\n};\n\nexport default Verified;\n","import { Verified } from './verified';\n\nexport default Verified;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TListItem = {\n    text: React.ReactNode;\n    index?: number;\n};\n\nconst ListItem = ({ text, index }: TListItem) => {\n    const { isDesktop } = useDevice();\n\n    const text_size = isDesktop ? 'xs' : 'xxs';\n    return (\n        <div className='account-management__list-text-container'>\n            {index && (\n                <Text size={text_size} className='account-management__list-text'>\n                    <Localize i18n_default_text='{{index}}.' values={{ index }} />{' '}\n                </Text>\n            )}\n            <Text size={text_size} className='account-management__list-text'>\n                {text}\n            </Text>\n        </div>\n    );\n};\n\nexport default ListItem;\n","import IconMessageList from './icon-message-list';\n\nexport default IconMessageList;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Div100vhContainer, Text, Button, ThemedScrollbars, Icon } from '@deriv/components';\nimport { getOnfidoError } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport ListItem from './list-item';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TIconMessageList = {\n    className?: string;\n    icon: React.ReactElement;\n    message: string;\n    message_list: Array<string>;\n    onContinue: () => void;\n};\n\nconst IconMessageList = ({ className, icon, message, message_list = [], onContinue }: TIconMessageList) => {\n    const { isDesktop, isMobile } = useDevice();\n\n    return (\n        <ThemedScrollbars is_bypassed={isMobile}>\n            <Div100vhContainer\n                className='account-management__message-wrapper'\n                is_disabled={isDesktop}\n                height_offset='110px'\n            >\n                <div\n                    className={clsx('account-management__message-content', {\n                        [`${className}__message-content`]: className,\n                    })}\n                    data-testid='dt_icon_message_list'\n                >\n                    {icon && (\n                        <div\n                            className={clsx('account-management__message-icon', {\n                                [`${className}__message-icon`]: className,\n                            })}\n                        >\n                            {icon}\n                        </div>\n                    )}\n                    <Text\n                        as='div'\n                        weight='bold'\n                        className={clsx('account-management__message', {\n                            [`${className}__message`]: className,\n                        })}\n                        size={isDesktop ? 's' : 'xs'}\n                    >\n                        {message}\n                    </Text>\n\n                    {message_list && (\n                        <div className='account-management__list-container'>\n                            <div className='account-management__list-message'>\n                                <div className='account-management__list-icon'>\n                                    <Icon icon='IcAlertDanger' color='red' />\n                                </div>\n                                <section>\n                                    {message_list.length < 2 ? (\n                                        <ListItem text={getOnfidoError(message_list[0])} />\n                                    ) : (\n                                        message_list.map((text, idx) => (\n                                            <ListItem\n                                                key={text}\n                                                text={getOnfidoError(message_list[idx])}\n                                                index={idx + 1}\n                                            />\n                                        ))\n                                    )}\n                                </section>\n                            </div>\n                        </div>\n                    )}\n                    {onContinue && (\n                        <Button\n                            type='button'\n                            className='account-management__continue'\n                            onClick={onContinue}\n                            large\n                            primary\n                        >\n                            <Localize i18n_default_text='Verify again' />\n                        </Button>\n                    )}\n                </div>\n            </Div100vhContainer>\n        </ThemedScrollbars>\n    );\n};\n\nexport default IconMessageList;\n","import { RejectedReasons } from './rejected-reasons';\n\nexport default RejectedReasons;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageList from '../../../icon-message-list';\n\ntype TIconMessageList = {\n    handleRequireSubmission: () => void;\n    rejected_reasons: string[];\n};\n\nexport const RejectedReasons = ({ handleRequireSubmission, rejected_reasons }: TIconMessageList) => (\n    <IconMessageList\n        message={localize('Your proof of identity submission failed because:')}\n        icon={<Icon icon='IcPoiFailed' size={128} />}\n        message_list={rejected_reasons}\n        onContinue={handleRequireSubmission}\n    />\n);\n","import POIManualUploadFailed from './poi-manual-upload-failed';\n\nexport default POIManualUploadFailed;\n","import React, { ReactNode } from 'react';\nimport { Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport IconMessageContent from '../icon-message-content';\n\ntype TPOIManualUploadFailed = {\n    error: string;\n    message?: ReactNode;\n};\nconst POIManualUploadFailed = ({ children, message, error }: React.PropsWithChildren<TPOIManualUploadFailed>) => (\n    <IconMessageContent\n        message={message ?? <Localize i18n_default_text={'Proof of identity documents upload failed'} />}\n        text={error}\n        icon={<Icon icon='IcPoiFailed' size={128} />}\n        className='account-management-dashboard'\n    >\n        {children}\n    </IconMessageContent>\n);\n\nexport default POIManualUploadFailed;\n","import DocumentUploader from '@binary-com/binary-document-uploader';\nimport { localize } from '@deriv/translations';\nimport { compressImageFiles, readFiles, TSettings } from '@deriv/shared';\nimport { TFile } from 'Types';\n\ntype TProcessedFile = TFile & TSettings & { message: string };\n\nconst fileReadErrorMessage = (filename: string) => {\n    return localize('Unable to read file {{name}}', { name: filename });\n};\n\nconst uploadFile = (file: File, getSocket: () => WebSocket, settings: TSettings) => {\n    return new Promise((resolve, reject) => {\n        if (!file) {\n            reject();\n        }\n\n        // File uploader instance connected to binary_socket\n        const uploader = new DocumentUploader({ connection: getSocket() });\n\n        let is_file_error = false;\n\n        compressImageFiles([file])\n            .then((files_to_process: Blob[]) => {\n                readFiles(files_to_process, fileReadErrorMessage, settings)\n                    .then(processed_files => {\n                        processed_files.forEach(item => {\n                            if (item.message) {\n                                is_file_error = true;\n                                reject(item);\n                            }\n                        });\n                        const total_to_upload = processed_files.length;\n                        if (is_file_error || !total_to_upload) {\n                            return; // don't start submitting files until all front-end validation checks pass\n                        }\n\n                        // send files\n                        uploader.upload(processed_files[0]).then(resolve).catch(reject);\n                    })\n                    /* eslint-disable no-console */\n                    .catch(error => console.error('error: ', error));\n            })\n            /* eslint-disable no-console */\n            .catch(error => console.error('error: ', error));\n    });\n};\n\nexport default uploadFile;\n","import React from 'react';\nimport { ButtonLink, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../icon-message-content';\n\ntype TGoToPersonalDetailsButton = {\n    has_invalid_postal_code?: boolean;\n    anchor?: string;\n    from?: string;\n    text?: string;\n};\n\nconst GoToPersonalDetailsButton = ({ anchor, from, text }: TGoToPersonalDetailsButton) => {\n    const from_string = from ? `?from=${from}` : '';\n    const anchor_string = anchor ? `#${anchor}` : '';\n    return (\n        <ButtonLink to={`/account/personal-details${from_string}${anchor_string}`}>\n            <Text className='dc-btn__text' weight='bold' as='p'>\n                {text ?? localize('Go to personal details')}\n            </Text>\n        </ButtonLink>\n    );\n};\n\nexport const MissingPersonalDetails = ({ has_invalid_postal_code, from }: TGoToPersonalDetailsButton) => {\n    if (has_invalid_postal_code)\n        return (\n            <IconMessageContent\n                message={localize('Your postal code is invalid')}\n                text={localize('Please check and update your postal code before submitting proof of identity.')}\n                icon={<Icon icon='IcAccountMissingDetails' size={128} />}\n            >\n                <GoToPersonalDetailsButton\n                    anchor='address_postcode'\n                    from={from}\n                    text={localize('Update postal code')}\n                />\n            </IconMessageContent>\n        );\n    return (\n        <IconMessageContent\n            message={localize('Your personal details are missing')}\n            text={localize('Please complete your personal details before you verify your identity.')}\n            icon={<Icon icon='IcAccountMissingDetails' size={128} />}\n        >\n            <GoToPersonalDetailsButton from={from} />\n        </IconMessageContent>\n    );\n};\n","import { MissingPersonalDetails } from './missing-personal-details';\n\nexport default MissingPersonalDetails;\n","import React from 'react';\nimport { GetAccountStatus, ResidenceList } from '@deriv/api-types';\nimport { IDV_ERROR_STATUS, getIDVError } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { DerivLightNameDobPoiIcon, DerivLightDobPoiIcon, DerivLightNamePoiIcon } from '@deriv/quill-icons';\nimport { getIDVDocumentType } from '../Helpers/utils';\nimport { Chat } from '@deriv/utils';\n\nconst handleOnClick = () => Chat.open();\n\nexport const GENERIC_ERROR_MESSAGE = (\n    <Localize i18n_default_text='Sorry, an internal error occurred. Hit the above checkbox to try again.' />\n);\n\nexport const DUPLICATE_ACCOUNT_ERROR_MESSAGE = (\n    <Localize\n        i18n_default_text='An account with these details already exists. Please make sure the details you entered are correct as only one real account is allowed per client. If this is a mistake, contact us via <0>live chat</0>.'\n        components={[<span key={0} className='link link--orange' onClick={handleOnClick} onKeyDown={handleOnClick} />]}\n    />\n);\n\nexport const CLAIMED_DOCUMENT_ERROR_MESSAGE = (\n    <Localize\n        i18n_default_text=\"This document number was already submitted for a different account. It seems you have an account with us that doesn't need further verification. Please contact us via <0>live chat</0> if you need help.\"\n        components={[<span key={0} className='link link--orange' onClick={handleOnClick} onKeyDown={handleOnClick} />]}\n    />\n);\n\nexport const generateIDVError = (\n    is_document_upload_required: boolean,\n    latest_status: DeepRequired<GetAccountStatus>['authentication']['attempts']['latest'],\n    chosen_country: ResidenceList[0],\n    mismatch_status: keyof typeof IDV_ERROR_STATUS\n) => {\n    const document_name = is_document_upload_required\n        ? 'identity document'\n        : getIDVDocumentType(latest_status, chosen_country);\n\n    switch (mismatch_status) {\n        case IDV_ERROR_STATUS.NameMismatch.code:\n            return {\n                required_fields: ['first_name', 'last_name'],\n                side_note_image: <DerivLightNamePoiIcon height='195px' width='285px' />,\n                inline_note_text: (\n                    <Localize\n                        i18n_default_text='To avoid delays, enter your <0>name</0> exactly as it appears on your {{document_name}}.'\n                        components={[<strong key={0} />]}\n                        values={{ document_name }}\n                    />\n                ),\n                failure_message: IDV_ERROR_STATUS.NameMismatch.message,\n            };\n        case IDV_ERROR_STATUS.DobMismatch.code:\n            return {\n                required_fields: ['date_of_birth'],\n                side_note_image: <DerivLightDobPoiIcon height='195px' width='285px' />,\n                inline_note_text: (\n                    <Localize\n                        i18n_default_text='To avoid delays, enter your <0>date of birth</0> exactly as it appears on your {{document_name}}.'\n                        components={[<strong key={0} />]}\n                        values={{ document_name }}\n                    />\n                ),\n                failure_message: IDV_ERROR_STATUS.DobMismatch.message,\n            };\n        default:\n            return {\n                required_fields: ['first_name', 'last_name', 'date_of_birth'],\n                side_note_image: <DerivLightNameDobPoiIcon height='195px' width='285px' />,\n                inline_note_text: (\n                    <Localize\n                        i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your {{document_name}}.'\n                        components={[<strong key={0} />]}\n                        values={{ document_name }}\n                    />\n                ),\n                failure_message: getIDVError(mismatch_status),\n            };\n    }\n};\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikHelpers } from 'formik';\nimport { GetSettings } from '@deriv/api-types';\nimport { Checkbox, HintBox, Loading, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    filterObjProperties,\n    isEmptyObject,\n    isMobile,\n    removeEmptyPropertiesFromObject,\n    toMoment,\n    WS,\n} from '@deriv/shared';\nimport { DerivLightNameDobPoiIcon } from '@deriv/quill-icons';\nimport FormBody from '../../form-body';\nimport LoadErrorMessage from '../../load-error-message';\nimport PersonalDetailsForm from '../../forms/personal-details-form.jsx';\nimport { GENERIC_ERROR_MESSAGE, DUPLICATE_ACCOUNT_ERROR_MESSAGE } from '../../../Configs/poi-error-config';\nimport { API_ERROR_CODES } from '../../../Constants/api-error-codes';\nimport { makeSettingsRequest, validate, validateName } from '../../../Helpers/utils';\nimport { TInputFieldValues } from '../../../Types';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TRestState = {\n    api_error: string;\n    show_form: boolean;\n    errors?: boolean;\n    form_initial_values: TInputFieldValues;\n    changeable_fields: string[];\n};\n\ntype TPoiConfirmWithExampleFormContainer = {\n    account_settings: GetSettings;\n    getChangeableFields: () => string[];\n    onFormConfirm?: () => void;\n};\n\nconst PoiConfirmWithExampleFormContainer = ({\n    account_settings,\n    getChangeableFields,\n    onFormConfirm,\n}: TPoiConfirmWithExampleFormContainer) => {\n    const { isDesktop } = useDevice();\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [checked, setChecked] = React.useState(false);\n    const [rest_state, setRestState] = React.useState<TRestState>({\n        show_form: true,\n        form_initial_values: { first_name: '', last_name: '', date_of_birth: '' },\n        changeable_fields: [],\n        api_error: '',\n    });\n\n    const side_note_image = <DerivLightNameDobPoiIcon height='195px' width='285px' />;\n\n    React.useEffect(() => {\n        const initializeFormValues = async () => {\n            try {\n                await WS?.wait('get_settings');\n                const visible_settings = ['first_name', 'last_name', 'date_of_birth'];\n                const form_initial_values = filterObjProperties(account_settings, visible_settings);\n                if (form_initial_values.date_of_birth) {\n                    form_initial_values.date_of_birth = toMoment(form_initial_values.date_of_birth).format(\n                        'YYYY-MM-DD'\n                    );\n                }\n                setRestState({\n                    ...rest_state,\n                    changeable_fields: getChangeableFields(),\n                    form_initial_values,\n                });\n                setIsLoading(false);\n            } catch (e) {\n                // eslint-disable-next-line no-console\n                console.error(e);\n            }\n        };\n\n        initializeFormValues();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [account_settings]);\n\n    const onSubmit = async (\n        values: TInputFieldValues,\n        { setStatus, setSubmitting }: FormikHelpers<TInputFieldValues>\n    ) => {\n        if (checked) return;\n        setStatus({ error_msg: '' });\n        const request = makeSettingsRequest(\n            values,\n            rest_state?.changeable_fields ? [...rest_state.changeable_fields] : []\n        );\n        const data = await WS.setSettings(request);\n\n        if (data?.error) {\n            const response_error =\n                data.error?.code === API_ERROR_CODES.DUPLICATE_ACCOUNT\n                    ? DUPLICATE_ACCOUNT_ERROR_MESSAGE\n                    : GENERIC_ERROR_MESSAGE;\n            setStatus({ error_msg: response_error });\n            setSubmitting(false);\n        } else {\n            const response = await WS.authorized.storage.getSettings();\n            if (response?.error) {\n                setRestState({ ...rest_state, api_error: response.error.message });\n                return;\n            }\n            const { first_name, last_name, date_of_birth } = response?.get_settings ?? {\n                ...rest_state.form_initial_values,\n            };\n            setRestState({ ...rest_state, form_initial_values: { first_name, last_name, date_of_birth } });\n            setChecked(true);\n            setIsLoading(false);\n\n            if (onFormConfirm) {\n                setTimeout(() => {\n                    onFormConfirm();\n                }, 500);\n            }\n        }\n    };\n\n    const validateFields = (values: TInputFieldValues) => {\n        const errors: TInputFieldValues = {};\n        const validateValues = validate(errors, values);\n\n        const required_fields = ['first_name', 'last_name', 'date_of_birth'];\n\n        validateValues(val => val, required_fields, localize('This field is required'));\n\n        if (values.first_name) {\n            errors.first_name = validateName(values.first_name);\n        }\n        if (values.last_name) {\n            errors.last_name = validateName(values.last_name);\n        }\n\n        setRestState({ ...rest_state, errors: !isEmptyObject(removeEmptyPropertiesFromObject(errors)) });\n        return removeEmptyPropertiesFromObject(errors);\n    };\n\n    const {\n        form_initial_values: { ...form_initial_values },\n        api_error,\n    } = rest_state;\n\n    if (api_error) return <LoadErrorMessage error_message={api_error} />;\n\n    if (is_loading) {\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    }\n\n    return (\n        <Formik initialValues={form_initial_values} enableReinitialize onSubmit={onSubmit} validate={validateFields}>\n            {({ errors, handleSubmit, isSubmitting, status }) => (\n                <Form className='account-form__poi-confirm-example' onSubmit={handleSubmit}>\n                    <FormBody>\n                        <PersonalDetailsForm\n                            editable_fields={rest_state.changeable_fields}\n                            is_rendered_for_onfido\n                            side_note={side_note_image}\n                            inline_note_text={\n                                <Localize\n                                    i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your identity document.'\n                                    components={[<strong key={0} />]}\n                                />\n                            }\n                        />\n                        <button\n                            type='submit'\n                            className={clsx('account-form__poi-confirm-example--button', {\n                                'account-form__poi-confirm-example--button__disabled':\n                                    checked || !isEmptyObject(errors),\n                            })}\n                        >\n                            <Checkbox\n                                value={checked}\n                                label={\n                                    <Text size={isDesktop ? 'xs' : 'xxs'}>\n                                        {localize(\n                                            'I confirm that the name and date of birth above match my chosen identity document (see below)'\n                                        )}\n                                    </Text>\n                                }\n                                disabled={isSubmitting}\n                            />\n                        </button>\n                        {status?.error_msg && (\n                            <div className='account-form__poi-confirm-example--status-message'>\n                                <HintBox\n                                    icon='IcAlertDanger'\n                                    message={\n                                        <Text as='p' size='xxxs'>\n                                            {status?.error_msg}\n                                        </Text>\n                                    }\n                                    is_danger\n                                    className='hint-box-layout'\n                                />\n                            </div>\n                        )}\n                    </FormBody>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default PoiConfirmWithExampleFormContainer;\n","import PoiConfirmWithExampleFormContainer from './poi-confirm-with-example-form-container';\n\nexport default PoiConfirmWithExampleFormContainer;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { CSSTransition } from 'react-transition-group';\nimport { HintBox, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\ntype TOnfidoSdkView = {\n    is_onfido_disabled: boolean;\n    is_onfido_container_hidden?: boolean;\n    onfido_element_id?: string;\n    is_confirmed: boolean;\n    data_testid?: string;\n    is_onfido_initialized?: boolean;\n};\n\nconst OnfidoSdkView = ({\n    is_onfido_disabled,\n    is_onfido_container_hidden,\n    onfido_element_id = 'onfido',\n    is_confirmed,\n    data_testid,\n    is_onfido_initialized,\n}: TOnfidoSdkView) => {\n    const [is_status_message_visible, setIsStatusMessageVisible] = React.useState(false);\n    const transition_in_timeout_ref = React.useRef<ReturnType<typeof setTimeout>>();\n    const transition_out_timeout_ref = React.useRef<ReturnType<typeof setTimeout>>();\n\n    React.useEffect(() => {\n        const onConfirm = () => {\n            transition_in_timeout_ref.current = setTimeout(() => {\n                setIsStatusMessageVisible(true);\n            }, 800);\n            transition_out_timeout_ref.current = setTimeout(() => {\n                setIsStatusMessageVisible(false);\n                // the requirement is to hide the message after 5 sec, 4650 here + 350 in CSSTransition to make it smoother\n            }, 4650);\n        };\n\n        if (is_confirmed) {\n            onConfirm();\n        }\n    }, [is_confirmed]);\n\n    React.useEffect(() => {\n        return () => {\n            clearTimeout(transition_in_timeout_ref.current);\n            clearTimeout(transition_out_timeout_ref.current);\n        };\n    }, []);\n\n    return (\n        <div className='onfido-container-view_wrapper'>\n            <div className={clsx({ 'onfido-container__status-message_container': !is_onfido_disabled })}>\n                <CSSTransition\n                    appear={is_status_message_visible}\n                    in={is_status_message_visible}\n                    timeout={{\n                        exit: 350,\n                    }}\n                    classNames={{\n                        exit: 'onfido-container__status-message--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <HintBox\n                        className='onfido-container__status-message'\n                        icon='IcAlertAnnounce'\n                        message={\n                            <Text as='p' size='xxxs'>\n                                <Localize i18n_default_text='Your personal details have been saved successfully.' />\n                            </Text>\n                        }\n                        is_info\n                    />\n                </CSSTransition>\n            </div>\n            <section>\n                {is_onfido_disabled && is_onfido_initialized && (\n                    <div className='onfido-container__info-message'>\n                        <HintBox\n                            icon='IcInfoBlue'\n                            message={\n                                <Text as='p' size='xxxs'>\n                                    <Localize i18n_default_text='Hit the checkbox above to choose your document.' />\n                                </Text>\n                            }\n                            is_info\n                        />\n                    </div>\n                )}\n                <div\n                    data-testid={data_testid}\n                    id={onfido_element_id}\n                    className={clsx({\n                        'onfido-container__disabled': is_onfido_disabled,\n                        'onfido-container__hidden': is_onfido_container_hidden,\n                    })}\n                />\n            </section>\n        </div>\n    );\n};\n\nexport default OnfidoSdkView;\n","import React, { useCallback } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { useSettings } from '@deriv/api';\nimport { ResidenceList } from '@deriv/api-types';\nimport { Loading, ThemedScrollbars } from '@deriv/components';\nimport { useNotificationEvent, useServiceToken } from '@deriv/hooks';\nimport { observer, useStore } from '@deriv/stores';\nimport ErrorMessage from '../../../Components/error-component';\nimport MissingPersonalDetails from '../../../Components/poi/missing-personal-details';\nimport PoiConfirmWithExampleFormContainer from '../../../Components/poi/poi-confirm-with-example-form-container';\nimport OnfidoSdkView from './onfido-sdk-view';\nimport type { SdkError, SdkHandle, SdkResponse, SupportedLanguages } from '../../../Types';\nimport { convertAlpha2toAlpha3, convertAlpha3toAlpha2, getOnfidoSupportedLocaleCode } from '../../../Helpers/utils';\nimport { getOnfidoPhrases } from '../../../Constants/onfido';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TAPIError = {\n    code?: string;\n    message?: string;\n    type?: string;\n};\n\ntype TOnfidoSdkViewContainer = {\n    country_code: string;\n    documents_supported:\n        | string[]\n        | DeepRequired<ResidenceList>[0]['identity']['services']['onfido']['documents_supported'];\n    getChangeableFields: () => string[];\n    handleViewComplete: () => void;\n    height?: number | string;\n    is_default_enabled?: boolean;\n};\n\nconst OnfidoSdkViewContainer = observer(\n    ({\n        country_code,\n        documents_supported,\n        getChangeableFields,\n        handleViewComplete,\n        height,\n        is_default_enabled,\n    }: TOnfidoSdkViewContainer) => {\n        const [api_error, setAPIError] = React.useState<string>();\n        const [missing_personal_details, setMissingPersonalDetails] = React.useState('');\n        const [is_onfido_disabled, setIsOnfidoDisabled] = React.useState(true);\n        const [is_confirmed, setIsConfirmed] = React.useState(false);\n        const [is_onfido_initialized, setIsOnfidoInitialized] = React.useState(false);\n        // used to check that we only initialize and load the onfido script once\n        const [is_onfido_loaded, setIsOnfidoLoaded] = React.useState(false);\n        const { data: account_settings } = useSettings();\n\n        const { send, isSuccess: isNotified } = useNotificationEvent();\n        const { common } = useStore();\n        const { current_language } = common;\n        const { isMobile } = useDevice();\n\n        // IDV country code - Alpha ISO2. Onfido country code - Alpha ISO3\n        const onfido_country_code = convertAlpha2toAlpha3(country_code);\n\n        // Service Token country code - Alpha ISO2\n        const token_country_code = convertAlpha3toAlpha2(country_code);\n\n        const { service_token, isSuccess, isError, error, isLoading } = useServiceToken({\n            service: 'onfido',\n            country: token_country_code,\n        });\n\n        const onfido_init = React.useRef<SdkHandle>();\n\n        // Onfido `document_supported` checks are made for an array of string.\n        // Ensure that `document_supported` passed respects this no the matter source.\n        const onfido_documents = Array.isArray(documents_supported)\n            ? documents_supported\n            : Object.keys(documents_supported).map(d => documents_supported[d].display_name);\n\n        let component_to_load: React.ReactNode;\n\n        const onComplete = React.useCallback(\n            (data: Omit<SdkResponse, 'data'> & { data?: { id?: string } }) => {\n                onfido_init?.current?.tearDown();\n                const document_ids = Object.keys(data).map(key => data[key as keyof SdkResponse]?.id);\n                if (document_ids?.length) {\n                    send({\n                        category: 'authentication',\n                        event: 'poi_documents_uploaded',\n                        args: {\n                            documents: document_ids as Array<string>,\n                        },\n                    });\n                }\n            },\n            [send]\n        );\n\n        const initOnfido = React.useCallback(\n            async (service_token: string) => {\n                if (!service_token) return;\n                try {\n                    onfido_init.current = await window.Onfido.init({\n                        containerId: 'onfido',\n                        language: {\n                            locale: getOnfidoSupportedLocaleCode(current_language) as SupportedLanguages,\n                            phrases: getOnfidoPhrases(),\n                            mobilePhrases: getOnfidoPhrases(),\n                        },\n                        token: service_token,\n                        useModal: false,\n                        useMemoryHistory: true,\n                        onComplete,\n                        steps: [\n                            {\n                                type: 'document',\n                                options: {\n                                    documentTypes: {\n                                        passport: onfido_documents.some(doc => /Passport/g.test(doc)),\n                                        driving_licence: onfido_documents.some(doc => /Driving Licence/g.test(doc))\n                                            ? {\n                                                  country: onfido_country_code,\n                                              }\n                                            : false,\n                                        national_identity_card: onfido_documents.some(doc =>\n                                            /National Identity Card/g.test(doc)\n                                        )\n                                            ? {\n                                                  country: onfido_country_code,\n                                              }\n                                            : false,\n                                    },\n                                    hideCountrySelection: true,\n                                },\n                            },\n                            'face',\n                        ],\n                    });\n                    setIsOnfidoInitialized(true);\n                } catch (err) {\n                    setAPIError((err as SdkError)?.message ?? err);\n                    setIsOnfidoDisabled(true);\n                    onfido_init.current = undefined;\n                } finally {\n                    setIsOnfidoLoaded(true);\n                }\n            },\n            [onComplete, onfido_documents, onfido_country_code, current_language]\n        );\n\n        const loadOnfidoSdkScript = React.useCallback(\n            (token: string) => {\n                document.getElementById('onfido_sdk')?.remove();\n                document.getElementById('onfido_style')?.remove();\n\n                // check if the onfido sdk script has been loaded, and if its still loading the onfido script, don't re-attempt to load the script again\n                const script_node = document.createElement('script');\n                const link_node = document.createElement('link');\n\n                // [TODO] - Need to lock version of onfido sdk - Current version in CDN is 13.8.4\n                script_node.id = 'onfido_sdk';\n                script_node.src = 'https://assets.onfido.com/web-sdk-releases/13.8.4/onfido.min.js';\n                link_node.href = 'https://assets.onfido.com/web-sdk-releases/13.8.4/style.css';\n                link_node.rel = 'stylesheet';\n                link_node.id = 'onfido_style';\n\n                document.body.appendChild(script_node);\n                document.body.appendChild(link_node);\n\n                script_node.addEventListener('load', () => {\n                    initOnfido(token);\n                });\n            },\n            [initOnfido]\n        );\n\n        const handleError = (error: TAPIError) => {\n            switch (error.code) {\n                case 'MissingPersonalDetails':\n                    setMissingPersonalDetails('all');\n                    break;\n                case 'InvalidPostalCode':\n                    setMissingPersonalDetails('postal_code');\n                    break;\n                default:\n                    setAPIError(error.message);\n                    break;\n            }\n        };\n\n        const onConfirm = useCallback(() => {\n            setIsConfirmed(true);\n            setIsOnfidoDisabled(false);\n        }, []);\n\n        React.useEffect(() => {\n            if (isSuccess && service_token?.onfido?.token && !is_onfido_loaded) {\n                loadOnfidoSdkScript(service_token?.onfido?.token);\n            } else if (isError) {\n                handleError(error as TAPIError);\n            }\n        }, [error, isError, isSuccess, is_onfido_loaded, loadOnfidoSdkScript, service_token?.onfido?.token]);\n\n        React.useEffect(() => {\n            /**\n             * Enables onfido sdk\n             * Pass is_default_enabled to enable onfido immediately if personal detail component is not required\n             * so no user prompt will be there so submit the details in i.e. in case of flow for nigerian clients ATM\n             */\n            if (is_default_enabled) {\n                setIsOnfidoDisabled(false);\n            }\n        }, [is_default_enabled]);\n\n        React.useEffect(() => {\n            /**\n             * Handles cleanup operations when document submission is completed\n             */\n            if (isNotified) {\n                handleViewComplete();\n            }\n        }, [handleViewComplete, isNotified]);\n\n        if (isLoading || !is_onfido_loaded) {\n            component_to_load = <Loading is_fullscreen={false} />;\n        } else if (missing_personal_details) {\n            component_to_load = (\n                <MissingPersonalDetails\n                    has_invalid_postal_code={missing_personal_details === 'postal_code'}\n                    from='proof_of_identity'\n                />\n            );\n        } else if (api_error) {\n            // Error message will only display if retry count exceeds 3\n            component_to_load = <ErrorMessage message={api_error} />;\n        }\n\n        return (\n            <ThemedScrollbars is_bypassed={isMobile} height={height}>\n                <div className='onfido-container'>\n                    {component_to_load || (\n                        <CSSTransition\n                            appear={is_onfido_disabled}\n                            in={is_onfido_disabled}\n                            timeout={{\n                                exit: 350,\n                            }}\n                            classNames={{\n                                exit: 'account-form__poi-confirm-example_wrapper--exit',\n                            }}\n                            unmountOnExit\n                        >\n                            <div className='account-form__poi-confirm-example_wrapper account-form__poi-confirm-example_container'>\n                                <PoiConfirmWithExampleFormContainer\n                                    account_settings={account_settings}\n                                    getChangeableFields={getChangeableFields}\n                                    onFormConfirm={onConfirm}\n                                />\n                            </div>\n                        </CSSTransition>\n                    )}\n                    <OnfidoSdkView\n                        is_onfido_disabled={is_onfido_disabled}\n                        is_confirmed={is_confirmed}\n                        is_onfido_container_hidden={!!component_to_load}\n                        is_onfido_initialized={is_onfido_initialized}\n                    />\n                </div>\n            </ThemedScrollbars>\n        );\n    }\n);\n\nOnfidoSdkViewContainer.displayName = 'OnfidoSdkViewContainer';\n\nexport default OnfidoSdkViewContainer;\n","import { localize } from '@deriv/translations';\nimport { FormikValues } from 'formik';\n\nexport const ROOT_CLASS = 'manual-poi-details';\n\nexport const DOCUMENT_TYPES = {\n    NATIONAL_IDENTITY_CARD: 'national_identity_card',\n    NIMC_SLIP: 'nimc_slip',\n    PASSPORT: 'passport',\n    DRIVING_LICENCE: 'driving_licence',\n    BIRTH_CERTIFICATE: 'birth_certificate',\n    SELFIE_WITH_ID: 'selfie_with_id',\n    OTHER: 'other',\n};\n\nconst PAGE_TYPE = {\n    FRONT: 'front',\n    BACK: 'back',\n    PHOTO: 'photo',\n};\n\nexport const SELFIE_DOCUMENT = {\n    document_type: DOCUMENT_TYPES.SELFIE_WITH_ID,\n    pageType: PAGE_TYPE.PHOTO,\n    name: 'selfie_with_id',\n    icon: 'IcSelfie',\n    info: localize('Upload your selfie.'),\n};\n\nexport const date_field = {\n    name: 'expiry_date',\n    label: localize('Expiry date'),\n    type: 'date',\n    required: true,\n};\n\nexport const getDocumentIndex = ({ country_code }: FormikValues) => [\n    {\n        onfido_name: 'Passport',\n        card: {\n            title: localize('Passport'),\n            description: localize('Upload the page that contains your photo.'),\n            icon: 'IcPoiPassport',\n        },\n        details: {\n            fields: [\n                {\n                    name: 'document_id',\n                    label: localize('Passport number'),\n                    type: 'text',\n                    required: true,\n                },\n                { ...date_field },\n            ],\n            documents_title: localize('Next, upload the page of your passport that contains your photo.'),\n            documents: [\n                {\n                    document_type: DOCUMENT_TYPES.PASSPORT,\n                    pageType: PAGE_TYPE.FRONT,\n                    name: 'passport',\n                    icon: 'IcPassport',\n                    info: localize('Upload the page of your passport that contains your photo.'),\n                },\n            ],\n        },\n    },\n    {\n        onfido_name: 'Driving Licence',\n        card: {\n            title: localize('Driving licence'),\n            description: localize('Upload the front and back of your driving licence.'),\n            icon: 'IcPoiDrivingLicence',\n        },\n        details: {\n            fields_title: localize('First, enter your driving licence number and the expiry date.'),\n            fields: [\n                {\n                    name: 'document_id',\n                    label: localize('Driving licence number'),\n                    type: 'text',\n                    required: true,\n                },\n                { ...date_field },\n            ],\n            documents_title: localize('Next, upload the front and back of your driving licence.'),\n            documents: [\n                {\n                    document_type: DOCUMENT_TYPES.DRIVING_LICENCE,\n                    pageType: PAGE_TYPE.FRONT,\n                    name: 'driving_licence_front',\n                    icon: 'IcDrivingLicenceFront',\n                    info: localize('Upload the front of your driving licence.'),\n                },\n                {\n                    document_type: DOCUMENT_TYPES.DRIVING_LICENCE,\n                    pageType: PAGE_TYPE.BACK,\n                    name: 'driving_licence_back',\n                    icon: 'IcIdCardBack',\n                    info: localize('Upload the back of your driving licence.'),\n                },\n            ],\n        },\n    },\n    {\n        onfido_name: 'National Identity Card',\n        card: {\n            title: localize('Identity card'),\n            description: localize('Upload the front and back of your identity card.'),\n            icon: 'IcPoiIdentityCard',\n        },\n        details: {\n            fields_title: localize('First, enter your identity card number and the expiry date.'),\n            fields: [\n                {\n                    name: 'document_id',\n                    label: localize('Identity card number'),\n                    type: 'text',\n                    required: true,\n                },\n                { ...date_field },\n            ],\n            documents_title: localize('Next, upload the front and back of your identity card.'),\n            documents: [\n                {\n                    document_type: DOCUMENT_TYPES.NATIONAL_IDENTITY_CARD,\n                    pageType: PAGE_TYPE.FRONT,\n                    name: 'identity_card_front',\n                    icon: 'IcIdCardFront',\n                    info: localize('Upload the front of your identity card.'),\n                },\n                {\n                    document_type: DOCUMENT_TYPES.NATIONAL_IDENTITY_CARD,\n                    pageType: PAGE_TYPE.BACK,\n                    name: 'identity_card_back',\n                    icon: 'IcIdCardBack',\n                    info: localize('Upload the back of your identity card.'),\n                },\n            ],\n        },\n    },\n    ...(country_code === 'ng'\n        ? [\n              {\n                  card: {\n                      title: localize('NIMC slip and proof of age'),\n                      description: localize('Upload both of these documents to prove your identity.'),\n                      icon: 'IcPoiNimcSlip',\n                  },\n                  details: {\n                      fields: [\n                          {\n                              name: 'document_id',\n                              label: localize('NIMC slip number'),\n                              type: 'text',\n                              required: true,\n                          },\n                      ],\n                      documents_title: localize('Next, upload both of the following documents.'),\n                      documents: [\n                          {\n                              document_type: DOCUMENT_TYPES.NIMC_SLIP,\n                              lifetime_valid: true,\n                              pageType: PAGE_TYPE.FRONT,\n                              name: 'nimc_slip',\n                              icon: 'IcPoiNimcSlipHorizontal',\n                              info: localize('Upload your NIMC slip.'),\n                          },\n                          {\n                              document_type: DOCUMENT_TYPES.BIRTH_CERTIFICATE,\n                              pageType: PAGE_TYPE.PHOTO,\n                              name: 'birth_certificate_front',\n                              icon: 'IcDop',\n                              info: localize(\n                                  'Upload your proof of age: birth certificate or age declaration document.'\n                              ),\n                          },\n                      ],\n                  },\n              },\n          ]\n        : []),\n];\n","import React from 'react';\nimport { Field, FormikValues } from 'formik';\nimport { DatePicker, Input } from '@deriv/components';\nimport { toMoment } from '@deriv/shared';\nimport { ROOT_CLASS } from '../constants';\n\nconst InputField = ({ data }: FormikValues) => {\n    const min_date = toMoment().add(6, 'months').format('YYYY-MM-DD');\n    switch (data.type) {\n        case 'text':\n            return (\n                <Field name={data.name}>\n                    {({ field, form: { errors, touched } }: FormikValues) => (\n                        <Input\n                            {...field}\n                            className={`${ROOT_CLASS}__field`}\n                            type='text'\n                            label={`${data.label}${data.required ? '*' : ''}`}\n                            error={touched[field.name] && errors[field.name]}\n                        />\n                    )}\n                </Field>\n            );\n        case 'date':\n            return (\n                <Field name={data.name}>\n                    {({ field, form: { errors, touched } }: FormikValues) => (\n                        <DatePicker\n                            {...field}\n                            className={`${ROOT_CLASS}__field`}\n                            date_format='YYYY-MM-DD'\n                            display_format='DD-MM-YYYY'\n                            start_date={min_date}\n                            min_date={min_date}\n                            name={data.name}\n                            label={`${data.label}${data.required ? '*' : ''}`}\n                            error={touched[field.name] && errors[field.name]}\n                            readOnly\n                        />\n                    )}\n                </Field>\n            );\n        default:\n            return null;\n    }\n};\n\nexport default InputField;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Field, FieldProps, FormikProps, FormikValues } from 'formik';\nimport { localize } from '@deriv/translations';\nimport { supported_filetypes, max_document_size } from '@deriv/shared';\nimport { Button, Icon, Text, FileDropzone } from '@deriv/components';\nimport { ROOT_CLASS } from '../constants';\nimport { useDevice } from '@deriv-com/ui';\n\nconst DROPZONE_ERRORS = {\n    'file-too-large': localize('File size should be 8MB or less'),\n    'file-invalid-type': localize('File uploaded is not supported'),\n    'too-many-files': localize('Please select one file only'),\n    GENERAL: localize('Sorry, an error occured. Please select another file.'),\n};\ntype TDROPZONE_ERRORS = Readonly<typeof DROPZONE_ERRORS>;\n\ntype TUploader = {\n    data: FormikValues;\n    value: FormikValues;\n    is_full?: boolean;\n    has_frame?: boolean;\n    onChange?: (e: unknown) => void;\n    setFieldValue: FormikProps<FormikValues>['setFieldValue'];\n    handleChange: (file: object | null, setFieldValue: FormikProps<FormikValues>['setFieldValue']) => void;\n};\n\ntype TMessage = {\n    data?: FormikValues;\n    open?: () => void;\n};\n\ntype THandleRejectFiles = Array<{\n    file: File;\n    errors: [\n        {\n            message: string;\n            code: string;\n        }\n    ];\n}>;\n\nconst Message = ({ data, open }: TMessage) => {\n    const { isDesktop } = useDevice();\n    return (\n        <div className={`${ROOT_CLASS}__uploader-details`}>\n            <Icon className={`${ROOT_CLASS}__uploader-icon`} icon={data?.icon} size={236} />\n            <Text as='p' size='xs' color='general' align='center'>\n                {data?.info}\n            </Text>\n            <Button\n                medium\n                secondary\n                text={isDesktop ? localize('Drop file or click here to upload') : localize('Tap here to upload')}\n                onClick={open}\n            />\n        </div>\n    );\n};\n\nconst Preview = ({ data, setFieldValue, value, has_frame, handleChange }: Omit<TUploader, 'is_full' | 'onChange'>) => {\n    const [background_url, setBackgroundUrl] = React.useState('');\n\n    React.useEffect(() => {\n        setBackgroundUrl(value?.file ? URL.createObjectURL(value?.file) : '');\n    }, [value]);\n\n    return (\n        <div className={`${ROOT_CLASS}__uploader-details ${ROOT_CLASS}__uploader-details--preview`}>\n            <div\n                className={clsx(`${ROOT_CLASS}__uploader-image`, {\n                    [`${ROOT_CLASS}__uploader-image--has-frame`]: has_frame,\n                })}\n                style={{ backgroundImage: `url(${background_url})` }}\n            >\n                {has_frame && <Icon icon='IcPoiFrame' className={`${ROOT_CLASS}__uploader-frame`} />}\n                {(!background_url || value?.file.type.indexOf('pdf') !== -1) && (\n                    <React.Fragment>\n                        <Icon icon='IcCloudUpload' size={50} />\n                        <Text as='p' size='xs' color='general' align='center'>\n                            {value?.file.name}\n                        </Text>\n                    </React.Fragment>\n                )}\n                <Icon\n                    icon='IcCloseCircle'\n                    className={`${ROOT_CLASS}__uploader-remove`}\n                    onClick={() => {\n                        handleChange?.(null, setFieldValue);\n                    }}\n                    size={16}\n                />\n            </div>\n            <Text as='p' size='xs' color='general' align='center'>\n                {data?.info}\n            </Text>\n        </div>\n    );\n};\n\nconst Uploader = ({ data, value, is_full, onChange, has_frame }: Omit<TUploader, 'setFieldValue' | 'handleChange'>) => {\n    const { isDesktop } = useDevice();\n    const [image, setImage] = React.useState<FormikValues>();\n\n    React.useEffect(() => {\n        setImage(value);\n    }, [value]);\n\n    const handleChange = (file: object | null, setFieldValue: FormikProps<FormikValues>['setFieldValue']) => {\n        onChange?.(file);\n        setFieldValue?.(data?.name, file);\n    };\n\n    const handleAccept = (files: object[], setFieldValue: FormikProps<FormikValues>['setFieldValue']) => {\n        const file = { file: files[0], errors: [], ...data };\n        handleChange(file, setFieldValue);\n    };\n\n    const handleReject = (files: THandleRejectFiles, setFieldValue: FormikProps<FormikValues>['setFieldValue']) => {\n        const errors = files[0].errors?.map((error: { code: string }) =>\n            DROPZONE_ERRORS[error.code as keyof TDROPZONE_ERRORS]\n                ? DROPZONE_ERRORS[error.code as keyof TDROPZONE_ERRORS]\n                : DROPZONE_ERRORS.GENERAL\n        );\n        const file = { ...files[0], errors, ...data };\n        handleChange(file, setFieldValue);\n    };\n\n    const ValidationErrorMessage: React.ComponentProps<typeof FileDropzone>['validation_error_message'] = open => (\n        <div className={`${ROOT_CLASS}__uploader-details`}>\n            {image?.errors?.map((error: string, index: number) => (\n                <Text key={index} as='p' size='xs' color='secondary' align='center'>\n                    {error}\n                </Text>\n            ))}\n            <Button\n                medium\n                secondary\n                text={isDesktop ? localize('Drop file or click here to upload') : localize('Tap here to upload')}\n                onClick={open}\n            />\n        </div>\n    );\n\n    return (\n        <Field name={data?.name}>\n            {({ form: { setFieldValue } }: FieldProps) => (\n                <div\n                    className={clsx(`${ROOT_CLASS}__uploader`, {\n                        [`${ROOT_CLASS}__uploader--full`]: is_full,\n                    })}\n                >\n                    <FileDropzone\n                        accept={supported_filetypes}\n                        error_message={localize('Please upload supported file type.')}\n                        filename_limit={32}\n                        hover_message={localize('Drop files here..')}\n                        max_size={max_document_size}\n                        message={(open?: () => void) => <Message open={open} data={data} />}\n                        preview_single={\n                            image && (\n                                <Preview\n                                    data={data}\n                                    value={image}\n                                    has_frame={has_frame}\n                                    setFieldValue={setFieldValue}\n                                    handleChange={handleChange}\n                                />\n                            )\n                        }\n                        multiple={false}\n                        onDropAccepted={(files: object[]) => handleAccept(files, setFieldValue)}\n                        onDropRejected={(files: THandleRejectFiles) => handleReject(files, setFieldValue)}\n                        validation_error_message={value?.errors?.length ? ValidationErrorMessage : undefined}\n                        noClick\n                        value={(image ? [image] : []) as unknown as React.ComponentProps<typeof FileDropzone>['value']}\n                    />\n                </div>\n            )}\n        </Field>\n    );\n};\n\nexport default Uploader;\n","import { localize } from '@deriv/translations';\nimport { FormikErrors, FormikValues } from 'formik';\n\nexport const setInitialValues = (fields: FormikValues) => {\n    const values: FormikValues = {};\n    fields.forEach((field: FormikValues) => {\n        values[field.name] = '';\n    });\n    return values;\n};\n\nexport const checkIsEmpty = (value: unknown) => {\n    return typeof value === 'string' ? !value.trim() : !value;\n};\n\ntype TFields = {\n    name: string;\n    label: string;\n    type: string;\n    required: boolean;\n}[];\n\ntype TDocument = {\n    document_type: string;\n    pageType: string;\n    name: string;\n    icon: string;\n    info: string;\n}[];\n\nexport const validateFields = (values: FormikValues, fields: TFields = [], documents: TDocument = []) => {\n    const errors: FormikErrors<FormikValues> = {};\n\n    fields.forEach((field: { name: string; label: string; type: string; required: boolean }) => {\n        const { name, label, type } = field;\n        const value = values[name];\n\n        if (field.required && checkIsEmpty(value)) {\n            errors[name] = localize('{{label}} is required.', {\n                label,\n            });\n        } else if (type === 'text' && value.length > 30) {\n            errors[name] = localize('{{label}} must be less than 30 characters.', {\n                label,\n            });\n        } else if (type === 'text' && !/^[\\w\\s-]{0,30}$/g.test(value)) {\n            errors[name] = localize('Only letters, numbers, space, underscore, and hyphen are allowed for {{label}}.', {\n                label,\n            });\n        }\n    });\n\n    documents.forEach((document: { name: string }) => {\n        const { name } = document;\n        const value = values[name];\n\n        if (checkIsEmpty(value)) {\n            errors[name] = localize('{{name}} is required.', {\n                name,\n            });\n        } else if (value.errors?.length) {\n            errors[name] = value.errors[0];\n        }\n    });\n\n    return errors;\n};\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Formik, Form, FormikValues } from 'formik';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport { Button, Icon, Text } from '@deriv/components';\nimport InputField from './input-field';\nimport Uploader from './uploader';\nimport { setInitialValues, validateFields } from './utils';\nimport { ROOT_CLASS, date_field, getDocumentIndex } from '../constants';\nimport FormFooter from '../../../../form-footer';\nimport FormBody from '../../../../form-body';\n\nconst icons = [\n    {\n        icon: 'IcPoiClearPhoto',\n        text: localize('A clear colour photo or scanned image'),\n    },\n    {\n        icon: 'IcPoiFileFormat',\n        text: localize('JPEG, JPG, PNG, PDF, or GIF'),\n    },\n    {\n        icon: 'IcPoiFileSize',\n        text: localize('Less than 8MB'),\n    },\n    {\n        icon: 'IcPoiDocExpiry',\n        text: localize('Must be valid for at least 6 months'),\n    },\n];\n\ntype TDocumentsUpload = {\n    initial_values?: FormikValues;\n    is_from_external?: boolean;\n    goToCards: () => void;\n    onSubmit: () => void;\n    data: ReturnType<typeof getDocumentIndex>[number]['details'];\n};\n\ntype TIconsItem = {\n    data: FormikValues;\n};\n\nconst IconsItem = ({ data }: TIconsItem) => (\n    <div className={`${ROOT_CLASS}__icons-item`}>\n        <Icon icon={data.icon} size={24} />\n        <Text as='p' size='xxxs' align='center'>\n            {data.text}\n        </Text>\n    </div>\n);\n\nconst DocumentsUpload = ({ initial_values, is_from_external, data, goToCards, onSubmit }: TDocumentsUpload) => {\n    const { isDesktop } = useDevice();\n    const { fields, documents_title, documents } = data;\n    const is_expiry_date_required = fields.some(field => field.name === date_field.name);\n\n    const fields_title = is_expiry_date_required ? (\n        <Localize\n            i18n_default_text='First, enter your {{label}} and the expiry date.'\n            values={{\n                label: fields?.[0].label,\n            }}\n        />\n    ) : (\n        <Localize\n            i18n_default_text='First, enter your {{label}}.'\n            values={{\n                label: fields?.[0].label,\n            }}\n        />\n    );\n\n    return (\n        <div\n            className={clsx(ROOT_CLASS, {\n                [`${ROOT_CLASS}--mobile`]: !isDesktop,\n            })}\n        >\n            <Formik\n                initialValues={initial_values || setInitialValues([...(fields || []), ...(documents || [])])}\n                validate={values => validateFields(values, fields, documents)}\n                onSubmit={onSubmit}\n            >\n                {({ values, isValid, touched }: FormikValues) => {\n                    const is_form_touched = Object.keys(touched).length > 0;\n                    const is_form_empty = Object.values(values).some(\n                        (field, key) => (field === null || field === '') && fields?.[key]?.required\n                    );\n\n                    return (\n                        <Form className={`${ROOT_CLASS}__form`}>\n                            <FormBody className='form-body' scroll_offset={isDesktop ? '80px' : '180px'}>\n                                <div className={`${ROOT_CLASS}__fields-content`}>\n                                    <Text as='h3' size='s' color='prominent'>\n                                        {fields_title}\n                                    </Text>\n                                    <div className={`${ROOT_CLASS}__fields-wrap`}>\n                                        {fields?.map((field: FormikValues) => (\n                                            <InputField key={field.name} data={field} />\n                                        ))}\n                                    </div>\n                                    <div className={`${ROOT_CLASS}__divider`} />\n                                    <Text as='h3' size='s' color='prominent'>\n                                        {documents_title}\n                                    </Text>\n                                    <div className={`${ROOT_CLASS}__uploaders-wrap`}>\n                                        {documents?.map((item: FormikValues) => (\n                                            <Uploader\n                                                key={item.name}\n                                                data={item}\n                                                value={values[item.name]}\n                                                is_full={documents.length === 1 || is_from_external}\n                                            />\n                                        ))}\n                                    </div>\n                                    <div className={`${ROOT_CLASS}__icons`}>\n                                        {icons.map(item =>\n                                            item.icon === 'IcPoiDocExpiry' && !is_expiry_date_required ? null : (\n                                                <IconsItem key={item.icon} data={item} />\n                                            )\n                                        )}\n                                    </div>\n                                </div>\n                            </FormBody>\n                            <FormFooter>\n                                <div className={`${ROOT_CLASS}__btns`}>\n                                    <Button onClick={goToCards} secondary large text={localize('Back')} />\n                                    <Button\n                                        type='submit'\n                                        primary\n                                        large\n                                        is_disabled={!isValid || (!is_form_touched && is_form_empty)}\n                                        text={localize('Next')}\n                                    />\n                                </div>\n                            </FormFooter>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </div>\n    );\n};\n\nexport default DocumentsUpload;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikProps, FormikValues } from 'formik';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport { Button, Text } from '@deriv/components';\nimport Uploader from './uploader';\nimport { setInitialValues, validateFields } from './utils';\nimport { ROOT_CLASS, SELFIE_DOCUMENT } from '../constants';\nimport FormBody from '../../../../form-body';\nimport FormFooter from '../../../../form-footer';\n\ntype TSelfieUpload = {\n    initial_values?: FormikValues;\n    goBack: () => void;\n    onConfirm: () => void;\n    onFileDrop: () => void;\n};\n\nconst SelfieUpload = ({ initial_values, goBack, onConfirm, onFileDrop }: TSelfieUpload) => {\n    const { isDesktop } = useDevice();\n    return (\n        <div\n            className={clsx(ROOT_CLASS, {\n                [`${ROOT_CLASS}--mobile`]: !isDesktop,\n            })}\n        >\n            <Formik\n                initialValues={initial_values || setInitialValues([SELFIE_DOCUMENT])}\n                validate={values => validateFields(values, undefined, [SELFIE_DOCUMENT])}\n                onSubmit={onConfirm}\n            >\n                {({ values, isValid, isSubmitting, touched }: Partial<FormikProps<FormikValues>>) => {\n                    let is_form_touched, is_form_empty;\n                    if (touched) {\n                        is_form_touched = Object.keys(touched).length > 0;\n                    }\n                    if (values) {\n                        is_form_empty = Object.values(values).some(field => field === null || field === '');\n                    }\n\n                    return (\n                        <Form className={`${ROOT_CLASS}__form`}>\n                            <FormBody className='form-body' scroll_offset={isDesktop ? '8rem' : '18rem'}>\n                                <div className={`${ROOT_CLASS}__fields-content`}>\n                                    <Text as='h3' size='s' weight='bold' color='prominent'>\n                                        <Localize i18n_default_text='Upload your selfie' />\n                                    </Text>\n                                    <div className={`${ROOT_CLASS}__uploaders-wrap`}>\n                                        <Uploader\n                                            data={SELFIE_DOCUMENT}\n                                            value={values ? values[SELFIE_DOCUMENT.name] : ''}\n                                            is_full\n                                            onChange={onFileDrop}\n                                            has_frame\n                                        />\n                                    </div>\n                                    <div className={`${ROOT_CLASS}__notice`}>\n                                        <Text as='p' size='xs' color='general'>\n                                            <Localize i18n_default_text='Before uploading, please ensure that you’re facing forward in the selfie, your face is within the frame, and your eyes are clearly visible even if you’re wearing glasses.' />\n                                        </Text>\n                                    </div>\n                                </div>\n                            </FormBody>\n                            <FormFooter>\n                                <div className={`${ROOT_CLASS}__btns`}>\n                                    <Button onClick={goBack} secondary large text={localize('Back')} />\n                                    <Button\n                                        type='submit'\n                                        primary\n                                        large\n                                        is_disabled={!isValid || isSubmitting || (!is_form_touched && is_form_empty)}\n                                        text={localize('Confirm and upload')}\n                                    />\n                                </div>\n                            </FormFooter>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </div>\n    );\n};\n\nexport default SelfieUpload;\n","import React from 'react';\nimport DocumentsUpload from './documents-upload';\nimport SelfieUpload from './selfie-upload';\nimport { SELFIE_DOCUMENT, getDocumentIndex } from '../constants';\nimport './card-details.scss';\nimport { FormikValues } from 'formik';\n\ntype TCardDetails = {\n    data: ReturnType<typeof getDocumentIndex>[number]['details'];\n    onComplete: (e: object) => void;\n    goToCards: () => void;\n    is_from_external?: boolean;\n};\n\nconst CardDetails = ({ data, goToCards, onComplete, is_from_external }: TCardDetails) => {\n    const [documents, setDocuments] = React.useState<FormikValues>();\n    const [selfie, setSelfie] = React.useState<FormikValues>();\n    const [is_selfie_upload, setIsSelfieUpload] = React.useState(false);\n\n    const onSubmitDocuments = (values?: FormikValues) => {\n        setDocuments(values);\n        setIsSelfieUpload(true);\n    };\n\n    const onConfirmDocuments = (values?: FormikValues) => {\n        onComplete({ ...documents, ...values });\n    };\n\n    return (\n        <React.Fragment>\n            {!is_selfie_upload ? (\n                <DocumentsUpload\n                    initial_values={documents}\n                    is_from_external={is_from_external}\n                    data={data}\n                    goToCards={goToCards}\n                    onSubmit={onSubmitDocuments}\n                />\n            ) : (\n                <SelfieUpload\n                    initial_values={selfie}\n                    goBack={() => setIsSelfieUpload(false)}\n                    onConfirm={onConfirmDocuments}\n                    onFileDrop={(value?: string) => setSelfie({ [SELFIE_DOCUMENT.name]: value })}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default CardDetails;\n","import CardDetails from './card-details';\n\nexport default CardDetails;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors in OnfidoUpload component\nimport React from 'react';\nimport { Loading, Icon, Text, Button } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { WS } from '@deriv/shared';\nimport { UploadComplete } from '../upload-complete/upload-complete';\nimport POIManualUploadFailed from '../../../poi-manual-upload-failed';\nimport { API_ERROR_CODES } from '../../../../Constants/api-error-codes';\nimport uploadFile from '../../../file-uploader-container/upload-file';\nimport OnfidoUpload from '../../../../Sections/Verification/ProofOfIdentity/onfido-sdk-view-container';\n\nimport CardDetails from './card-details';\nimport { SELFIE_DOCUMENT, getDocumentIndex } from './constants';\nimport { FormikValues } from 'formik';\n\nconst STATUS = {\n    IS_UPLOADING: 'IS_UPLOADING',\n    IS_COMPLETED: 'IS_COMPLETED',\n    IS_FAILED: 'IS_FAILED',\n};\n\ntype TDetailComponent = {\n    document: ReturnType<typeof getDocumentIndex>[number];\n    onClickBack: () => void;\n    root_class: string;\n    country_code_key?: string;\n    height?: string | number;\n    handleComplete?: () => void;\n    is_onfido_supported?: boolean;\n    is_from_external?: boolean;\n    is_for_mt5?: boolean;\n    handlePOIforMT5Complete?: () => void;\n    needs_poa?: boolean;\n};\n\nconst DetailComponent = ({\n    document,\n    onClickBack,\n    root_class,\n    country_code_key,\n    height,\n    handleComplete,\n    is_onfido_supported,\n    is_from_external,\n    is_for_mt5,\n    handlePOIforMT5Complete,\n    needs_poa,\n    ...props\n}: TDetailComponent) => {\n    const [status, setStatus] = React.useState('');\n    const [response_error, setError] = React.useState('');\n\n    let is_any_failed = false;\n\n    const uploadFiles = (data: FormikValues) =>\n        new Promise((resolve, reject) => {\n            const docs = document.details.documents.map((item: FormikValues) => item.name);\n            const files = Object.values(data).filter(item => [...docs, SELFIE_DOCUMENT.name].includes(item.name));\n            const files_length = files.length;\n            let file_to_upload_index = 0;\n            const results: object[] = [];\n            const uploadNext = () => {\n                const item = files[file_to_upload_index];\n                const { file, document_type, pageType, lifetime_valid } = item;\n                const expiration_date =\n                    typeof data.expiry_date?.format === 'function' ? data.expiry_date.format('YYYY-MM-DD') : undefined;\n                uploadFile(file, WS.getSocket, {\n                    document_type,\n                    page_type: pageType,\n                    expiration_date,\n                    document_id: data.document_id || '',\n                    lifetime_valid: +(lifetime_valid && !expiration_date),\n                    document_issuing_country: country_code_key,\n                })\n                    .then(response => {\n                        file_to_upload_index += 1;\n                        if (response?.warning === API_ERROR_CODES.DUPLICATE_DOCUMENT) {\n                            setStatus(STATUS.IS_DUPLICATE_UPLOAD);\n                        } else if (response?.warning || response.error) {\n                            is_any_failed = true;\n                            setStatus(STATUS.IS_FAILED);\n                            setError(\n                                response.message || (response.error ? response.error.message : localize('Failed'))\n                            );\n                            if (file_to_upload_index < files_length) {\n                                uploadNext();\n                            }\n                        } else if (file_to_upload_index < files_length) {\n                            results.push(response);\n                            uploadNext();\n                        } else {\n                            resolve(results);\n                        }\n                    })\n                    .catch(error => {\n                        reject(error);\n                    });\n            };\n\n            uploadNext();\n        });\n\n    const onComplete = (values: FormikValues) => {\n        setStatus(STATUS.IS_UPLOADING);\n        uploadFiles(values)\n            .then(() => {\n                if (!is_any_failed) {\n                    if (is_for_mt5) {\n                        handlePOIforMT5Complete?.();\n                    } else {\n                        setStatus(STATUS.IS_COMPLETED);\n                    }\n                }\n            })\n            .catch(error => {\n                setStatus(STATUS.IS_FAILED);\n                setError(error.message);\n            });\n    };\n\n    switch (status) {\n        case STATUS.IS_UPLOADING:\n            return <Loading is_fullscreen={false} is_slow_loading status={[localize('Uploading documents')]} />;\n        case STATUS.IS_COMPLETED:\n            return <UploadComplete is_from_external needs_poa={needs_poa} is_manual_upload />;\n        case STATUS.IS_FAILED:\n            return <POIManualUploadFailed error={response_error} />;\n        case STATUS.IS_DUPLICATE_UPLOAD:\n            return (\n                <POIManualUploadFailed\n                    error={\n                        <Localize i18n_default_text='It seems you’ve submitted this document before. Upload a new document.' />\n                    }\n                >\n                    <Button onClick={onClickBack} large primary className='upload_error_btn'>\n                        <Localize i18n_default_text='Try Again' />\n                    </Button>\n                </POIManualUploadFailed>\n            );\n\n        default:\n            return (\n                <React.Fragment>\n                    {is_onfido_supported ? (\n                        <React.Fragment>\n                            <div className={`${root_class}__detail-header`} onClick={onClickBack}>\n                                <Icon icon='IcArrowLeftBold' />\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    weight='bold'\n                                    color='prominent'\n                                    className={`${root_class}__back-title`}\n                                >\n                                    {localize('Back')}\n                                </Text>\n                            </div>\n                            <OnfidoUpload\n                                country_code={country_code_key}\n                                documents_supported={[document.onfido_name]}\n                                height={height ?? null}\n                                handleComplete={is_for_mt5 ? handlePOIforMT5Complete : handleComplete}\n                                is_default_enabled\n                                handleViewComplete={is_for_mt5 ? handlePOIforMT5Complete : handleComplete}\n                                {...props}\n                            />\n                        </React.Fragment>\n                    ) : (\n                        <CardDetails\n                            data={document.details}\n                            onComplete={onComplete}\n                            goToCards={onClickBack}\n                            is_from_external={is_from_external}\n                        />\n                    )}\n                </React.Fragment>\n            );\n    }\n};\n\nexport default DetailComponent;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TCardWithArrow = {\n    onClick: () => void;\n    title: string;\n    description: string;\n    icon: string;\n};\n\nconst CardWithArrow = ({ onClick, title, description, icon }: TCardWithArrow) => {\n    const { isDesktop } = useDevice();\n    return (\n        <div className='manual-poi__card' onClick={onClick}>\n            <Icon className='manual-poi__card-icon' icon={icon} size={64} />\n            <div className='manual-poi__card-content'>\n                <Text as='p' size='xs' weight='bold' color='prominent'>\n                    {title}\n                </Text>\n                <Text as='p' size={isDesktop ? 'xxs' : 'xxxs'}>\n                    {description}\n                </Text>\n            </div>\n\n            <Icon icon='IcChevronRight' size={isDesktop ? 31 : 23} />\n        </div>\n    );\n};\n\nexport { CardWithArrow };\n","import React from 'react';\nimport { Card } from '@deriv/components';\nimport { CardWithArrow } from './card-with-arrow';\nimport { getDocumentIndex } from './constants';\n\ntype TDocument = {\n    toggleDetail: (index: number) => void;\n    documents: ReturnType<typeof getDocumentIndex>;\n};\n\nexport const Documents = ({ toggleDetail, documents }: TDocument) => (\n    <React.Fragment>\n        {documents.map((item, index: number) => (\n            <Card\n                key={item.card?.icon}\n                renderContent={() => <CardWithArrow onClick={() => toggleDetail(index)} {...item.card} />}\n            />\n        ))}\n    </React.Fragment>\n);\n","import React from 'react';\nimport { Button, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { identity_status_codes } from '../../../../Sections/Verification/ProofOfIdentity/proof-of-identity-utils';\nimport DetailComponent from './detail-component';\nimport { Documents } from './documents';\nimport { getDocumentIndex, DOCUMENT_TYPES } from './constants';\nimport UploadComplete from '../upload-complete';\nimport { FormikValues } from 'formik';\nimport Verified from '../verified';\nimport Limited from '../limited';\nimport Expired from '../expired';\nimport FormFooter from '../../../form-footer';\n\nconst checkNimcStep = (documents: FormikValues) => {\n    let has_nimc = false;\n    documents.forEach((document: FormikValues) => {\n        if (document.document_type === DOCUMENT_TYPES.NIMC_SLIP) {\n            has_nimc = true;\n        }\n    });\n    return has_nimc;\n};\n\ntype TUnsupported = {\n    country_code: string;\n    handlePOIforMT5Complete: () => void;\n    manual: {\n        status: string;\n    };\n    redirect_button: React.ReactElement;\n    needs_poa: boolean;\n    handleBack: () => void;\n    handleRequireSubmission: () => void;\n    handleViewComplete: () => void;\n    allow_poi_resubmission: boolean;\n    onfido: {\n        submissions_left: number;\n    };\n    is_for_mt5?: boolean;\n    is_resubmission?: boolean;\n};\n\nconst Unsupported = ({\n    country_code,\n    handlePOIforMT5Complete,\n    manual,\n    redirect_button,\n    needs_poa,\n    handleBack,\n    handleRequireSubmission,\n    allow_poi_resubmission,\n    handleViewComplete,\n    onfido,\n    is_for_mt5,\n    is_resubmission,\n    ...props\n}: TUnsupported) => {\n    const [detail, setDetail] = React.useState<number | null>(null);\n    const toggleDetail = (index: number) => setDetail(index);\n\n    const documents = getDocumentIndex({\n        country_code,\n    });\n\n    if (manual) {\n        if (manual.status === identity_status_codes.pending)\n            return <UploadComplete is_manual_upload needs_poa={needs_poa} redirect_button={redirect_button} />;\n        else if (\n            [identity_status_codes.rejected, identity_status_codes.suspected].some(status => status === manual.status)\n        ) {\n            if (!allow_poi_resubmission) return <Limited />;\n        } else if (manual.status === identity_status_codes.verified) {\n            return <Verified needs_poa={needs_poa} redirect_button={redirect_button} />;\n        } else if (manual.status === identity_status_codes.expired) {\n            return <Expired redirect_button={redirect_button} handleRequireSubmission={handleRequireSubmission} />;\n        }\n    }\n\n    if (detail !== null) {\n        const is_onfido_supported =\n            country_code === 'ng' &&\n            !checkNimcStep(documents[detail ?? 0].details.documents) &&\n            onfido &&\n            onfido.submissions_left > 0;\n        return (\n            <DetailComponent\n                is_onfido_supported={is_onfido_supported}\n                country_code_key={country_code}\n                document={documents[detail]}\n                root_class='manual-poi'\n                onClickBack={() => setDetail(null)}\n                handlePOIforMT5Complete={handlePOIforMT5Complete}\n                handleComplete={handleViewComplete}\n                is_for_mt5={is_for_mt5}\n                needs_poa={needs_poa}\n                {...props}\n            />\n        );\n    }\n\n    return (\n        <div className='manual-poi'>\n            <Text as='h2' color='prominent' size='xs' className='manual-poi__title'>\n                <Localize i18n_default_text='Please upload one of the following documents:' />\n            </Text>\n            <Documents documents={documents} toggleDetail={toggleDetail} />\n            {!is_for_mt5 && !is_resubmission && (\n                <FormFooter className='proof-of-identity__footer'>\n                    <Button className='back-btn' onClick={handleBack} type='button' has_effect large secondary>\n                        <Localize i18n_default_text='Back' />\n                    </Button>\n                </FormFooter>\n            )}\n        </div>\n    );\n};\nexport default Unsupported;\n","import Unsupported from './unsupported';\nimport './unsupported.scss';\n\nexport default Unsupported;\n","import React from 'react';\nimport { formatOnfidoError } from '@deriv/shared';\nimport UploadComplete from '../../../Components/poi/status/upload-complete';\nimport Verified from '../../../Components/poi/status/verified';\nimport RejectedReasons from '../../../Components/poi/status/rejected-reasons';\nimport Unsupported from '../../../Components/poi/status/unsupported';\nimport { identity_status_codes, service_code } from './proof-of-identity-utils';\n\nconst Onfido = ({\n    handleRequireSubmission,\n    is_from_external,\n    needs_poa,\n    onfido,\n    redirect_button,\n    manual,\n    country_code,\n    handleViewComplete,\n}) => {\n    const { status, submissions_left, last_rejected: rejected_reasons } = onfido;\n\n    switch (status) {\n        case identity_status_codes.pending:\n            return (\n                <UploadComplete\n                    is_from_external={is_from_external}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                />\n            );\n        case identity_status_codes.rejected:\n        case identity_status_codes.suspected:\n        case identity_status_codes.expired: {\n            const submission_errors = formatOnfidoError(status, rejected_reasons);\n            if (Number(submissions_left) < 1) {\n                return (\n                    <Unsupported\n                        manual={manual}\n                        is_from_external={is_from_external}\n                        country_code={country_code}\n                        handleViewComplete={handleViewComplete}\n                        onfido={onfido}\n                    />\n                );\n            }\n            return (\n                <RejectedReasons\n                    rejected_reasons={submission_errors}\n                    handleRequireSubmission={handleRequireSubmission}\n                />\n            );\n        }\n        case identity_status_codes.verified:\n            return (\n                <Verified\n                    is_from_external={is_from_external}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                    service={service_code.onfido}\n                />\n            );\n        default:\n            return null;\n    }\n};\n\nexport default Onfido;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Formik, Field, FormikErrors, FormikValues, FormikHelpers } from 'formik';\nimport { Autocomplete, Button, HintBox, Text, SelectNative } from '@deriv/components';\nimport { IDV_ERROR_STATUS, TIDVErrorStatus, POIContext } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport FormFooter from '../../form-footer';\nimport { useDevice } from '@deriv-com/ui';\nimport { useResidenceList } from '@deriv/api';\n\ntype TCountrySelector = {\n    handleSelectionNext?: () => void;\n    is_from_external: boolean;\n    mismatch_status?: TIDVErrorStatus;\n};\n\nconst CountrySelector = ({ handleSelectionNext, is_from_external, mismatch_status }: TCountrySelector) => {\n    const { setSelectedCountry } = React.useContext(POIContext);\n    const { data: country_list, isLoading } = useResidenceList();\n\n    const initial_form_values: FormikValues = {\n        country_input: '',\n    };\n\n    const validateFields = (values: FormikValues) => {\n        const errors: FormikErrors<FormikValues> = {};\n        const { country_input } = values;\n\n        if (!country_input) {\n            errors.country_input = localize('Please select the country of document issuance.');\n        } else if (!country_list.find((c: FormikValues) => c.text === country_input)) {\n            errors.country_input = localize('Please select a valid country of document issuance.');\n        }\n\n        return errors;\n    };\n    const { isDesktop } = useDevice();\n\n    const updateSelectedCountry = (country_name: string) => {\n        const matching_country = country_list?.find((c: FormikValues) => c.text === country_name);\n        if (matching_country) {\n            setSelectedCountry?.(matching_country);\n        }\n    };\n\n    const submitHandler = (values: FormikValues, { setSubmitting }: FormikHelpers<FormikValues>) => {\n        updateSelectedCountry(values.country_input);\n        setSubmitting(false);\n        handleSelectionNext?.();\n    };\n\n    const failed_message: React.ReactNode = mismatch_status ? IDV_ERROR_STATUS[mismatch_status]?.message ?? null : null;\n\n    return (\n        <Formik initialValues={initial_form_values} validate={validateFields} onSubmit={submitHandler}>\n            {({\n                dirty,\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                isSubmitting,\n                isValid,\n                setFieldValue,\n                touched,\n                values,\n            }) => (\n                <React.Fragment>\n                    <div\n                        className={clsx('proof-of-identity__container proof-of-identity__country-container', {\n                            'min-height': !is_from_external,\n                        })}\n                    >\n                        {failed_message ? (\n                            <React.Fragment>\n                                <Text align='center' weight='bold' size={isDesktop ? 's' : 'xs'}>\n                                    <Localize i18n_default_text='Your identity verification failed because:' />\n                                </Text>\n                                <HintBox\n                                    className={clsx('proof-of-identity__failed-message', 'hint-box-layout')}\n                                    icon='IcAlertDanger'\n                                    message={\n                                        <Text as='p' size={isDesktop ? 'xs' : 'xxs'}>\n                                            {failed_message}\n                                        </Text>\n                                    }\n                                    is_danger\n                                />\n                            </React.Fragment>\n                        ) : (\n                            <Text className='proof-of-identity__header' align='center' weight='bold'>\n                                <Localize i18n_default_text='Proof of identity' />\n                            </Text>\n                        )}\n\n                        <Text className='proof-of-identity__country-text ' size='xs'>\n                            <Localize i18n_default_text='In which country was your document issued?' />\n                        </Text>\n                        <fieldset className='proof-of-identity__fieldset'>\n                            <Field name='country_input'>\n                                {({ field }: FormikValues) => (\n                                    <React.Fragment>\n                                        {isDesktop ? (\n                                            <Autocomplete\n                                                className={clsx({ 'external-dropdown': is_from_external })}\n                                                {...field}\n                                                data_testid='dt_external_dropdown'\n                                                name='country_input'\n                                                data-lpignore='true'\n                                                error={touched.country_input && errors.country_input}\n                                                autoComplete='off'\n                                                type='text'\n                                                label={localize('Country')}\n                                                list_items={country_list}\n                                                value={values.country_input}\n                                                onBlur={(e: FormikValues) => {\n                                                    handleBlur(e);\n                                                    const current_input = e.target.value;\n                                                    if (\n                                                        !country_list.find(\n                                                            (c: FormikValues) => c.text === current_input\n                                                        )\n                                                    ) {\n                                                        setFieldValue('country_input', '', true);\n                                                        updateSelectedCountry('');\n                                                    }\n                                                }}\n                                                onChange={handleChange}\n                                                onItemSelection={({ text }: FormikValues) => {\n                                                    const select_value =\n                                                        text === 'No results found' || !text ? '' : text;\n                                                    setFieldValue('country_input', select_value, true);\n                                                    updateSelectedCountry(text);\n                                                }}\n                                                required\n                                            />\n                                        ) : (\n                                            <div className='proof-of-identity__dropdown-container'>\n                                                <SelectNative\n                                                    {...field}\n                                                    name='country_input'\n                                                    error={touched.country_input && errors.country_input}\n                                                    label={localize('Country')}\n                                                    placeholder={localize('Please select')}\n                                                    list_items={country_list}\n                                                    value={values.country_input}\n                                                    onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                                                        handleChange(e);\n                                                        updateSelectedCountry(e.target.value);\n                                                    }}\n                                                    use_text={true}\n                                                    required\n                                                />\n                                            </div>\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </Field>\n                        </fieldset>\n                    </div>\n                    <FormFooter className={clsx('proof-of-identity__footer', { 'external-footer': is_from_external })}>\n                        <Button\n                            className='proof-of-identity__submit-button'\n                            type='submit'\n                            onClick={() => handleSubmit()}\n                            has_effect\n                            is_disabled={!dirty || isSubmitting || !isValid || isLoading}\n                            is_loading={false}\n                            text={localize('Next')}\n                            large\n                            primary\n                        />\n                    </FormFooter>\n                </React.Fragment>\n            )}\n        </Formik>\n    );\n};\n\nexport default CountrySelector;\n","import PoiCountrySelector from './poi-country-selector';\n\nexport default PoiCountrySelector;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikErrors, FormikHelpers } from 'formik';\nimport { Button, HintBox, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    filterObjProperties,\n    formatIDVFormValues,\n    getIDVNotApplicableOption,\n    removeEmptyPropertiesFromObject,\n    toMoment,\n    WS,\n} from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { useDevice } from '@deriv-com/ui';\nimport {\n    isAdditionalDocumentValid,\n    isDocumentNumberValid,\n    isDocumentTypeValid,\n    makeSettingsRequest,\n    shouldHideHelperImage,\n    validate,\n    validateName,\n} from '../../../Helpers/utils';\nimport { DerivLightNameDobPoiIcon } from '@deriv/quill-icons';\nimport IDVForm from '../../forms/idv-form';\nimport PersonalDetailsForm from '../../forms/personal-details-form';\nimport FormBody from '../../form-body';\nimport FormFooter from '../../form-footer';\nimport FormSubHeader from '../../form-sub-header';\nimport { ResidenceList } from '@deriv/api-types';\nimport {\n    CLAIMED_DOCUMENT_ERROR_MESSAGE,\n    DUPLICATE_ACCOUNT_ERROR_MESSAGE,\n    GENERIC_ERROR_MESSAGE,\n} from '../../../Configs/poi-error-config';\nimport { TIDVFormValues, TConfirmPersonalDetailsForm } from 'Types';\nimport { API_ERROR_CODES } from '../../../Constants/api-error-codes';\n\ntype TIDVDocumentSubmitProps = {\n    handleBack: React.MouseEventHandler;\n    handleViewComplete: () => void;\n    selected_country: ResidenceList[0];\n    getChangeableFields: () => Array<string>;\n    handleSelectionNext?: (should_show_manual: boolean) => void;\n};\n\nexport type TIdvDocumentSubmitForm = TIDVFormValues & TConfirmPersonalDetailsForm;\n\nconst IdvDocumentSubmit = observer(\n    ({ handleBack, handleViewComplete, handleSelectionNext, selected_country }: TIDVDocumentSubmitProps) => {\n        const { client } = useStore();\n        const { account_settings, getChangeableFields } = client;\n        const { isDesktop } = useDevice();\n\n        const IDV_NOT_APPLICABLE_OPTION = React.useMemo(() => getIDVNotApplicableOption(), []);\n        const shouldSkipIdv = (document_id?: string) => document_id === IDV_NOT_APPLICABLE_OPTION.id;\n        const visible_settings = ['first_name', 'last_name', 'date_of_birth'];\n        const side_note_image = <DerivLightNameDobPoiIcon height='195px' width='285px' />;\n\n        const form_initial_values = filterObjProperties(account_settings, visible_settings) as {\n            [Property in keyof TConfirmPersonalDetailsForm]: string;\n        };\n\n        if (form_initial_values.date_of_birth) {\n            form_initial_values.date_of_birth = toMoment(form_initial_values.date_of_birth).format('YYYY-MM-DD');\n        }\n\n        const changeable_fields = getChangeableFields();\n\n        const initial_values: TIdvDocumentSubmitForm = {\n            document_type: {\n                id: '',\n                text: '',\n                value: '',\n                example_format: '',\n            },\n            document_number: '',\n            ...form_initial_values,\n            confirmation_checkbox: false,\n        };\n\n        const validateFields = (values: TIdvDocumentSubmitForm) => {\n            const errors: FormikErrors<Record<keyof TIdvDocumentSubmitForm, string>> = {};\n            const { document_type, document_number, document_additional } = values;\n\n            if (shouldSkipIdv(document_type.id)) {\n                return errors;\n            }\n\n            const needs_additional_document = !!document_type.additional;\n\n            errors.document_type = isDocumentTypeValid(document_type);\n            if (!shouldHideHelperImage(document_type?.id)) {\n                if (needs_additional_document) {\n                    errors.document_additional = isAdditionalDocumentValid(document_type, document_additional);\n                }\n                errors.document_number = isDocumentNumberValid(document_number, document_type);\n            }\n            const required_fields = ['first_name', 'last_name', 'date_of_birth'];\n            const validateValues = validate(errors, values);\n            validateValues(val => val, required_fields, localize('This field is required'));\n\n            if (values.first_name) {\n                errors.first_name = validateName(values.first_name);\n            }\n            if (values.last_name) {\n                errors.last_name = validateName(values.last_name);\n            }\n\n            if (!values.confirmation_checkbox) {\n                errors.confirmation_checkbox = 'error';\n            }\n\n            return removeEmptyPropertiesFromObject(errors);\n        };\n\n        const submitHandler = async (\n            values: TIdvDocumentSubmitForm,\n            { setSubmitting, setStatus }: FormikHelpers<TIdvDocumentSubmitForm>\n        ) => {\n            if (shouldSkipIdv(values?.document_type?.id)) {\n                handleSelectionNext?.(true);\n                return;\n            }\n\n            setSubmitting(true);\n\n            const request = makeSettingsRequest(values, changeable_fields);\n\n            const data = await WS.setSettings(request);\n\n            if (data?.error) {\n                const response_error =\n                    data.error?.code === API_ERROR_CODES.DUPLICATE_ACCOUNT\n                        ? DUPLICATE_ACCOUNT_ERROR_MESSAGE\n                        : GENERIC_ERROR_MESSAGE;\n                setStatus({ error_message: response_error });\n                setSubmitting(false);\n                return;\n            }\n            const get_settings = await WS.authorized.storage.getSettings();\n            if (get_settings?.error) {\n                setStatus({ error_message: get_settings?.error?.message ?? GENERIC_ERROR_MESSAGE });\n                setSubmitting(false);\n                return;\n            }\n\n            const submit_data = {\n                identity_verification_document_add: 1,\n                ...formatIDVFormValues(values, selected_country.value as string),\n            };\n\n            const idv_update_response = await WS.send(submit_data);\n\n            if (idv_update_response?.error) {\n                const response_error =\n                    idv_update_response.error?.code === API_ERROR_CODES.CLAIMED_DOCUMENT\n                        ? CLAIMED_DOCUMENT_ERROR_MESSAGE\n                        : (idv_update_response.error?.message ?? GENERIC_ERROR_MESSAGE);\n                setStatus({ error_message: response_error });\n                setSubmitting(false);\n                return;\n            }\n            setSubmitting(false);\n            handleViewComplete();\n        };\n\n        return (\n            <Formik\n                initialValues={{ ...initial_values }}\n                validate={validateFields}\n                onSubmit={submitHandler}\n                enableReinitialize\n            >\n                {({ dirty, isSubmitting, isValid, values, status }) => {\n                    const should_skip_idv = shouldSkipIdv(values?.document_type?.id);\n                    const is_button_disabled = should_skip_idv ? false : !dirty || isSubmitting || !isValid;\n                    const getButtonText = () =>\n                        should_skip_idv ? (\n                            <Localize i18n_default_text='Next' />\n                        ) : (\n                            <Localize i18n_default_text='Verify' />\n                        );\n                    return (\n                        <Form\n                            className={clsx('proof-of-identity__container proof-of-identity__container--reset', {\n                                'min-height': shouldSkipIdv(values?.document_type?.id),\n                            })}\n                        >\n                            {status?.error_message && (\n                                <div className='account-form__poi-confirm-example--generic-error-msg'>\n                                    <HintBox\n                                        icon='IcAlertDanger'\n                                        message={\n                                            <Text as='p' size='xxxs'>\n                                                {status.error_message}\n                                            </Text>\n                                        }\n                                        is_danger\n                                        className='hint-box-layout'\n                                    />\n                                </div>\n                            )}\n                            <FormBody className='form-body' scroll_offset={isDesktop ? '80px' : '180px'}>\n                                <FormSubHeader title={localize('Identity verification')} />\n                                <IDVForm selected_country={selected_country} class_name='idv-layout' />\n                                {!shouldSkipIdv(values?.document_type?.id) && (\n                                    <React.Fragment>\n                                        <FormSubHeader title={localize('Details')} />\n                                        <PersonalDetailsForm\n                                            class_name='account-form__poi-confirm-example_container'\n                                            is_rendered_for_idv\n                                            editable_fields={values.confirmation_checkbox ? [] : changeable_fields}\n                                            side_note={side_note_image}\n                                            inline_note_text={\n                                                <Localize\n                                                    i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your identity document.'\n                                                    components={[<strong key={0} />]}\n                                                />\n                                            }\n                                        />\n                                    </React.Fragment>\n                                )}\n                            </FormBody>\n                            <FormFooter className='proof-of-identity__footer '>\n                                {isDesktop && (\n                                    <Button\n                                        className='back-btn'\n                                        onClick={handleBack}\n                                        type='button'\n                                        has_effect\n                                        large\n                                        secondary\n                                    >\n                                        <Localize i18n_default_text='Back' />\n                                    </Button>\n                                )}\n                                <Button\n                                    className='proof-of-identity__submit-button'\n                                    type='submit'\n                                    has_effect\n                                    is_disabled={is_button_disabled}\n                                    large\n                                    primary\n                                >\n                                    {getButtonText()}\n                                </Button>\n                            </FormFooter>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        );\n    }\n);\n\nexport default IdvDocumentSubmit;\n","import IdvDocumentSubmit from './idv-document-submit';\n\nexport default IdvDocumentSubmit;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikHelpers, FormikValues } from 'formik';\nimport { GetAccountStatus, GetSettings, ResidenceList } from '@deriv/api-types';\nimport { Button, HintBox, Loading, Text } from '@deriv/components';\nimport {\n    filterObjProperties,\n    getIDVNotApplicableOption,\n    IDV_ERROR_STATUS,\n    isEmptyObject,\n    removeEmptyPropertiesFromObject,\n    TIDVErrorStatus,\n    toMoment,\n    WS,\n} from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { DerivLightNameDobPoiIcon } from '@deriv/quill-icons';\nimport FormBody from '../../../form-body';\nimport IDVForm from '../../../forms/idv-form';\nimport FormFooter from '../../../form-footer';\nimport FormSubHeader from '../../../form-sub-header';\nimport PersonalDetailsForm from '../../../forms/personal-details-form.jsx';\nimport {\n    isAdditionalDocumentValid,\n    isDocumentNumberValid,\n    isDocumentTypeValid,\n    makeSettingsRequest,\n    shouldHideHelperImage,\n    validate,\n    validateName,\n} from '../../../../Helpers/utils';\nimport {\n    GENERIC_ERROR_MESSAGE,\n    DUPLICATE_ACCOUNT_ERROR_MESSAGE,\n    CLAIMED_DOCUMENT_ERROR_MESSAGE,\n    generateIDVError,\n} from '../../../../Configs/poi-error-config';\nimport { API_ERROR_CODES } from '../../../../Constants/api-error-codes';\nimport { TIDVFormValues, TConfirmPersonalDetailsForm } from '../../../../Types';\nimport LoadErrorMessage from '../../../load-error-message';\nimport { TIdvDocumentSubmitForm } from '../../idv-document-submit/idv-document-submit';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TRestState = {\n    api_error: string;\n    errors?: boolean;\n    form_initial_values: TIdvFailedForm;\n    changeable_fields: string[];\n};\n\ntype TIdvFailed = {\n    account_settings: GetSettings;\n    getChangeableFields: () => string[];\n    handleSubmit: () => void;\n    is_from_external: boolean;\n    mismatch_status: TIDVErrorStatus;\n    residence_list: ResidenceList;\n    latest_status: DeepRequired<GetAccountStatus>['authentication']['attempts']['latest'];\n    selected_country?: ResidenceList[0];\n    handleSelectionNext?: (should_show_manual: boolean) => void;\n};\n\ntype TIDVFailureConfig = {\n    required_fields: string[];\n    side_note_image: JSX.Element;\n    failure_message: React.ReactNode;\n    inline_note_text: React.ReactNode;\n};\n\ntype TIdvFailedForm = Partial<TIDVFormValues> & Partial<TConfirmPersonalDetailsForm>;\n\nconst IdvFailed = ({\n    getChangeableFields,\n    is_from_external,\n    residence_list,\n    account_settings,\n    handleSubmit,\n    mismatch_status = IDV_ERROR_STATUS.Failed.code,\n    latest_status,\n    selected_country,\n    handleSelectionNext,\n}: TIdvFailed) => {\n    const { client } = useStore();\n    const { setIsAlreadyAttempted } = client;\n    const { isMobile, isDesktop } = useDevice();\n\n    const [idv_failure, setIdvFailure] = React.useState<TIDVFailureConfig>({\n        required_fields: [],\n        side_note_image: <DerivLightNameDobPoiIcon height='195px' width='285px' />,\n        failure_message: null,\n        inline_note_text: null,\n    });\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [rest_state, setRestState] = React.useState<TRestState>({\n        api_error: '',\n        errors: false,\n        form_initial_values: {},\n        changeable_fields: [],\n    });\n\n    // Document upload not required for the below error codes\n    const is_document_upload_required = React.useMemo(\n        () =>\n            ![\n                IDV_ERROR_STATUS.DobMismatch.code,\n                IDV_ERROR_STATUS.NameMismatch.code,\n                IDV_ERROR_STATUS.NameDobMismatch.code,\n            ].includes(mismatch_status),\n        [mismatch_status]\n    );\n\n    /**\n     * If user needs to resubmit IDV document, the country should be the new selected country\n     * If user needs to update Personal info, the country should be the country of the latest status\n     */\n    const chosen_country = React.useMemo(\n        () =>\n            is_document_upload_required && !is_from_external\n                ? selected_country ?? {}\n                : residence_list.find(residence_data => residence_data.value === latest_status?.country_code) ?? {},\n        [selected_country, is_document_upload_required, latest_status?.country_code, residence_list, is_from_external]\n    );\n\n    const IDV_NOT_APPLICABLE_OPTION = React.useMemo(() => getIDVNotApplicableOption(), []);\n    const shouldSkipIdv = (document_id?: string) => document_id === IDV_NOT_APPLICABLE_OPTION.id;\n\n    React.useEffect(() => {\n        const initializeFormValues = async (required_fields: string[]) => {\n            await WS?.wait('get_settings');\n            const form_data = filterObjProperties(account_settings, required_fields);\n            if (form_data.date_of_birth) {\n                form_data.date_of_birth = toMoment(form_data.date_of_birth).format('YYYY-MM-DD');\n            }\n            // Remove the checkbox value as it is used only for moving cursor to the error field\n            form_data.confirmation_checkbox = false;\n            let initial_form_values = form_data;\n            if (is_document_upload_required) {\n                initial_form_values = {\n                    document_type: {\n                        id: '',\n                        text: '',\n                        value: '',\n                        example_format: '',\n                        sample_image: '',\n                    },\n                    document_number: '',\n                    ...initial_form_values,\n                };\n            }\n            setRestState({\n                form_initial_values: { ...initial_form_values },\n                changeable_fields: [...getChangeableFields()],\n                api_error: '',\n            });\n            setIsLoading(false);\n        };\n\n        setIsAlreadyAttempted(true);\n\n        const error_config = generateIDVError(\n            is_document_upload_required,\n            latest_status,\n            chosen_country,\n            mismatch_status\n        );\n        setIdvFailure(error_config);\n        initializeFormValues(error_config?.required_fields ?? []).catch(e => {\n            setRestState({\n                form_initial_values: {},\n                changeable_fields: [],\n                api_error: e?.error?.message,\n            });\n        });\n    }, [\n        mismatch_status,\n        account_settings,\n        is_document_upload_required,\n        getChangeableFields,\n        generateIDVError,\n        setIsAlreadyAttempted,\n    ]);\n\n    const onSubmit = async (values: TIdvFailedForm, { setStatus, setSubmitting }: FormikHelpers<TIdvFailedForm>) => {\n        if (shouldSkipIdv(values?.document_type?.id)) {\n            handleSelectionNext?.(true);\n            return;\n        }\n\n        delete values.confirmation_checkbox;\n        setSubmitting(true);\n        setStatus({ error_msg: null });\n        const { document_number, document_type } = values;\n        const request = makeSettingsRequest(\n            values,\n            rest_state?.changeable_fields ? [...rest_state.changeable_fields] : []\n        );\n        const data = await WS.setSettings(request);\n\n        if (data.error) {\n            const response_error =\n                data.error?.code === API_ERROR_CODES.DUPLICATE_ACCOUNT\n                    ? DUPLICATE_ACCOUNT_ERROR_MESSAGE\n                    : GENERIC_ERROR_MESSAGE;\n            setStatus({ error_msg: response_error });\n            setSubmitting(false);\n        } else {\n            const response = await WS.authorized.storage.getSettings();\n            if (response.error) {\n                setRestState(prev_state => ({ ...prev_state, api_error: response.error.message }));\n                setSubmitting(false);\n                return;\n            }\n            const submit_data = {\n                identity_verification_document_add: 1,\n                document_number,\n                document_type: document_type?.id,\n                issuing_country: chosen_country.value,\n            };\n\n            if (!submit_data.document_type || shouldSkipIdv(submit_data.document_type)) {\n                setSubmitting(false);\n                handleSubmit();\n                return;\n            }\n            const idv_update_response = await WS.send(submit_data);\n            if (idv_update_response?.error) {\n                const response_error =\n                    idv_update_response.error?.code === API_ERROR_CODES.CLAIMED_DOCUMENT\n                        ? CLAIMED_DOCUMENT_ERROR_MESSAGE\n                        : idv_update_response?.error?.message ?? GENERIC_ERROR_MESSAGE;\n                setStatus({ error_msg: response_error });\n                setSubmitting(false);\n                return;\n            }\n            setSubmitting(false);\n            handleSubmit();\n        }\n    };\n\n    const validateFields = (values: TIdvFailedForm) => {\n        const errors: Record<string, unknown> = {};\n        if (is_document_upload_required) {\n            const { document_type, document_number, document_additional } = values;\n\n            if (shouldSkipIdv(document_type?.id)) {\n                return errors;\n            }\n\n            const needs_additional_document = !!document_type?.additional;\n            errors.document_type = isDocumentTypeValid(document_type as FormikValues);\n            if (!shouldHideHelperImage(document_type?.id as string)) {\n                if (needs_additional_document) {\n                    errors.document_additional = isAdditionalDocumentValid(document_type, document_additional);\n                }\n                errors.document_number = isDocumentNumberValid(document_number ?? '', document_type as FormikValues);\n            }\n        }\n\n        const validateValues = validate(errors as Record<string, string>, values);\n\n        validateValues(val => val, idv_failure?.required_fields ?? [], localize('This field is required'));\n\n        if (values.first_name) {\n            errors.first_name = validateName(values.first_name);\n        }\n        if (values.last_name) {\n            errors.last_name = validateName(values.last_name);\n        }\n\n        if (!values.confirmation_checkbox) {\n            errors.confirmation_checkbox = 'error';\n        }\n\n        setRestState(prev_state => ({\n            ...prev_state,\n            errors: !isEmptyObject(removeEmptyPropertiesFromObject(errors)),\n        }));\n\n        return removeEmptyPropertiesFromObject(errors);\n    };\n\n    if (rest_state?.api_error) return <LoadErrorMessage error_message={rest_state.api_error} />;\n\n    if (is_loading && Object.keys(rest_state?.form_initial_values ?? {}).length === 0) {\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    }\n\n    const setScrollOffset = () => {\n        if (!isDesktop) {\n            if (is_from_external) {\n                return '140px';\n            }\n            return '180px';\n        }\n        return '80px';\n    };\n\n    const buttonText = (is_idv_skipping: boolean) => {\n        if (is_idv_skipping) return localize('Next');\n        if (is_document_upload_required) return localize('Verify');\n        return localize('Update profile');\n    };\n\n    return (\n        <Formik\n            initialValues={rest_state?.form_initial_values ?? {}}\n            onSubmit={onSubmit}\n            validate={validateFields}\n            className='proof-of-identity__container'\n        >\n            {({ isSubmitting, isValid, dirty, status, values }) => (\n                <Form\n                    className={clsx('proof-of-identity__mismatch-container', {\n                        'upload-layout': is_document_upload_required,\n                        'min-height': shouldSkipIdv(values?.document_type?.id),\n                    })}\n                >\n                    <FormBody className='form-body' scroll_offset={setScrollOffset()}>\n                        <Text size={isMobile ? 'xs' : 's'} weight='bold' align='center'>\n                            <Localize i18n_default_text='Your identity verification failed because:' />\n                        </Text>\n                        {(status?.error_msg || idv_failure?.failure_message) && (\n                            <HintBox\n                                className={clsx('proof-of-identity__failed-message', 'hint-box-layout')}\n                                icon='IcAlertDanger'\n                                message={\n                                    <Text as='p' size={isMobile ? 'xxs' : 'xs'} data-testid={mismatch_status}>\n                                        {status?.error_msg ?? idv_failure?.failure_message}\n                                    </Text>\n                                }\n                                is_danger\n                            />\n                        )}\n                        {is_document_upload_required && (\n                            <div>\n                                <Text size='xs' align={isMobile ? 'left' : 'center'}>\n                                    <Localize i18n_default_text='Let’s try again. Choose another document and enter the corresponding details.' />\n                                </Text>\n                                <FormSubHeader title={localize('Identity verification')} />\n                                <IDVForm selected_country={chosen_country} class_name='idv-layout idv-resubmit' />\n                                {!shouldSkipIdv(values?.document_type?.id) && (\n                                    <FormSubHeader title={localize('Details')} />\n                                )}\n                            </div>\n                        )}\n                        {!shouldSkipIdv(values?.document_type?.id) && (\n                            <PersonalDetailsForm\n                                class_name='account-form__poi-confirm-example_container'\n                                editable_fields={values.confirmation_checkbox ? [] : rest_state?.changeable_fields}\n                                is_rendered_for_idv\n                                side_note={idv_failure?.side_note_image}\n                                inline_note_text={idv_failure?.inline_note_text}\n                                mismatch_status={mismatch_status}\n                            />\n                        )}\n                    </FormBody>\n                    <FormFooter className='proof-of-identity__footer'>\n                        <Button\n                            className='proof-of-identity__submit-button'\n                            type='submit'\n                            has_effect\n                            is_disabled={!dirty || isSubmitting || !isValid}\n                            text={buttonText(shouldSkipIdv(values?.document_type?.id))}\n                            large\n                            primary\n                        />\n                    </FormFooter>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default IdvFailed;\n","import IdvRejected from './idv-failed';\n\nexport default IdvRejected;\n","import React from 'react';\nimport { formatIDVError, WS, IDV_ERROR_STATUS, POIContext, isIDVReportNotAvailable } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport CountrySelector from '../../../Components/poi/poi-country-selector';\nimport IdvDocumentSubmit from '../../../Components/poi/idv-document-submit';\nimport IdvFailed from '../../../Components/poi/idv-status/idv-failed';\nimport IdvSubmitComplete from '../../../Components/poi/idv-status/idv-submit-complete';\nimport Unsupported from '../../../Components/poi/status/unsupported';\nimport UploadComplete from '../../../Components/poi/status/upload-complete';\nimport OnfidoSdkViewContainer from './onfido-sdk-view-container';\nimport { identity_status_codes, submission_status_code, service_code } from './proof-of-identity-utils';\n\nconst POISubmission = observer(\n    ({\n        allow_poi_resubmission,\n        has_require_submission,\n        height,\n        identity_last_attempt,\n        idv,\n        is_from_external,\n        is_idv_disallowed,\n        needs_poa,\n        onfido,\n        onStateChange,\n        redirect_button,\n        residence_list,\n        should_show_mismatch_form,\n    }) => {\n        const {\n            submission_service,\n            setSubmissionService,\n            submission_status,\n            setSubmissionStatus,\n            selected_country,\n            setSelectedCountry,\n        } = React.useContext(POIContext);\n\n        const { client, notifications } = useStore();\n\n        const { account_settings, getChangeableFields, account_status } = client;\n        const { refreshNotifications } = notifications;\n        const is_high_risk = account_status.risk_classification === 'high';\n\n        const handleSelectionNext = (should_show_manual = false) => {\n            if (Object.keys(selected_country).length) {\n                const { submissions_left: idv_submissions_left } = idv;\n                const { submissions_left: onfido_submissions_left } = onfido;\n                const is_idv_supported = selected_country.identity.services.idv.is_country_supported;\n                const is_onfido_supported =\n                    selected_country.identity.services.onfido.is_country_supported && selected_country.value !== 'ng';\n\n                if (!should_show_manual && is_idv_supported && Number(idv_submissions_left) > 0 && !is_idv_disallowed) {\n                    setSubmissionService(service_code.idv);\n                } else if (!should_show_manual && Number(onfido_submissions_left) > 0 && is_onfido_supported) {\n                    setSubmissionService(service_code.onfido);\n                } else {\n                    setSubmissionService(service_code.manual);\n                }\n                setSubmissionStatus(submission_status_code.submitting);\n            }\n        };\n\n        const handleViewComplete = () => {\n            if (onStateChange && typeof onStateChange === 'function') {\n                onStateChange(identity_status_codes.pending);\n            }\n            setSubmissionStatus(submission_status_code.complete);\n\n            WS.authorized.getAccountStatus().then(() => {\n                refreshNotifications();\n            });\n        };\n\n        const handleBack = () => setSubmissionStatus(submission_status_code.selecting);\n\n        const getCountryFromResidence = React.useCallback(\n            country_code => residence_list.find(residence => residence.value === country_code),\n            [residence_list]\n        );\n\n        const needs_resubmission = has_require_submission || allow_poi_resubmission;\n        const is_report_not_available = isIDVReportNotAvailable(idv);\n        const mismatch_status = formatIDVError(idv.last_rejected, idv.status, is_high_risk, is_report_not_available);\n\n        const setIdentityService = React.useCallback(\n            identity_last_attempt => {\n                const { service, country_code } = identity_last_attempt;\n                setSelectedCountry(getCountryFromResidence(country_code));\n                switch (service) {\n                    case service_code.idv:\n                    case service_code.onfido: {\n                        if (Number(idv.submissions_left) > 0 || Number(onfido.submissions_left) > 0) {\n                            setSubmissionStatus(submission_status_code.selecting);\n                        } else {\n                            setSubmissionService(service_code.manual);\n                            setSubmissionStatus(submission_status_code.submitting);\n                        }\n                        break;\n                    }\n                    case service_code.manual: {\n                        setSubmissionService(service_code.manual);\n                        setSubmissionStatus(submission_status_code.submitting);\n                        break;\n                    }\n                    default:\n                        break;\n                }\n            },\n            [\n                getCountryFromResidence,\n                idv.submissions_left,\n                onfido.submissions_left,\n                setSelectedCountry,\n                setSubmissionService,\n                setSubmissionStatus,\n                is_idv_disallowed,\n            ]\n        );\n\n        React.useEffect(() => {\n            if (submission_status != submission_status_code.selecting) {\n                return;\n            }\n            if (needs_resubmission && identity_last_attempt) {\n                setIdentityService(identity_last_attempt);\n            } else if (\n                mismatch_status &&\n                [\n                    IDV_ERROR_STATUS.DobMismatch.code,\n                    IDV_ERROR_STATUS.NameMismatch.code,\n                    IDV_ERROR_STATUS.NameDobMismatch.code,\n                ].includes(mismatch_status) &&\n                idv.submissions_left > 0\n            ) {\n                setSubmissionService(service_code.idv);\n                setSubmissionStatus(submission_status_code.submitting);\n            } else {\n                setSubmissionStatus(submission_status_code.selecting);\n            }\n        }, [\n            allow_poi_resubmission,\n            identity_last_attempt,\n            needs_resubmission,\n            setIdentityService,\n            submission_status,\n            idv,\n            mismatch_status,\n            setSubmissionService,\n            setSubmissionStatus,\n        ]);\n\n        switch (submission_status) {\n            case submission_status_code.selecting: {\n                return (\n                    <CountrySelector\n                        handleSelectionNext={handleSelectionNext}\n                        is_from_external={is_from_external}\n                        mismatch_status={mismatch_status}\n                    />\n                );\n            }\n\n            case submission_status_code.submitting: {\n                switch (submission_service) {\n                    case service_code.idv:\n                        return should_show_mismatch_form ? (\n                            <IdvFailed\n                                account_settings={account_settings}\n                                getChangeableFields={getChangeableFields}\n                                mismatch_status={mismatch_status}\n                                residence_list={residence_list}\n                                handleSubmit={handleViewComplete}\n                                latest_status={identity_last_attempt}\n                                selected_country={selected_country}\n                                handleSelectionNext={handleSelectionNext}\n                                report_available={!!idv?.report_available}\n                            />\n                        ) : (\n                            <IdvDocumentSubmit\n                                handleSelectionNext={handleSelectionNext}\n                                handleViewComplete={handleViewComplete}\n                                handleBack={handleBack}\n                                selected_country={selected_country}\n                            />\n                        );\n                    case service_code.onfido: {\n                        const country_code = selected_country.value;\n                        const doc_obj = selected_country.identity.services.onfido.documents_supported;\n                        const documents_supported = Object.keys(doc_obj).map(d => doc_obj[d].display_name);\n                        return (\n                            <OnfidoSdkViewContainer\n                                country_code={country_code}\n                                documents_supported={documents_supported}\n                                getChangeableFields={getChangeableFields}\n                                handleViewComplete={handleViewComplete}\n                                height={height}\n                            />\n                        );\n                    }\n                    case service_code.manual:\n                        return (\n                            <Unsupported\n                                country_code={selected_country.value}\n                                is_from_external={is_from_external}\n                                allow_poi_resubmission={allow_poi_resubmission}\n                                handleViewComplete={handleViewComplete}\n                                onfido={onfido}\n                                handleBack={handleBack}\n                                is_resubmission={needs_resubmission}\n                            />\n                        );\n                    default:\n                        return null;\n                }\n            }\n            case submission_status_code.complete: {\n                switch (submission_service) {\n                    case service_code.idv:\n                        return (\n                            <IdvSubmitComplete\n                                is_from_external={is_from_external}\n                                mismatch_status={mismatch_status}\n                                needs_poa={needs_poa}\n                                redirect_button={redirect_button}\n                            />\n                        );\n                    // This will be replaced in the next Manual Upload Project\n                    case service_code.manual:\n                        return (\n                            <UploadComplete\n                                is_from_external={is_from_external}\n                                needs_poa={needs_poa}\n                                redirect_button={redirect_button}\n                                is_manual_upload\n                            />\n                        );\n                    case service_code.onfido:\n                        return (\n                            <UploadComplete\n                                is_from_external={is_from_external}\n                                needs_poa={needs_poa}\n                                redirect_button={redirect_button}\n                            />\n                        );\n                    default:\n                        return null;\n                }\n            }\n            default:\n                return null;\n        }\n    }\n);\n\nexport default POISubmission;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Loading } from '@deriv/components';\nimport { isEmptyObject, WS, getPlatformRedirect, platforms } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { identity_status_codes, service_code } from './proof-of-identity-utils';\nimport DemoMessage from '../../../Components/demo-message';\nimport ErrorMessage from '../../../Components/error-component';\nimport Expired from '../../../Components/poi/status/expired';\nimport IdvContainer from './idv.jsx';\nimport Limited from '../../../Components/poi/status/limited';\nimport { Localize } from '@deriv/translations';\nimport NotRequired from '../../../Components/poi/status/not-required';\nimport Onfido from './onfido.jsx';\nimport POISubmission from './proof-of-identity-submission.jsx';\nimport Unsupported from '../../../Components/poi/status/unsupported';\nimport UploadComplete from '../../../Components/poi/status/upload-complete';\nimport Verified from '../../../Components/poi/status/verified';\nimport { populateVerificationStatus } from '../Helpers/verification';\n\nconst ProofOfIdentityContainer = observer(\n    ({ height, is_from_external, onStateChange, getChangeableFields, updateAccountStatus }) => {\n        const history = useHistory();\n        const [api_error, setAPIError] = React.useState();\n        const [has_require_submission, setHasRequireSubmission] = React.useState(false);\n        const [residence_list, setResidenceList] = React.useState([]);\n        const [is_status_loading, setStatusLoading] = React.useState(true);\n\n        const { client, common, notifications } = useStore();\n\n        const {\n            account_settings,\n            account_status,\n            fetchResidenceList,\n            is_switching,\n            is_high_risk,\n            is_withdrawal_lock,\n            should_allow_authentication,\n            is_virtual,\n        } = client;\n        const { app_routing_history, routeBackInApp, is_language_changing } = common;\n        const { refreshNotifications } = notifications;\n\n        const from_platform = getPlatformRedirect(app_routing_history);\n\n        const should_show_redirect_btn = Object.keys(platforms).includes(from_platform?.ref);\n\n        const routeBackTo = redirect_route => routeBackInApp(history, [redirect_route]);\n        const handleRequireSubmission = () => setHasRequireSubmission(true);\n        const country_code = account_settings?.citizen || account_settings?.country_code;\n\n        const handleManualSubmit = () => {\n            WS.authorized.getAccountStatus().then(() => {\n                refreshNotifications();\n            });\n        };\n\n        const loadResidenceList = React.useCallback(() => {\n            fetchResidenceList().then(response_residence_list => {\n                if (response_residence_list.error) {\n                    setAPIError(response_residence_list.error);\n                } else {\n                    setResidenceList(response_residence_list.residence_list);\n                }\n            });\n        }, [fetchResidenceList]);\n\n        React.useEffect(() => {\n            if (is_language_changing) {\n                loadResidenceList();\n            }\n        }, [is_language_changing, loadResidenceList]);\n\n        React.useEffect(() => {\n            // only re-mount logic when switching is done\n            if (!is_switching) {\n                setAPIError(null);\n                WS.authorized.getAccountStatus().then(response_account_status => {\n                    if (response_account_status.error) {\n                        setAPIError(response_account_status.error);\n                        setStatusLoading(false);\n                        return;\n                    }\n                    loadResidenceList();\n                    setStatusLoading(false);\n                });\n            }\n        }, [loadResidenceList, is_switching]);\n\n        if (api_error) {\n            return <ErrorMessage error_message={api_error?.message || api_error} />;\n        } else if (is_status_loading || is_switching || isEmptyObject(account_status) || residence_list.length === 0) {\n            /**\n             * Display loader while waiting for the account status and residence list to be populated\n             */\n            return <Loading is_fullscreen={false} />;\n        } else if (is_virtual) {\n            return <DemoMessage />;\n        }\n\n        const verification_status = populateVerificationStatus(account_status);\n        const {\n            identity,\n            idv,\n            allow_poi_resubmission,\n            identity_last_attempt,\n            identity_status,\n            is_age_verified,\n            is_idv_disallowed,\n            manual,\n            needs_poa,\n            onfido,\n            poi_expiring_soon,\n        } = verification_status;\n        const should_ignore_idv = is_high_risk && is_withdrawal_lock;\n\n        if (!should_allow_authentication && !is_age_verified && !poi_expiring_soon) {\n            return <NotRequired />;\n        }\n        const onClickRedirectButton = () => {\n            const platform = platforms[from_platform.ref];\n            const { is_hard_redirect = false, url = '' } = platform ?? {};\n            if (is_hard_redirect) {\n                window.location.href = url;\n                window.sessionStorage.removeItem('config.platform');\n            } else {\n                routeBackTo(from_platform.route);\n            }\n        };\n\n        const redirect_button = should_show_redirect_btn && (\n            <Button primary className='proof-of-identity__redirect' onClick={onClickRedirectButton}>\n                <Localize\n                    i18n_default_text='Back to {{platform_name}}'\n                    values={{ platform_name: from_platform.name }}\n                />\n            </Button>\n        );\n        const should_show_mismatch_form =\n            identity_status != identity_status_codes.verified &&\n            idv.submissions_left > 0 &&\n            [identity_status_codes.rejected, identity_status_codes.suspected, identity_status_codes.expired].includes(\n                idv.status\n            );\n\n        if (\n            identity_status === identity_status_codes.none ||\n            has_require_submission ||\n            allow_poi_resubmission ||\n            should_show_mismatch_form ||\n            poi_expiring_soon\n        ) {\n            return (\n                <POISubmission\n                    account_settings={account_settings}\n                    allow_poi_resubmission={allow_poi_resubmission}\n                    has_require_submission={has_require_submission}\n                    height={height ?? null}\n                    getChangeableFields={getChangeableFields}\n                    identity_last_attempt={identity_last_attempt}\n                    idv={idv}\n                    is_from_external={!!is_from_external}\n                    is_idv_disallowed={is_idv_disallowed || should_ignore_idv}\n                    manual={manual}\n                    needs_poa={needs_poa}\n                    onfido={onfido}\n                    onStateChange={onStateChange}\n                    redirect_button={redirect_button}\n                    refreshNotifications={refreshNotifications}\n                    residence_list={residence_list}\n                    updateAccountStatus={updateAccountStatus}\n                    should_show_mismatch_form={should_show_mismatch_form}\n                />\n            );\n        } else if (\n            !identity_last_attempt ||\n            // Prioritise verified status from back office. How we know this is if there is mismatch between current statuses (Should be refactored)\n\n            (identity_status === identity_status_codes.verified &&\n                identity_status !== identity?.services[identity_last_attempt?.service].status)\n        ) {\n            switch (identity_status) {\n                case identity_status_codes.pending:\n                    return (\n                        <UploadComplete\n                            is_from_external={!!is_from_external}\n                            needs_poa={needs_poa}\n                            redirect_button={redirect_button}\n                            is_manual_upload={manual?.status === 'pending'}\n                        />\n                    );\n                case identity_status_codes.verified:\n                    return (\n                        <Verified\n                            is_from_external={!!is_from_external}\n                            needs_poa={needs_poa}\n                            redirect_button={redirect_button}\n                            service={identity_last_attempt?.service}\n                        />\n                    );\n                case identity_status_codes.expired:\n                    return (\n                        <Expired\n                            is_from_external={!!is_from_external}\n                            redirect_button={redirect_button}\n                            handleRequireSubmission={handleRequireSubmission}\n                        />\n                    );\n                case identity_status_codes.rejected:\n                case identity_status_codes.suspected:\n                    return <Limited handleRequireSubmission={handleRequireSubmission} />;\n                default:\n                    break;\n            }\n        }\n\n        switch (identity_last_attempt.service) {\n            case service_code.idv:\n                return (\n                    <IdvContainer\n                        account_settings={account_settings}\n                        handleRequireSubmission={handleRequireSubmission}\n                        getChangeableFields={getChangeableFields}\n                        idv={idv}\n                        is_from_external={!!is_from_external}\n                        needs_poa={needs_poa}\n                        redirect_button={redirect_button}\n                        residence_list={residence_list}\n                    />\n                );\n            case service_code.onfido:\n                return (\n                    <Onfido\n                        handleRequireSubmission={handleRequireSubmission}\n                        is_from_external={!!is_from_external}\n                        needs_poa={needs_poa}\n                        onfido={onfido}\n                        manual={manual}\n                        redirect_button={redirect_button}\n                        country_code={country_code}\n                        handleViewComplete={handleManualSubmit}\n                    />\n                );\n            case service_code.manual:\n                return (\n                    <Unsupported\n                        manual={manual}\n                        country_code={country_code}\n                        is_from_external={is_from_external}\n                        needs_poa={needs_poa}\n                        redirect_button={redirect_button}\n                        handleRequireSubmission={handleRequireSubmission}\n                        handleViewComplete={handleManualSubmit}\n                        onfido={onfido}\n                    />\n                );\n            default:\n                return null;\n        }\n    }\n);\n\nexport default ProofOfIdentityContainer;\n","import React from 'react';\nimport { Div100vhContainer } from '@deriv/components';\nimport { isDesktop } from '@deriv/shared';\nimport ProofOfAddressContainer from '@deriv/account/src/Sections/Verification/ProofOfAddress/proof-of-address-container';\nimport ProofOfIdentityContainer from '@deriv/account/src/Sections/Verification/ProofOfIdentity/proof-of-identity-container';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TVerificationModalContent = {\n    onFinish: () => void;\n};\n\ntype TItemsState = {\n    body: typeof ProofOfIdentityContainer | typeof ProofOfAddressContainer;\n};\n\nconst VerificationModalContent = observer((props: TVerificationModalContent) => {\n    const [step, setStep] = React.useState(0);\n    const [form_error, setFormError] = React.useState('');\n    const state_index = step;\n    let is_mounted = React.useRef(true).current;\n\n    const { client, notifications } = useStore();\n\n    const { authentication_status, fetchStatesList } = client;\n    const { refreshNotifications } = notifications;\n\n    const poi_config: TItemsState = {\n        body: ProofOfIdentityContainer,\n    };\n\n    const poa_config: TItemsState = {\n        body: ProofOfAddressContainer,\n    };\n\n    const should_show_poi = !['pending', 'verified'].includes(authentication_status.identity_status);\n    const should_show_poa = !['pending', 'verified'].includes(authentication_status.document_status);\n\n    const verification_configs = [...(should_show_poi ? [poi_config] : []), ...(should_show_poa ? [poa_config] : [])];\n\n    const [items, setItems] = React.useState<TItemsState[]>(verification_configs);\n\n    const clearError = () => {\n        setFormError('');\n    };\n\n    React.useEffect(() => {\n        refreshNotifications();\n    }, [items, refreshNotifications]);\n\n    React.useEffect(() => {\n        fetchStatesList();\n    }, [fetchStatesList]);\n\n    const unmount = () => {\n        is_mounted = false;\n        props.onFinish();\n    };\n\n    const saveFormData = () => {\n        if (!is_mounted) return; // avoiding state update on unmounted component\n        const cloned_items: TItemsState[] = [...items];\n        setItems(cloned_items);\n    };\n\n    const nextStep = () => {\n        clearError();\n        if (step + 1 < items.length) {\n            saveFormData();\n            setStep(step + 1);\n        } else unmount();\n    };\n\n    const prevStep = () => {\n        if (step - 1 >= 0) {\n            setStep(step - 1);\n            setFormError('');\n        } else unmount();\n    };\n\n    const getCurrent = (key?: keyof TItemsState) => {\n        return key ? items[state_index][key] : items[state_index];\n    };\n\n    const onStateChange = () => {\n        saveFormData();\n        nextStep();\n    };\n\n    const BodyComponent = getCurrent('body');\n\n    return (\n        <Div100vhContainer\n            className='proof-of-identity'\n            id='verification_modal_content'\n            is_disabled={isDesktop()}\n            height_offset='40px'\n        >\n            <div className='proof-of-identity__main-container' data-testid='dt_verification_modal_body'>\n                <BodyComponent\n                    index={state_index}\n                    onSubmit={nextStep}\n                    onStateChange={onStateChange}\n                    height='auto'\n                    onCancel={prevStep}\n                    onSave={saveFormData}\n                    form_error={form_error}\n                />\n            </div>\n        </Div100vhContainer>\n    );\n});\n\nexport default VerificationModalContent;\n","import verificationModal from './verification-modal';\n\nexport default verificationModal;\n","import React from 'react';\nimport { DesktopWrapper, MobileDialog, MobileWrapper, Modal, UILoader } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport VerificationModalContent from './verification-modal-content';\n\nimport './verification-modal.scss';\nimport { localize } from '@deriv/translations';\n\nconst VerificationModal = observer(() => {\n    const { ui, client } = useStore();\n    const { authentication_status } = client;\n    const { is_verification_modal_visible, setIsVerificationModalVisible, setIsVerificationSubmitted } = ui;\n\n    const should_show_poi = !['pending', 'verified'].includes(authentication_status.identity_status);\n    const should_show_poa = !['pending', 'verified'].includes(authentication_status.document_status);\n\n    let modal_title;\n\n    if (should_show_poi && should_show_poa) {\n        modal_title = localize('Submit your proof of identity and address');\n    } else if (should_show_poi && !should_show_poa) {\n        modal_title = localize('Submit your proof of identity');\n    } else {\n        modal_title = localize('Submit your proof of address');\n    }\n\n    return (\n        <React.Suspense fallback={<UILoader />}>\n            <DesktopWrapper>\n                <Modal\n                    className='verification-modal'\n                    is_open={is_verification_modal_visible}\n                    title={modal_title}\n                    toggleModal={() => setIsVerificationModalVisible(false)}\n                    height='70rem'\n                    width='99.6rem'\n                    exit_classname='verification-modal--custom-exit'\n                >\n                    <VerificationModalContent\n                        onFinish={() => {\n                            setIsVerificationModalVisible(false);\n                            setIsVerificationSubmitted(true);\n                        }}\n                    />\n                </Modal>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <MobileDialog\n                    portal_element_id='deriv_app'\n                    title={modal_title}\n                    wrapper_classname='verification-modal'\n                    visible={is_verification_modal_visible}\n                    onClose={() => setIsVerificationModalVisible(false)}\n                >\n                    <VerificationModalContent\n                        onFinish={() => {\n                            setIsVerificationModalVisible(false);\n                            setIsVerificationSubmitted(true);\n                        }}\n                    />\n                </MobileDialog>\n            </MobileWrapper>\n        </React.Suspense>\n    );\n});\n\nexport default VerificationModal;\n","import DocumentUploader from '@binary-com/binary-document-uploader';\nimport { useMutation } from '@deriv/api';\nimport { WS, compressImageFiles, readFiles } from '@deriv/shared';\nimport { useCallback, useMemo, useState } from 'react';\n\ntype TSettingsPayload = Partial<Parameters<ReturnType<typeof useMutation<'document_upload'>>['mutate']>[0]['payload']>;\n\ntype TFile =\n    | Partial<\n          TSettingsPayload & {\n              filename: File['name'];\n              buffer: FileReader['result'];\n              documentFormat: string;\n              file_size: File['size'];\n          }\n      >\n    | {\n          message: string;\n      };\n\ntype TUploaderResponse = {\n    [key: string]: unknown;\n    message?: string;\n    warning?: string;\n};\nconst fileReadErrorMessage = (filename: string) => {\n    return `Unable to read file ${filename}`;\n};\n\n/**\n * Custom hook to handle file uploading with the binary-document-uploader package\n */\nconst useFileUploader = () => {\n    const [error, setError] = useState<unknown>(null);\n    const uploader_instance = useMemo(() => new DocumentUploader({ connection: WS.getSocket() }), []);\n\n    const upload = useCallback(\n        async (files: File[], settings?: TSettingsPayload, onError?: () => void) => {\n            if (!files?.length) return Promise.reject(new Error('No files selected'));\n\n            return new Promise<{\n                message?: string;\n                warning?: string;\n                [key: string]: unknown;\n            }>((resolve, reject) => {\n                let is_any_file_error = false;\n                let file_error: string | null = null;\n\n                (async () => {\n                    try {\n                        const compressed_files: Blob[] = await compressImageFiles(files);\n                        const processed_files: TFile[] = await readFiles(\n                            compressed_files,\n                            fileReadErrorMessage,\n                            settings ?? {}\n                        );\n                        processed_files.forEach(file => {\n                            if (file && 'message' in file) {\n                                is_any_file_error = true;\n                                file_error = file.message;\n                                reject(file.message);\n                            }\n                        });\n                        if (is_any_file_error || !processed_files.length) {\n                            onError?.();\n                            return reject(new Error(file_error ?? 'Something went wrong!')); // don't start submitting files until all front-end validation checks pass\n                        }\n\n                        // send files\n                        const response: TUploaderResponse = await uploader_instance.upload(processed_files[0]);\n                        resolve(response);\n                    } catch (error: unknown) {\n                        setError(error);\n                        reject(error);\n                    }\n                })();\n            });\n        },\n        [uploader_instance]\n    );\n\n    return {\n        /**\n         * Error message from the file uploader\n         */\n        error,\n        /**\n         * Uploads a file to the server with the binary-document-uploader package after compressing and reading the file with meta data\n         */\n        upload,\n        /**\n         * Instance of the binary-document-uploader\n         */\n        uploader_instance,\n    };\n};\n\nexport default useFileUploader;\n","import React from 'react';\nimport { useMutation } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\n\ntype TNotificationEventPayload = TSocketRequestPayload<'notification_event'>['payload'];\n\n/**\n * Hook to send notification event to the server\n * @name useNotificationEvent\n * @returns response, mutation function and other properties from useRequest hook\n */\nconst useNotificationEvent = () => {\n    const { data, mutate, ...rest } = useMutation('notification_event');\n\n    /**\n     * Function to send notification event to the server\n     * @param payload - notification event payload\n     */\n    const send = React.useCallback((payload: TNotificationEventPayload) => mutate({ payload }), [mutate]);\n\n    return {\n        notification_event: data?.notification_event,\n        send,\n        ...rest,\n    };\n};\n\nexport default useNotificationEvent;\n","import { useQuery } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\n\ntype TServiceTokenPayload = TSocketRequestPayload<'service_token'>['payload'];\n\n/**\n * Hook to get the service token for using 3rd party SDK\n * @name useServiceToken\n * @param payload to be sent while making the API call\n * @returns response and its status\n */\nconst useServiceToken = (payload: TServiceTokenPayload) => {\n    const { data, ...rest } = useQuery('service_token', {\n        payload,\n        options: { retry: 3, enabled: Boolean(payload) },\n    });\n\n    return {\n        service_token: data?.service_token,\n        ...rest,\n    };\n};\n\nexport default useServiceToken;\n"],"names":["_ref","children","className","full_width","icon","is_disabled_for_mobile","message","text","isDesktop","useDevice","_jsx","Div100vhContainer","clsx","is_disabled","height_offset","_jsxs","Text","as","color","weight","align","size","useAuthorize","current_token","getActiveAuthTokenIDFromLocalStorage","invalidate","useInvalidateQuery","switchEnvironment","queryClient","useAPIContext","currentLoginID","setCurrentLoginID","useState","getActiveLoginIDFromLocalStorage","_useQuery","useQuery","payload","authorize","options","enabled","Boolean","refetchOnWindowFocus","refetchOnReconnect","data","rest","_objectWithoutProperties","_excluded","modified_authorize","useMemo","_objectSpread","switchAccount","useCallback","loginid","active_loginid","sessionStorage","setItem","localStorage","cancelQueries","useResidenceList","residence_list_rest","modified_residence_list","residence_list","map","residence","useSettings","isSuccess","_useMutation","useMutation","onSuccess","mutate","mutate_rest","_excluded2","update","modified_settings","_data$get_settings$ci","_data$get_settings","_data$get_settings$ac","_data$get_settings2","_data$get_settings$pl","_data$get_settings3","_data$get_settings$ta","_data$get_settings4","_data$get_settings$ta2","_data$get_settings5","citizenship","get_settings","citizen","account","account_opening_reason","placeofbirth","place_of_birth","taxResidence","tax_residence","taxIdentificationnumber","tax_identification_number","has_submitted_personal_details","mutation","onClick","IconMessageContent","Localize","i18n_default_text","components","Icon","Button","has_effect","primary","NotRequired","localize","error_message","LeaveConfirmMessage","back","leave","isMobile","data_testid","type","secondary","large","TransitionBlockerWithRouter","withRouter","_ref2","dirty","onDirty","history","useHistory","location","useLocation","showModal","setShowModal","React","nextLocation","setNextLocation","pathname","unblock","block","push","_Fragment","Modal","is_open","small","toggleModal","Body","_ref3","FormikConsumer","formik","submitCount","API_ERROR_CODES","Object","freeze","DUPLICATE_ACCOUNT","CLAIMED_DOCUMENT","DUPLICATE_DOCUMENT","UploadMessage","onFileDrop","onError","document_files","setDocumentFiles","file_error","setFileError","FileDropzone","accept","supported_filetypes","filename_limit","hover_message","max_size","max_document_size","multiple","onDropAccepted","files","length","onDropRejected","is_file_too_large","file","supported_files","filter","each_file","getSupportedFiles","name","validation_error_message","value","removeFile","useKycAuthStatus","client","useStore","is_authorize","kyc_auth_status_rest","kyc_auth_status","getFileUploaderDescriptions","page","is_eu","proof_of_income_descriptions","title","descriptions","id","proof_of_address_descriptions","values","expiry_in_months","getSupportedProofOfAddressDocuments","examples","files_description","country_of_residence","placeholder","useTranslations","isLoading","country","document_list","setDocumentList","address","supported_documents","doc_list","doc","includes","Loading","is_fullscreen","Field","field","form","setFieldValue","Autocomplete","autoComplete","list_items","label","onItemSelection","item","required","FileUploader","line_height","ScrollbarsContainer","scroll_offset","isFullHeight","height_unit","ThemedScrollbars","is_bypassed","height","Fragment","CommonMistakeExamplePartials","description","image","LegacyLossIcon","iconSize","role","CommonMistakeExamples","example_images","DerivLightIcDocumentNameMismatchIcon","ref","DerivLightIcDocumentAddressMismatchIcon","DerivLightIcOldIssuedDocumentMoreThan6Icon","DerivLightIcOldIssuedDocumentMoreThan12Icon","DerivLightIcBlurryDocumentIcon","DerivLightIcCroppedDocumentIcon","DerivLightIcEnvelopeIcon","getExampleImagesConfig","config","observer","setOffset","is_for_cfd_modal","is_resubmit","form_state","status","handleSubmit","isSubmitting","isValid","useFormikContext","file_selection_error","setFileSelectionError","states_list","account_settings","getChangeableFields","changeable_fields","poa_uploader_files_descriptions","Form","noValidate","onSubmit","FormBody","msg","InlineMessage","FormSubHeader","title_text_size","PersonalDetailsForm","is_qualified_for_poa","editable_fields","FormBodySection","FileUploaderContainer","FilesDescription","country_code","Footer","has_separator","FormSubmitButton","is_loading","FormFooter","is_btn_loading","is_submit_success","ProgressBar","is_active","errors","step","setStep","isNextBtnDisabled","address_line_1","address_line_2","address_city","address_state","address_postcode","LabelPairedArrowLeftMdBoldIcon","prev_step","onSubmitForCFDModal","notifications","fetchResidenceList","fetchStatesList","addNotificationMessageByKey","addNotificationByKey","removeNotificationMessage","removeNotificationByKey","setIsLoading","form_values","setFormValues","api_initial_load_error","setAPIInitialLoadError","setFormState","should_allow_submit","should_show_form","should_scroll_to_top","setShouldScrollToTop","upload","useFileUploader","then","async","Promise","all","WS","wait","_account_settings$add","_account_settings$add2","_account_settings$add3","_account_settings$add4","_account_settings$add5","_el$parentElement","el","document","querySelector","target_element","parentElement","scrollIntoView","behavior","showForm","form_initial_values","document_type","LoadErrorMessage","current_value","getLocation","mobile_scroll_offset","Formik","initialValues","setStatus","setSubmitting","settings_values","setSettings","error","get_settings_response","authorized","storage","getSettings","selected_doc_type","find","api_response","warning","get_account_status_response","getAccountStatus","get_account_status","needs_verification","authentication","needs_poi","forEach","key","isServerError","validate","validateValues","val","address_line_1_validation_result","validAddress","is_required","is_ok","address_line_2_validation_result","validation_letter_symbol_message","validLetterSymbol","validAddressState","validLength","min","max","validPostCode","field_name","max_number","interpolation","escapeValue","enableReinitialize","validateOnMount","LeaveConfirm","undefined","POAMobileLayout","POADesktopLayout","button_label","route","ButtonLink","to","redirect_button","is_redirected_from_platform","isNavigationFromP2P","isNavigationFromDerivGO","RouteButton","routes","proof_of_identity","traders_hub","button_text","ContinueTradingButton","trade","PoiButton","Verified","populateVerificationStatus","account_status","attempts","identity","income","identity_status","document_status","income_status","allow_document_upload","some","allow_poi_resubmission","allow_poa_resubmission","allow_poinc_resubmission","is_age_verified","is_fully_authenticated","is_idv_disallowed","poa_address_mismatch","poi_expiring_soon","poa_authenticated_with_idv","poa_authenticated_with_idv_photo","poa_expiring_soon","poi_acknowledged","has_poa","has_poi","has_poinc","has_submitted_poa","needs_poa","needs_poinc","idv","onfido","manual","services","identity_last_attempt","latest","has_attempted_idv","h","service","_from_platform$ref","authentication_status","setAuthenticationStatus","resubmit_poa","has_submitted_duplicate_poa","common","ui","app_routing_history","has_restricted_mt5_account","is_switching","is_verification_modal_visible","refreshNotifications","mt5_poa_status","getItem","response","removeItem","handleResubmit","onSubmitDocument","from_platform","getPlatformRedirect","should_show_redirect_btn","keys","platforms","should_allow_resubmit","cashier_p2p","_platforms","url","window","href","platform_name","Unverified","handleDuplicatePOASubmission","Submitted","ProofOfAddressForm","getDocumentStatus","AUTH_STATUS_CODES","NONE","PENDING","VERIFIED","EXPIRED","Expired","REJECTED","SUSPECTED","identity_status_codes","none","pending","rejected","verified","expired","suspected","submission_status_code","service_code","has_button","has_any_real_account","has_real_account","toggleAccountsDialog","toggleShouldShowRealAccountsList","IconWithMessage","is_deriv_com","test","hostname","host","header","code","redirect_label","redirectOnClick","should_show_refresh","isTmbEnabled","useTMB","isTmbEnabledValue","setIsTmbEnabledValue","useEffect","tmbStatus","checkTmbStatus","refresh_message","Cookies","get","requestOidcAuthentication","redirectCallbackUri","origin","catch","err","console","PageError","messages","redirect_urls","redirect_labels","buttonOnClick","reload","handleRequireSubmission","is_from_external","setSubmissionStatus","POIContext","DerivLightExclamationPoiIcon","DEFAULT_BTN_TEXT","custom_text","class_name","proof_of_address","IdvSubmitComplete","mismatch_status","is_already_attempted","is_mismatch_error","IDV_ERROR_STATUS","NameDobMismatch","DobMismatch","NameMismatch","is_expired_or_failed_error","Failed","poa_button","PoaButton","DerivLightWaitingPoiIcon","getHeaderText","header_Text","DerivLightApprovedPoiIcon","submissions_left","last_rejected","formatIDVError","Number","IdvLimited","IdvVerified","POILimited","Chat","open","OnfidoNotRequired","UploadComplete","is_manual_upload","index","text_size","message_list","onContinue","ListItem","getOnfidoError","idx","rejected_reasons","IconMessageList","fileReadErrorMessage","filename","uploadFile","getSocket","settings","resolve","reject","uploader","DocumentUploader","connection","is_file_error","compressImageFiles","files_to_process","readFiles","processed_files","total_to_upload","GoToPersonalDetailsButton","anchor","from","from_string","anchor_string","has_invalid_postal_code","handleOnClick","GENERIC_ERROR_MESSAGE","DUPLICATE_ACCOUNT_ERROR_MESSAGE","onKeyDown","CLAIMED_DOCUMENT_ERROR_MESSAGE","generateIDVError","is_document_upload_required","latest_status","chosen_country","document_name","getIDVDocumentType","required_fields","side_note_image","DerivLightNamePoiIcon","width","inline_note_text","failure_message","DerivLightDobPoiIcon","DerivLightNameDobPoiIcon","getIDVError","onFormConfirm","checked","setChecked","rest_state","setRestState","show_form","first_name","last_name","date_of_birth","api_error","visible_settings","filterObjProperties","toMoment","format","e","initializeFormValues","_extends","_objectDestructuringEmpty","error_msg","request","makeSettingsRequest","_data$error","_response$get_setting","setTimeout","validateName","isEmptyObject","removeEmptyPropertiesFromObject","is_rendered_for_onfido","side_note","Checkbox","disabled","HintBox","is_danger","is_onfido_disabled","is_onfido_container_hidden","onfido_element_id","is_confirmed","is_onfido_initialized","is_status_message_visible","setIsStatusMessageVisible","transition_in_timeout_ref","transition_out_timeout_ref","current","clearTimeout","CSSTransition","appear","in","timeout","exit","classNames","unmountOnExit","is_info","OnfidoSdkViewContainer","_service_token$onfido3","documents_supported","handleViewComplete","is_default_enabled","setAPIError","missing_personal_details","setMissingPersonalDetails","setIsOnfidoDisabled","setIsConfirmed","setIsOnfidoInitialized","is_onfido_loaded","setIsOnfidoLoaded","send","isNotified","useNotificationEvent","current_language","onfido_country_code","convertAlpha2toAlpha3","token_country_code","convertAlpha3toAlpha2","service_token","isError","useServiceToken","onfido_init","onfido_documents","Array","isArray","d","display_name","component_to_load","onComplete","_onfido_init$current","tearDown","document_ids","_data","category","event","args","documents","initOnfido","Onfido","init","containerId","language","locale","getOnfidoSupportedLocaleCode","phrases","getOnfidoPhrases","mobilePhrases","token","useModal","useMemoryHistory","steps","documentTypes","passport","driving_licence","national_identity_card","hideCountrySelection","_message","loadOnfidoSdkScript","_document$getElementB","_document$getElementB2","getElementById","remove","script_node","createElement","link_node","src","rel","body","appendChild","addEventListener","onConfirm","_service_token$onfido","_service_token$onfido2","handleError","MissingPersonalDetails","ErrorMessage","PoiConfirmWithExampleFormContainer","OnfidoSdkView","displayName","ROOT_CLASS","DOCUMENT_TYPES","PAGE_TYPE","SELFIE_DOCUMENT","pageType","info","date_field","min_date","add","touched","Input","DatePicker","date_format","display_format","start_date","readOnly","DROPZONE_ERRORS","GENERAL","Message","medium","Preview","has_frame","handleChange","background_url","setBackgroundUrl","URL","createObjectURL","style","backgroundImage","indexOf","is_full","onChange","setImage","ValidationErrorMessage","_image$errors","_ref4","_value$errors","preview_single","handleAccept","handleReject","_files$0$errors","noClick","setInitialValues","fields","checkIsEmpty","trim","validateFields","arguments","icons","IconsItem","initial_values","goToCards","documents_title","is_expiry_date_required","fields_title","is_form_touched","is_form_empty","_fields$key","InputField","Uploader","goBack","setDocuments","selfie","setSelfie","is_selfie_upload","setIsSelfieUpload","SelfieUpload","DocumentsUpload","STATUS","IS_UPLOADING","IS_COMPLETED","IS_FAILED","onClickBack","root_class","country_code_key","handleComplete","is_onfido_supported","is_for_mt5","handlePOIforMT5Complete","props","response_error","setError","is_any_failed","docs","details","files_length","file_to_upload_index","results","uploadNext","_data$expiry_date","lifetime_valid","expiration_date","expiry_date","page_type","document_id","document_issuing_country","IS_DUPLICATE_UPLOAD","is_slow_loading","POIManualUploadFailed","OnfidoUpload","onfido_name","CardDetails","CardWithArrow","Documents","toggleDetail","_item$card","Card","renderContent","card","handleBack","is_resubmission","detail","setDetail","getDocumentIndex","Limited","has_nimc","checkNimcStep","DetailComponent","submission_errors","formatOnfidoError","Unsupported","RejectedReasons","_IDV_ERROR_STATUS$mis","_IDV_ERROR_STATUS$mis2","handleSelectionNext","setSelectedCountry","country_list","updateSelectedCountry","country_name","matching_country","c","failed_message","country_input","submitHandler","handleBlur","onBlur","current_input","target","_ref5","SelectNative","use_text","selected_country","IDV_NOT_APPLICABLE_OPTION","getIDVNotApplicableOption","shouldSkipIdv","example_format","document_number","confirmation_checkbox","document_additional","needs_additional_document","additional","isDocumentTypeValid","shouldHideHelperImage","isAdditionalDocumentValid","isDocumentNumberValid","_values$document_type","_get_settings$error$m","_get_settings$error","submit_data","identity_verification_document_add","formatIDVFormValues","idv_update_response","_idv_update_response$","_idv_update_response$2","_idv_update_response$3","_values$document_type2","_values$document_type3","_values$document_type4","should_skip_idv","is_button_disabled","IDVForm","is_rendered_for_idv","_rest_state$form_init","_rest_state$form_init2","setIsAlreadyAttempted","idv_failure","setIdvFailure","_residence_list$find","residence_data","_error_config$require","error_config","form_data","initial_form_values","sample_image","_e$error","prev_state","issuing_country","_idv_failure$required","_status$error_msg","_values$document_type5","is_idv_skipping","POISubmission","has_require_submission","onStateChange","should_show_mismatch_form","submission_service","setSubmissionService","submission_status","is_high_risk","risk_classification","should_show_manual","idv_submissions_left","onfido_submissions_left","is_idv_supported","is_country_supported","getCountryFromResidence","needs_resubmission","is_report_not_available","isIDVReportNotAvailable","setIdentityService","CountrySelector","IdvFailed","report_available","IdvDocumentSubmit","doc_obj","ProofOfIdentityContainer","updateAccountStatus","setHasRequireSubmission","setResidenceList","is_status_loading","setStatusLoading","is_withdrawal_lock","should_allow_authentication","is_virtual","routeBackInApp","is_language_changing","handleManualSubmit","loadResidenceList","response_residence_list","response_account_status","DemoMessage","verification_status","should_ignore_idv","onClickRedirectButton","platform","is_hard_redirect","redirect_route","IdvContainer","form_error","setFormError","state_index","is_mounted","poi_config","poa_config","ProofOfAddressContainer","verification_configs","items","setItems","unmount","onFinish","saveFormData","cloned_items","nextStep","BodyComponent","onCancel","prevStep","onSave","setIsVerificationModalVisible","setIsVerificationSubmitted","should_show_poi","should_show_poa","modal_title","fallback","UILoader","DesktopWrapper","exit_classname","VerificationModalContent","MobileWrapper","MobileDialog","portal_element_id","wrapper_classname","visible","onClose","uploader_instance","is_any_file_error","compressed_files","Error","notification_event","retry"],"sourceRoot":""}