{"version":3,"file":"js/core.dtrader-header.b4f14bb9ba6db15ece45.js","mappings":"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","sources":["webpack:///./App/Components/Layout/Header/toggle-menu-drawer-accounts-os.jsx","webpack:///../../account/src/Configs/get-status-badge-config.tsx","webpack:///./App/Containers/CurrencySelectionModal/currency/index.tsx","webpack:///./App/Containers/CurrencySelectionModal/curreny-selection-modal.tsx","webpack:///./App/Containers/CurrencySelectionModal/index.ts","webpack:///./App/Containers/Layout/header/header-account-actions.tsx","webpack:///./App/Containers/Layout/header/header-legacy.tsx","webpack:///../../hooks/src/useGetMFAccountStatus.ts","webpack:///../../hooks/src/useIsP2PEnabled.ts","webpack:///../../hooks/src/useMFAccountStatus.ts"],"sourcesContent":["import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { Div100vhContainer, Icon, MobileDrawer } from '@deriv/components';\nimport {\n    useAccountTransferVisible,\n    useAuthorize,\n    useIsP2PEnabled,\n    useOauth2,\n    useOnrampVisible,\n    useP2PSettings,\n    usePaymentAgentTransferVisible,\n} from '@deriv/hooks';\nimport { getOSNameWithUAParser, routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\nimport { Analytics } from '@deriv-com/analytics';\n\nimport getRoutesConfig from 'App/Constants/routes-config';\n\nimport MenuLink from './menu-link';\n\nconst ToggleMenuDrawerAccountsOS = observer(() => {\n    const { ui, client, modules } = useStore();\n    const {\n        disableApp,\n        enableApp,\n        is_mobile,\n        is_mobile_language_menu_open,\n        setMobileLanguageMenuOpen,\n        setIsForcedToExitPnv,\n    } = ui;\n    const {\n        account_status,\n        has_wallet,\n        is_authorize,\n        is_logged_in,\n        is_virtual,\n        logout: logoutClient,\n        should_allow_authentication,\n        should_allow_poinc_authentication,\n        landing_company_shortcode: active_account_landing_company,\n        is_proof_of_ownership_enabled,\n        is_passkey_supported,\n    } = client;\n    const { cashier } = modules;\n    const { payment_agent } = cashier;\n    const { is_payment_agent_visible } = payment_agent;\n    const is_account_transfer_visible = useAccountTransferVisible();\n    const { isSuccess } = useAuthorize();\n    const is_onramp_visible = useOnrampVisible();\n    const { data: is_payment_agent_transfer_visible } = usePaymentAgentTransferVisible();\n    const { is_p2p_enabled } = useIsP2PEnabled();\n\n    const { pathname: route } = useLocation();\n\n    const is_trading_hub_category =\n        route === routes.traders_hub || route.startsWith(routes.cashier) || route.startsWith(routes.account);\n\n    const [is_open, setIsOpen] = React.useState(false);\n    const [transitionExit, setTransitionExit] = React.useState(false);\n    const [primary_routes_config, setPrimaryRoutesConfig] = React.useState([]);\n\n    const timeout = React.useRef();\n    const history = useHistory();\n    const {\n        subscribe,\n        rest: { isSubscribed },\n        p2p_settings,\n    } = useP2PSettings();\n\n    React.useEffect(() => {\n        if (isSuccess && !isSubscribed && is_authorize) {\n            subscribe();\n        }\n    }, [isSuccess, p2p_settings, subscribe, isSubscribed, is_authorize]);\n\n    // Cleanup timeout on unmount or route change\n    React.useEffect(() => {\n        return () => {\n            if (timeout.current) {\n                clearTimeout(timeout.current);\n                setTransitionExit(false);\n                setIsOpen(false);\n            }\n        };\n    }, [route]);\n\n    React.useEffect(() => {\n        const processRoutes = () => {\n            const routes_config = getRoutesConfig();\n            setPrimaryRoutesConfig(getFilteredRoutesConfig(routes_config, [routes.account]));\n        };\n\n        if (account_status || should_allow_authentication) {\n            processRoutes();\n        }\n\n        return () => clearTimeout(timeout.current);\n    }, [\n        account_status,\n        should_allow_authentication,\n        has_wallet,\n        is_trading_hub_category,\n        is_mobile,\n        is_passkey_supported,\n        is_p2p_enabled,\n    ]);\n\n    const toggleDrawer = React.useCallback(() => {\n        if (is_mobile_language_menu_open) setMobileLanguageMenuOpen(false);\n        if (!is_open) setIsOpen(!is_open);\n        else {\n            setTransitionExit(true);\n            timeout.current = setTimeout(() => {\n                setIsOpen(false);\n                setTransitionExit(false);\n            }, 400);\n        }\n    }, [is_open, is_mobile_language_menu_open, setMobileLanguageMenuOpen]);\n\n    const handleLogout = React.useCallback(async () => {\n        toggleDrawer();\n        if (window.location.pathname.startsWith(routes.phone_verification)) {\n            setIsForcedToExitPnv(true);\n            // Add a small delay to ensure state is updated before navigation because adding await doesn't work here\n            await new Promise(resolve => setTimeout(resolve, 0));\n        }\n        history.push(routes.traders_hub);\n        await logoutClient();\n    }, [history, logoutClient, toggleDrawer]);\n\n    const { oAuthLogout } = useOauth2({ handleLogout });\n\n    const passkeysMenuOpenActionEventTrack = React.useCallback(() => {\n        Analytics.trackEvent('ce_passkey_account_settings_form', {\n            action: 'open',\n            form_name: 'ce_passkey_account_settings_form',\n            operating_system: getOSNameWithUAParser(),\n        });\n    }, []);\n\n    const getFilteredRoutesConfig = (all_routes_config, routes_to_filter) => {\n        const subroutes_config = all_routes_config.flatMap(i => i.routes || []);\n\n        return routes_to_filter\n            .map(path => all_routes_config.find(r => r.path === path) || subroutes_config.find(r => r.path === path))\n            .filter(route => route);\n    };\n\n    const getRoutesWithSubMenu = (route_config, idx) => {\n        const has_access = route_config.is_authenticated ? is_logged_in : true;\n        if (!has_access) return null;\n\n        if (!route_config.routes) {\n            return (\n                <MobileDrawer.Item key={idx}>\n                    <MenuLink\n                        link_to={route_config.path}\n                        icon={route_config.icon_component}\n                        text={route_config.getTitle()}\n                        onClickLink={toggleDrawer}\n                    />\n                </MobileDrawer.Item>\n            );\n        }\n\n        const has_subroutes = route_config.routes.some(route => route.subroutes);\n        const should_hide_passkeys_route = !is_mobile || !is_passkey_supported;\n\n        const disableRoute = route_path => {\n            if (/financial-assessment/.test(route_path)) {\n                return is_virtual;\n            } else if (/trading-assessment/.test(route_path)) {\n                return is_virtual || active_account_landing_company !== 'maltainvest';\n            } else if (/proof-of-address/.test(route_path) || /proof-of-identity/.test(route_path)) {\n                return !should_allow_authentication;\n            } else if (/proof-of-income/.test(route_path)) {\n                return !should_allow_poinc_authentication;\n            } else if (/proof-of-ownership/.test(route_path)) {\n                return is_virtual || !is_proof_of_ownership_enabled;\n            }\n            return false;\n        };\n\n        const hideRoute = route_path => {\n            if (/passkeys/.test(route_path)) {\n                return should_hide_passkeys_route;\n            } else if (/languages/.test(route_path)) {\n                return has_wallet;\n            }\n            return false;\n        };\n\n        return (\n            <React.Fragment key={idx}>\n                {!has_subroutes &&\n                    route_config.routes.map((route, index) => {\n                        if (\n                            !route.is_invisible &&\n                            (route.path !== routes.cashier_pa || is_payment_agent_visible) &&\n                            (route.path !== routes.cashier_pa_transfer || is_payment_agent_transfer_visible) &&\n                            (route.path !== routes.cashier_p2p || is_p2p_enabled) &&\n                            (route.path !== routes.cashier_onramp || is_onramp_visible) &&\n                            (route.path !== routes.cashier_acc_transfer || is_account_transfer_visible)\n                        ) {\n                            return (\n                                <MobileDrawer.Item key={index}>\n                                    <MenuLink\n                                        link_to={route.path}\n                                        icon={route.icon_component}\n                                        text={route.getTitle()}\n                                        onClickLink={toggleDrawer}\n                                    />\n                                </MobileDrawer.Item>\n                            );\n                        }\n                        return undefined;\n                    })}\n                {has_subroutes &&\n                    route_config.routes.map((route, index) => {\n                        return route.subroutes ? (\n                            <MobileDrawer.SubMenuSection\n                                key={index}\n                                section_icon={route.icon}\n                                section_title={route.getTitle()}\n                            >\n                                {route.subroutes.map((subroute, subindex) => (\n                                    <MenuLink\n                                        key={subindex}\n                                        is_disabled={disableRoute(subroute.path) || subroute.is_disabled}\n                                        link_to={subroute.path}\n                                        text={subroute.getTitle()}\n                                        onClickLink={() => {\n                                            toggleDrawer();\n                                            if (subroute.path === routes.passkeys) {\n                                                passkeysMenuOpenActionEventTrack();\n                                            }\n                                        }}\n                                        is_hidden={hideRoute(subroute.path)}\n                                    />\n                                ))}\n                            </MobileDrawer.SubMenuSection>\n                        ) : (\n                            <MobileDrawer.Item key={index}>\n                                <MenuLink\n                                    link_to={route.path}\n                                    icon={route.icon_component}\n                                    text={route.getTitle()}\n                                    onClickLink={toggleDrawer}\n                                />\n                            </MobileDrawer.Item>\n                        );\n                    })}\n            </React.Fragment>\n        );\n    };\n    return (\n        <React.Fragment>\n            <a id='dt_mobile_drawer_toggle' onClick={toggleDrawer} className='header__mobile-drawer-toggle'>\n                <Icon icon='IcHamburger' width='16px' height='16px' className='header__mobile-drawer-icon' />\n            </a>\n            <MobileDrawer\n                alignment='left'\n                icon_class='header__menu-toggle'\n                is_open={is_open}\n                transitionExit={transitionExit}\n                toggle={toggleDrawer}\n                id='dt_mobile_drawer'\n                enableApp={enableApp}\n                disableApp={disableApp}\n                title={<div>{localize('Account settings')}</div>}\n                height='100vh'\n                width='295px'\n                className='pre-appstore'\n            >\n                <Div100vhContainer height_offset='40px'>\n                    <div className='header__menu-mobile-body-wrapper'>\n                        <React.Fragment>\n                            <MobileDrawer.Body className='tradershub-os-header'>\n                                <div className='header__menu-mobile-platform-switcher' id='mobile_platform_switcher' />\n                                {primary_routes_config.map((route_config, idx) =>\n                                    getRoutesWithSubMenu(route_config, idx)\n                                )}\n                                {is_logged_in && (\n                                    <MobileDrawer.Item onClick={oAuthLogout} className='dc-mobile-drawer__item'>\n                                        <MenuLink icon='IcLogout' text={localize('Log out')} />\n                                    </MobileDrawer.Item>\n                                )}\n                            </MobileDrawer.Body>\n                        </React.Fragment>\n                    </div>\n                </Div100vhContainer>\n            </MobileDrawer>\n        </React.Fragment>\n    );\n});\n\nToggleMenuDrawerAccountsOS.displayName = 'ToggleMenuDrawerAccountsOS';\n\nexport default ToggleMenuDrawerAccountsOS;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { ACCOUNT_BADGE_STATUS, MT5_ACCOUNT_STATUS, TAccountBadgeStatus, TRADING_PLATFORM_STATUS } from '@deriv/shared';\nimport { Localize } from '@deriv-com/translations';\n\nconst getStatusBadgeConfig = (account_status: TAccountBadgeStatus) => {\n    const BadgeTextComponent = <Text key={0} weight='bold' size='xxxs' color='warning' />;\n\n    switch (account_status) {\n        case ACCOUNT_BADGE_STATUS.PENDING:\n            return {\n                text: <Localize i18n_default_text='In review' />,\n                icon: 'IcMt5Pending',\n            };\n        case ACCOUNT_BADGE_STATUS.FAILED:\n            return {\n                text: <Localize i18n_default_text='Failed' />,\n                icon: 'IcMt5Failed',\n                icon_size: '18',\n            };\n        case ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION:\n            return {\n                text: <Localize i18n_default_text='Needs Verification' />,\n                icon: 'IcMt5Verification',\n                icon_size: '18',\n            };\n        case MT5_ACCOUNT_STATUS.UNDER_MAINTENANCE:\n            return {\n                text: <Localize i18n_default_text='<0>Server maintenance</0>' components={[BadgeTextComponent]} />,\n                icon: 'IcAlertWarning',\n            };\n        case TRADING_PLATFORM_STATUS.UNAVAILABLE:\n            return {\n                text: <Localize i18n_default_text='<0>Temporarily unavailable</0>' components={[BadgeTextComponent]} />,\n                icon: 'IcAlertWarning',\n            };\n        default:\n            return {\n                text: '',\n                icon: '',\n            };\n    }\n};\n\nexport default getStatusBadgeConfig;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { capitalizeFirstLetter } from '@deriv/shared';\nimport { IconProps } from '../types';\n\n// TODO: This probably can be moved somewhere else.\nexport type Currency =\n    | 'AUD'\n    | 'BCH'\n    | 'BTC'\n    | 'BUSD'\n    | 'DAI'\n    | 'ETH'\n    | 'EURCHECK'\n    | 'EUR'\n    | 'EURS'\n    | 'EUSDT'\n    | 'GBP'\n    | 'IDK'\n    | 'LTC'\n    | 'PAX'\n    | 'TUSD'\n    | 'TUSDT'\n    | 'UNKNOWN'\n    | 'USD'\n    | 'USDC'\n    | 'USDK'\n    | 'UST'\n    | 'VIRTUAL';\n\nconst CurrencyIcon = ({ icon, ...props }: IconProps<Currency>) => {\n    return <Icon icon={`IcCurrency${capitalizeFirstLetter(icon.toLowerCase())}`} {...props} />;\n};\n\nexport default CurrencyIcon;\n","import React from 'react';\nimport getStatusBadgeConfig from '@deriv/account/src/Configs/get-status-badge-config';\nimport { Button, Icon, Modal, Money, StatusBadge, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getCurrencyName, startPerformanceEventTimer } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport CurrencyIcon from './currency';\nimport { AccountListDetail } from './types';\nimport classNames from 'classnames';\nimport { useHasSetCurrency, useMFAccountStatus } from '@deriv/hooks';\n\ntype CurrencySelectionModalProps = {\n    is_visible: boolean;\n};\n\nconst CurrencySelectionModal = observer(({ is_visible }: CurrencySelectionModalProps) => {\n    const { client, traders_hub, ui } = useStore();\n    const {\n        account_list,\n        accounts,\n        switchAccount,\n        has_any_real_account,\n        account_status,\n        loginid: current_loginid,\n    } = client;\n    const { closeModal, selected_region } = traders_hub;\n    const { openRealAccountSignup, toggleSetCurrencyModal } = ui;\n\n    const mf_account_status = useMFAccountStatus();\n\n    const { text: badge_text, icon: badge_icon } = getStatusBadgeConfig(mf_account_status);\n\n    const hasSetCurrency = useHasSetCurrency();\n    let timeout: ReturnType<typeof setTimeout>;\n\n    return (\n        <Modal is_open={is_visible} toggleModal={closeModal} width='422px' height='422px'>\n            <div className='currency-selection-modal__header'>\n                <Text line-height='m' weight='bold'>\n                    {localize('Select account')}\n                </Text>\n                <Icon className='close-icon' icon='IcCross' onClick={() => closeModal()} />\n            </div>\n            <div className='currency-selection-modal__body'>\n                {(account_list as AccountListDetail[])\n                    .filter(\n                        acc =>\n                            !!acc.is_disabled === false &&\n                            ((!acc.is_virtual && selected_region === 'Non-EU' && acc.loginid.startsWith('CR')) ||\n                                (selected_region === 'EU' && acc.loginid.startsWith('MF')))\n                    )\n                    .map(({ icon, loginid }) => {\n                        const { balance, currency } = accounts[loginid];\n                        const is_selected = current_loginid === loginid;\n                        return (\n                            <div\n                                key={loginid}\n                                className={classNames('currency-item-card', {\n                                    'currency-item-card--active': is_selected,\n                                })}\n                                onClick={async () => {\n                                    if (loginid !== current_loginid) {\n                                        startPerformanceEventTimer('switch_currency_accounts_time');\n                                        await switchAccount(loginid);\n                                    }\n                                    closeModal();\n                                }}\n                            >\n                                <CurrencyIcon\n                                    className='currency-item-card__icons'\n                                    icon={currency ? icon : 'UNKNOWN'}\n                                    size={32}\n                                />\n                                <div className='currency-item-card__details'>\n                                    <Text size='xs'>{getCurrencyName(currency)}</Text>\n                                    <Text color={is_selected ? 'prominent' : 'less-prominent'} size='xxs'>\n                                        {loginid}\n                                    </Text>\n                                </div>\n                                <div className='currency-item-card__balance'>\n                                    {mf_account_status ? (\n                                        <StatusBadge\n                                            account_status={mf_account_status}\n                                            icon={badge_icon}\n                                            text={badge_text}\n                                        />\n                                    ) : (\n                                        <Text size='xs' color='prominent'>\n                                            <Money amount={balance} currency={currency} show_currency />\n                                        </Text>\n                                    )}\n                                </div>\n                            </div>\n                        );\n                    })}\n            </div>\n            <div className='currency-selection-modal__bottom-controls'>\n                <Button\n                    className='block-button'\n                    onClick={() => {\n                        clearTimeout(timeout);\n                        timeout = setTimeout(() => {\n                            if (has_any_real_account && !hasSetCurrency) {\n                                toggleSetCurrencyModal();\n                            } else openRealAccountSignup('manage');\n                        }, 500);\n                        closeModal();\n                    }}\n                    secondary\n                    large\n                >\n                    {localize('Add or manage account')}\n                </Button>\n            </div>\n        </Modal>\n    );\n});\n\nexport default CurrencySelectionModal;\n","import CurrencySelectionModal from './curreny-selection-modal';\nimport './currency-selection-modal.scss';\n\nexport default CurrencySelectionModal;\n","import React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport { AccountActions } from 'App/Components/Layout/Header';\n\ntype THeaderAccountActions = {\n    onClickDeposit: () => void;\n    is_traders_hub_routes: boolean;\n};\n\nconst HeaderAccountActions = observer(({ onClickDeposit, is_traders_hub_routes }: THeaderAccountActions) => {\n    const { client, ui, notifications } = useStore();\n    const { account_type, balance, currency, is_eu, is_logged_in, is_virtual } = client;\n    const {\n        account_switcher_disabled_message,\n        disableApp,\n        enableApp,\n        is_account_switcher_disabled,\n        is_accounts_switcher_on,\n        openRealAccountSignup,\n        toggleAccountsDialog,\n    } = ui;\n    const { is_notifications_visible, notifications: notifications_array, toggleNotificationsModal } = notifications;\n    const filtered_notifications = notifications_array.filter(item => !item.only_toast_message);\n    return (\n        <div id='dt_core_header_acc-info-container' className='acc-info__container'>\n            <AccountActions\n                acc_switcher_disabled_message={account_switcher_disabled_message}\n                account_type={account_type}\n                balance={balance}\n                currency={currency}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                is_acc_switcher_on={is_accounts_switcher_on}\n                is_acc_switcher_disabled={is_account_switcher_disabled}\n                is_eu={is_eu}\n                is_notifications_visible={is_notifications_visible}\n                is_logged_in={is_logged_in}\n                is_traders_hub_routes={is_traders_hub_routes}\n                is_virtual={is_virtual}\n                onClickDeposit={onClickDeposit}\n                notifications_count={filtered_notifications.length}\n                toggleAccountsDialog={toggleAccountsDialog}\n                toggleNotifications={toggleNotificationsModal}\n                openRealAccountSignup={openRealAccountSignup}\n            />\n        </div>\n    );\n});\n\nexport default HeaderAccountActions;\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { platforms, routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { useDevice } from '@deriv-com/ui';\nimport { MenuLinks, PlatformSwitcher } from 'App/Components/Layout/Header';\nimport { AccountsInfoLoader } from 'App/Components/Layout/Header/Components/Preloader';\nimport ToggleMenuDrawer from 'App/Components/Layout/Header/toggle-menu-drawer.jsx';\nimport ToggleMenuDrawerAccountsOS from 'App/Components/Layout/Header/toggle-menu-drawer-accounts-os.jsx';\nimport platform_config from 'App/Constants/platform-config';\nimport NewVersionNotification from 'App/Containers/new-version-notification.jsx';\nimport RealAccountSignup from 'App/Containers/RealAccountSignup';\nimport CurrencySelectionModal from 'App/Containers/CurrencySelectionModal';\nimport SetAccountCurrencyModal from 'App/Containers/SetAccountCurrencyModal';\nimport DerivShortLogo from './deriv-short-logo';\nimport HeaderAccountActions from './header-account-actions';\nimport TradersHubHomeButton from './traders-hub-home-button';\n\nconst HeaderLegacy = observer(() => {\n    const { client, common, ui, notifications, traders_hub } = useStore();\n    const {\n        currency,\n        has_any_real_account,\n        is_bot_allowed,\n        is_dxtrade_allowed,\n        is_logged_in,\n        is_logging_in,\n        is_single_logging_in,\n        is_mt5_allowed,\n        is_virtual,\n        is_switching,\n    } = client;\n    const { app_routing_history, current_language, platform, is_from_tradershub_os } = common;\n    const { header_extension, is_app_disabled, is_route_modal_on, toggleReadyToDepositModal, is_real_acc_signup_on } =\n        ui;\n    const { addNotificationMessage, client_notifications, removeNotificationMessage } = notifications;\n    const { setTogglePlatformType, modal_data } = traders_hub;\n\n    const { isDesktop } = useDevice();\n\n    const history = useHistory();\n    const { pathname } = useLocation();\n\n    const traders_hub_routes =\n        [routes.traders_hub].includes(pathname) ||\n        [routes.account, routes.settings, routes.wallets_compare_accounts, routes.compare_cfds].some(route =>\n            pathname.startsWith(route)\n        );\n\n    const addUpdateNotification = () => addNotificationMessage(client_notifications?.new_version_available);\n    const removeUpdateNotification = React.useCallback(\n        () => removeNotificationMessage({ key: 'new_version_available' }),\n        [removeNotificationMessage]\n    );\n\n    React.useEffect(() => {\n        document.addEventListener('IgnorePWAUpdate', removeUpdateNotification);\n        return () => document.removeEventListener('IgnorePWAUpdate', removeUpdateNotification);\n    }, [removeUpdateNotification]);\n\n    const handleClickCashier = () => {\n        if (!has_any_real_account && is_virtual) {\n            toggleReadyToDepositModal();\n        } else {\n            history.push(routes.cashier_deposit);\n        }\n    };\n\n    const filterPlatformsForClients = (payload: typeof platform_config) =>\n        payload.filter(config => {\n            if (config.link_to === routes.mt5) {\n                return !is_logged_in || is_mt5_allowed;\n            }\n            if (config.link_to === routes.dxtrade) {\n                return is_dxtrade_allowed;\n            }\n            if (config.link_to === routes.bot || config.href === routes.smarttrader) {\n                return is_bot_allowed;\n            }\n            return true;\n        });\n\n    return (\n        <header\n            className={classNames('header', {\n                'header--is-disabled': is_app_disabled || is_route_modal_on,\n                'header--is-hidden': platforms[platform] && !is_from_tradershub_os,\n                'header--tradershub_os_mobile': is_logged_in && is_from_tradershub_os && !isDesktop,\n                'header--tradershub_os_desktop': is_logged_in && is_from_tradershub_os && isDesktop,\n            })}\n        >\n            <div className='header__menu-items'>\n                <div className='header__menu-left'>\n                    {isDesktop ? (\n                        <React.Fragment>\n                            <DerivShortLogo />\n                            <div className='header__divider' />\n                            <TradersHubHomeButton />\n                        </React.Fragment>\n                    ) : (\n                        <React.Fragment>\n                            {is_from_tradershub_os ? (\n                                <>\n                                    <ToggleMenuDrawerAccountsOS\n                                        platform_config={filterPlatformsForClients(platform_config)}\n                                    />\n                                    <DerivShortLogo />\n                                </>\n                            ) : (\n                                <>\n                                    <ToggleMenuDrawer platform_config={filterPlatformsForClients(platform_config)} />\n                                    <DerivShortLogo />\n                                    {header_extension && is_logged_in && (\n                                        <div className='header__menu-left-extensions'>{header_extension}</div>\n                                    )}\n                                </>\n                            )}\n                        </React.Fragment>\n                    )}\n                    <MenuLinks is_traders_hub_routes={traders_hub_routes} />\n                    {isDesktop && !traders_hub_routes && !location.pathname.includes(routes.cashier) && (\n                        <PlatformSwitcher\n                            app_routing_history={app_routing_history}\n                            platform_config={filterPlatformsForClients(platform_config)}\n                            setTogglePlatformType={setTogglePlatformType}\n                            current_language={current_language}\n                        />\n                    )}\n                </div>\n\n                <div\n                    className={classNames('header__menu-right', {\n                        'header__menu-right--hidden': !isDesktop && is_logging_in,\n                    })}\n                >\n                    {is_logging_in || is_single_logging_in || is_switching ? (\n                        <div\n                            id='dt_core_header_acc-info-preloader'\n                            className={classNames('acc-info__preloader', {\n                                'acc-info__preloader--no-currency': !currency,\n                            })}\n                        >\n                            <AccountsInfoLoader\n                                is_logged_in={is_logged_in}\n                                is_desktop={isDesktop}\n                                speed={3}\n                                is_traders_hub_routes={traders_hub_routes}\n                            />\n                        </div>\n                    ) : (\n                        !is_from_tradershub_os && (\n                            <HeaderAccountActions\n                                onClickDeposit={handleClickCashier}\n                                is_traders_hub_routes={traders_hub_routes}\n                            />\n                        )\n                    )}\n                </div>\n            </div>\n            {is_real_acc_signup_on && <RealAccountSignup />}\n            <SetAccountCurrencyModal />\n            <CurrencySelectionModal is_visible={modal_data.active_modal === 'currency_selection'} />\n            <NewVersionNotification onUpdate={addUpdateNotification} />\n        </header>\n    );\n});\n\nexport default HeaderLegacy;\n","import { useEffect } from 'react';\n\nimport { ACCOUNT_BADGE_STATUS, routes } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\n\nconst useGetMFAccountStatus = () => {\n    const { client } = useStore();\n    const { account_status, is_logged_in, updateAccountStatus } = client || {};\n\n    useEffect(() => {\n        async function fetchData() {\n            if (is_logged_in && (!account_status || !window.location.pathname.startsWith(routes.trade)))\n                await updateAccountStatus();\n        }\n        fetchData();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const authentication = account_status?.authentication;\n    const poi_status = authentication?.identity?.status;\n    const onfido_status = authentication?.identity?.services?.onfido?.status;\n    const manual_status = authentication?.identity?.services?.manual?.status;\n    const poa_status = authentication?.document?.status;\n\n    const STATUS = {\n        NONE: 'none',\n        VERIFIED: 'verified',\n        PENDING: 'pending',\n        REJECTED: 'rejected',\n        EXPIRED: 'expired',\n        SUSPECTED: 'suspected',\n    } as const;\n    const failed_cases = [STATUS.REJECTED, STATUS.EXPIRED, STATUS.SUSPECTED];\n\n    //@ts-expect-error we can ignore this error since we are checking the status and returning true or false\n    const need_poa_resubmission = poa_status && failed_cases.includes(poa_status);\n    const poa_pending = poa_status === STATUS.PENDING;\n    const poa_not_submitted = poa_status === STATUS.NONE;\n\n    const poi_verified_by_onfido_or_manual = [onfido_status, manual_status].includes(STATUS.VERIFIED);\n    const poi_pending_by_onfido_or_manual =\n        [onfido_status, manual_status].includes(STATUS.PENDING) && !poi_verified_by_onfido_or_manual;\n\n    const poi_not_submitted_by_onfido_or_manual = [onfido_status, manual_status].every(\n        status => status === STATUS.NONE\n    );\n    const need_poi_submission = !poi_pending_by_onfido_or_manual && !poi_verified_by_onfido_or_manual;\n\n    const need_poi_resubmission = !poi_not_submitted_by_onfido_or_manual && need_poi_submission;\n    const is_verified = poi_status === STATUS.VERIFIED && poa_status === STATUS.VERIFIED;\n\n    const getMFAccountStatus = () => {\n        if (poa_status && onfido_status && manual_status) {\n            if (need_poi_resubmission || need_poa_resubmission) {\n                return ACCOUNT_BADGE_STATUS.FAILED;\n            } else if (poi_not_submitted_by_onfido_or_manual || poa_not_submitted) {\n                return ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION;\n            } else if (poi_pending_by_onfido_or_manual || poa_pending) {\n                return ACCOUNT_BADGE_STATUS.PENDING;\n            }\n            return null;\n        }\n        return null;\n    };\n    const getVerificationStatus = () => (!is_verified ? { poi_status, poa_status, valid_tin: 1, required_tin: 1 } : {});\n\n    return {\n        mf_account_status: getMFAccountStatus(),\n        kyc_status: getVerificationStatus(),\n    };\n};\n\nexport default useGetMFAccountStatus;\n","import React from 'react';\nimport Cookies from 'js-cookie';\nimport { deriv_urls } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport useP2PSettings from './useP2PSettings';\n\nconst useIsP2PEnabled = () => {\n    const {\n        p2p_settings,\n        rest: { isLoading, isSubscribed },\n    } = useP2PSettings();\n    const { client, traders_hub } = useStore();\n    // Todo: to replace it with useAuthorize hook\n    const { currency, email, is_virtual, loginid, setIsP2PEnabled } = client;\n    const { is_low_risk_cr_eu_real } = traders_hub;\n\n    const is_p2p_supported_currency = Boolean(\n        p2p_settings?.supported_currencies?.includes(currency.toLocaleLowerCase())\n    );\n    const is_p2p_enabled = is_p2p_supported_currency && !is_virtual && !is_low_risk_cr_eu_real;\n\n    // Todo: should replace with the next line instead once BE is fixed.\n    // const is_p2p_enabled = data?.disabled === 0;\n\n    React.useEffect(() => {\n        setIsP2PEnabled(is_p2p_enabled);\n\n        if (email && loginid) {\n            const domain = /deriv\\.(com|me|be)/.test(window.location.hostname)\n                ? deriv_urls.DERIV_HOST_NAME\n                : window.location.hostname;\n\n            Cookies.set('is_p2p_disabled', (!is_p2p_enabled).toString(), { domain, secure: true, sameSite: 'none' });\n        }\n    }, [email, is_p2p_enabled, loginid, setIsP2PEnabled]);\n\n    return {\n        is_p2p_enabled,\n        is_p2p_enabled_loading: isLoading,\n        is_p2p_enabled_success: isSubscribed,\n    };\n};\n\nexport default useIsP2PEnabled;\n","import { ACCOUNT_BADGE_STATUS } from '@deriv/shared';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\nimport useGetMFAccountStatus from './useGetMFAccountStatus';\nimport { useStore } from '@deriv/stores';\n\nconst useMFAccountStatus = () => {\n    const {\n        client: { is_eu },\n    } = useStore();\n    const has_malta_invest_account = useHasMaltaInvestAccount();\n    const { mf_account_status } = useGetMFAccountStatus();\n\n    const should_show_status_for_multipliers_account =\n        is_eu &&\n        has_malta_invest_account &&\n        mf_account_status &&\n        [ACCOUNT_BADGE_STATUS.PENDING, ACCOUNT_BADGE_STATUS.FAILED, ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION].includes(\n            mf_account_status\n        );\n    return should_show_status_for_multipliers_account ? mf_account_status : null;\n};\n\nexport default useMFAccountStatus;\n"],"names":["ToggleMenuDrawerAccountsOS","observer","ui","client","modules","useStore","disableApp","enableApp","is_mobile","is_mobile_language_menu_open","setMobileLanguageMenuOpen","setIsForcedToExitPnv","account_status","has_wallet","is_authorize","is_logged_in","is_virtual","logout","logoutClient","should_allow_authentication","should_allow_poinc_authentication","landing_company_shortcode","active_account_landing_company","is_proof_of_ownership_enabled","is_passkey_supported","cashier","payment_agent","is_payment_agent_visible","is_account_transfer_visible","useAccountTransferVisible","isSuccess","useAuthorize","is_onramp_visible","useOnrampVisible","data","is_payment_agent_transfer_visible","usePaymentAgentTransferVisible","is_p2p_enabled","useIsP2PEnabled","pathname","route","useLocation","is_trading_hub_category","routes","traders_hub","startsWith","account","is_open","setIsOpen","React","transitionExit","setTransitionExit","primary_routes_config","setPrimaryRoutesConfig","timeout","history","useHistory","subscribe","rest","isSubscribed","p2p_settings","useP2PSettings","current","clearTimeout","processRoutes","routes_config","getRoutesConfig","getFilteredRoutesConfig","toggleDrawer","setTimeout","handleLogout","async","window","location","phone_verification","Promise","resolve","push","oAuthLogout","useOauth2","passkeysMenuOpenActionEventTrack","Analytics","trackEvent","action","form_name","operating_system","getOSNameWithUAParser","all_routes_config","routes_to_filter","subroutes_config","flatMap","i","map","path","find","r","filter","_jsxs","children","_jsx","id","onClick","className","Icon","icon","width","height","MobileDrawer","alignment","icon_class","toggle","title","localize","Div100vhContainer","height_offset","Body","route_config","idx","getRoutesWithSubMenu","is_authenticated","Item","MenuLink","link_to","icon_component","text","getTitle","onClickLink","has_subroutes","some","subroutes","should_hide_passkeys_route","hideRoute","route_path","test","index","is_invisible","cashier_pa","cashier_pa_transfer","cashier_p2p","cashier_onramp","cashier_acc_transfer","SubMenuSection","section_icon","section_title","subroute","subindex","is_disabled","passkeys","is_hidden","displayName","BadgeTextComponent","Text","weight","size","color","ACCOUNT_BADGE_STATUS","PENDING","Localize","i18n_default_text","FAILED","icon_size","NEEDS_VERIFICATION","MT5_ACCOUNT_STATUS","UNDER_MAINTENANCE","components","TRADING_PLATFORM_STATUS","UNAVAILABLE","_ref","props","_objectWithoutProperties","_excluded","_objectSpread","capitalizeFirstLetter","toLowerCase","is_visible","account_list","accounts","switchAccount","has_any_real_account","loginid","current_loginid","closeModal","selected_region","openRealAccountSignup","toggleSetCurrencyModal","mf_account_status","useMFAccountStatus","badge_text","badge_icon","getStatusBadgeConfig","hasSetCurrency","useHasSetCurrency","Modal","toggleModal","acc","_ref2","balance","currency","is_selected","classNames","startPerformanceEventTimer","CurrencyIcon","getCurrencyName","StatusBadge","Money","amount","show_currency","Button","secondary","large","onClickDeposit","is_traders_hub_routes","notifications","account_type","is_eu","account_switcher_disabled_message","is_account_switcher_disabled","is_accounts_switcher_on","toggleAccountsDialog","is_notifications_visible","notifications_array","toggleNotificationsModal","filtered_notifications","item","only_toast_message","AccountActions","acc_switcher_disabled_message","is_acc_switcher_on","is_acc_switcher_disabled","notifications_count","length","toggleNotifications","common","is_bot_allowed","is_dxtrade_allowed","is_logging_in","is_single_logging_in","is_mt5_allowed","is_switching","app_routing_history","current_language","platform","is_from_tradershub_os","header_extension","is_app_disabled","is_route_modal_on","toggleReadyToDepositModal","is_real_acc_signup_on","addNotificationMessage","client_notifications","removeNotificationMessage","setTogglePlatformType","modal_data","isDesktop","useDevice","traders_hub_routes","includes","settings","wallets_compare_accounts","compare_cfds","removeUpdateNotification","key","document","addEventListener","removeEventListener","filterPlatformsForClients","payload","config","mt5","dxtrade","bot","href","smarttrader","platforms","DerivShortLogo","TradersHubHomeButton","_Fragment","platform_config","ToggleMenuDrawer","MenuLinks","PlatformSwitcher","AccountsInfoLoader","is_desktop","speed","HeaderAccountActions","handleClickCashier","cashier_deposit","RealAccountSignup","SetAccountCurrencyModal","CurrencySelectionModal","active_modal","NewVersionNotification","onUpdate","addUpdateNotification","new_version_available","useGetMFAccountStatus","_authentication$ident","_authentication$ident2","_authentication$ident3","_authentication$docum","updateAccountStatus","useEffect","trade","fetchData","authentication","poi_status","identity","status","onfido_status","services","onfido","manual_status","manual","poa_status","STATUS","need_poa_resubmission","poa_pending","poa_not_submitted","poi_verified_by_onfido_or_manual","poi_pending_by_onfido_or_manual","poi_not_submitted_by_onfido_or_manual","every","is_verified","kyc_status","valid_tin","required_tin","_p2p_settings$support","isLoading","email","setIsP2PEnabled","is_low_risk_cr_eu_real","Boolean","supported_currencies","toLocaleLowerCase","domain","hostname","deriv_urls","DERIV_HOST_NAME","Cookies","toString","secure","sameSite","is_p2p_enabled_loading","is_p2p_enabled_success","has_malta_invest_account","useHasMaltaInvestAccount"],"sourceRoot":""}