{"version":3,"file":"js/core.account-info.6d2015ce04203312db38.js","mappings":"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","sources":["webpack:///./App/Containers/AccountSwitcher/account-switcher-account-list.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-account-wrapper.jsx","webpack:///./App/Containers/AccountSwitcher/helpers/account-helper.js","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Containers/AccountSwitcher/index.js","webpack:///./App/Containers/AccountSwitcher/account-switcher-mobile.jsx","webpack:///./App/Components/Layout/Header/account-info-icon.tsx","webpack:///./App/Components/Layout/Header/display-account-type.tsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Money, Button, Text } from '@deriv/components';\nimport { formatMoney, getCurrencyName, getCFDAccountDisplay, getCurrencyDisplayCode, isBot } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\n\nconst AccountList = ({\n    balance,\n    currency,\n    currency_icon,\n    display_type,\n    has_balance,\n    has_error,\n    has_reset_balance,\n    is_dark_mode_on,\n    is_disabled,\n    is_virtual,\n    is_eu,\n    product,\n    loginid,\n    market_type,\n    redirectAccount,\n    onClickResetVirtualBalance,\n    selected_loginid,\n    server,\n    shortcode,\n    sub_account_type,\n    platform,\n    should_show_server_name,\n}) => {\n    const currency_badge = currency ? currency_icon : 'IcCurrencyUnknown';\n    return (\n        <React.Fragment>\n            <div\n                id={`dt_${loginid}`}\n                className={classNames('acc-switcher__account', {\n                    'acc-switcher__account--selected': loginid === selected_loginid,\n                    'acc-switcher__account--disabled': is_disabled,\n                })}\n                onClick={() => {\n                    if (!is_disabled) redirectAccount();\n                }}\n            >\n                <span className='acc-switcher__id'>\n                    <Icon\n                        icon={is_virtual ? 'IcCurrencyVirtual' : currency_badge}\n                        className={'acc-switcher__id-icon'}\n                        size={24}\n                    />\n                    <span>\n                        {display_type === 'currency' ? (\n                            <CurrencyDisplay currency={currency} loginid={loginid} is_virtual={is_virtual} />\n                        ) : (\n                            <AccountDisplay\n                                is_eu={is_eu}\n                                market_type={market_type}\n                                server={server}\n                                sub_account_type={sub_account_type}\n                                has_error={has_error}\n                                platform={platform}\n                                product={product}\n                                is_dark_mode_on={is_dark_mode_on}\n                                shortcode={shortcode}\n                                should_show_server_name={should_show_server_name}\n                            />\n                        )}\n                        <div\n                            className={classNames('acc-switcher__loginid-text', {\n                                'acc-switcher__loginid-text--disabled': has_error,\n                            })}\n                        >\n                            {loginid}\n                        </div>\n                    </span>\n                    {has_reset_balance ? (\n                        <Button\n                            is_disabled={is_disabled}\n                            onClick={e => {\n                                e.stopPropagation();\n                                onClickResetVirtualBalance();\n                            }}\n                            className='acc-switcher__reset-account-btn'\n                            secondary\n                            small\n                        >\n                            {localize('Reset balance')}\n                        </Button>\n                    ) : (\n                        has_balance && (\n                            <Text\n                                size='xs'\n                                color='prominent'\n                                styles={{ fontWeight: 'inherit' }}\n                                className='acc-switcher__balance'\n                            >\n                                {currency && (\n                                    <Money\n                                        currency={getCurrencyDisplayCode(currency)}\n                                        amount={formatMoney(currency, balance, true)}\n                                        should_format={false}\n                                        show_currency\n                                    />\n                                )}\n                            </Text>\n                        )\n                    )}\n                </span>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst CurrencyDisplay = ({ currency, loginid, is_virtual }) => {\n    const account_type = loginid.replace(/\\d/g, '');\n\n    if (account_type === 'MF') {\n        return <Localize i18n_default_text='Multipliers' />;\n    }\n\n    if (is_virtual) {\n        return <Localize i18n_default_text='Demo' />;\n    }\n\n    if (!currency) {\n        return <Localize i18n_default_text='No currency assigned' />;\n    }\n\n    return getCurrencyName(currency);\n};\n\nconst AccountDisplay = ({\n    has_error,\n    market_type,\n    sub_account_type,\n    platform,\n    server,\n    product,\n    is_dark_mode_on,\n    is_eu,\n    shortcode,\n    should_show_server_name,\n}) => {\n    const account_title = getCFDAccountDisplay({ market_type, sub_account_type, platform, is_eu, shortcode, product });\n    // TODO: Remove once account with error has market_type and sub_account_type in details response\n    const getServerName = React.useCallback(account => {\n        if (account) {\n            const server_region = account.server_info?.geolocation?.region;\n            if (server_region) {\n                return `${server_region} ${\n                    account?.server_info?.geolocation?.sequence === 1 ? '' : account?.server_info?.geolocation?.sequence\n                }`;\n            }\n        }\n        return '';\n    }, []);\n    if (has_error)\n        return (\n            <div>\n                <Text color='disabled' size='xs'>\n                    <Localize i18n_default_text='Unavailable' />\n                </Text>\n                {server?.server_info?.geolocation &&\n                    should_show_server_name &&\n                    market_type === 'synthetic' &&\n                    shortcode === 'svg' && (\n                        <Text color='less-prominent' size='xxs' className='badge-server badge-server--disabled'>\n                            {getServerName(server)}\n                        </Text>\n                    )}\n            </div>\n        );\n\n    const is_bot = isBot();\n    return (\n        <div>\n            {/* TODO: Remove below condition once deriv x changes are completed */}\n            {platform === 'dxtrade' && account_title === localize('Derived') ? localize('Synthetic') : account_title}\n            {server?.server_info?.geolocation &&\n                should_show_server_name &&\n                market_type === 'synthetic' &&\n                shortcode === 'svg' && (\n                    <Text\n                        color={is_dark_mode_on ? 'general' : 'colored-background'}\n                        size='xxs'\n                        className={classNames('badge-server', {\n                            'badge-server-bot': is_bot,\n                        })}\n                    >\n                        {getServerName(server)}\n                    </Text>\n                )}\n        </div>\n    );\n};\n\nexport default AccountList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ContentExpander } from '@deriv/components';\n\nconst AccountWrapper = ({ children, header, is_visible, toggleVisibility }) => (\n    <ContentExpander\n        className='acc-switcher'\n        title={header}\n        is_expanded={is_visible}\n        onToggle={toggleVisibility}\n        is_title_spaced\n    >\n        {children}\n    </ContentExpander>\n);\n\nAccountWrapper.propTypes = {\n    children: PropTypes.node,\n    header: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    is_visible: PropTypes.bool,\n    toggleVisibility: PropTypes.func,\n};\n\nexport default AccountWrapper;\n","export const getSortedAccountList = (account_list, accounts) => {\n    // sort accounts as follows:\n    // highest balance first, then demo accounts last\n    return [...account_list].sort((a, b) => {\n        // Always put virtual (demo) accounts last\n        if (a.is_virtual || b.is_virtual) {\n            return a.is_virtual ? 1 : -1;\n        }\n\n        // For non-virtual accounts, sort by balance (highest first)\n        const a_balance = parseFloat(accounts[a.loginid].balance);\n        const b_balance = parseFloat(accounts[b.loginid].balance);\n\n        // Sort in descending order (higher balance first)\n        return b_balance - a_balance;\n    });\n};\n\nexport const getSortedCFDList = account_list => {\n    // for DXTrade, MT5, synthetic, financial, financial stp\n    return [...account_list].sort((a, b) => {\n        const a_is_demo = isDemo(a);\n        const b_is_demo = isDemo(b);\n\n        if (a_is_demo && !b_is_demo) {\n            return 1;\n        }\n        if (b_is_demo && !a_is_demo) {\n            return -1;\n        }\n        if (a.market_type === 'gaming' || a.market_type === 'synthetic') {\n            return -1;\n        }\n        if (a.sub_account_type === 'financial') {\n            return b.market_type === 'gaming' || b.market_type === 'synthetic' ? 1 : -1;\n        }\n        return 1;\n    });\n};\n\nexport const isDemo = account => account.account_type === 'demo';\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport {\n    Button,\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Icon,\n    Money,\n    Tabs,\n    ThemedScrollbars,\n    Text,\n    useOnClickOutside,\n    Loading,\n} from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { routes, formatMoney, ContentFlag } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { useHasSetCurrency } from '@deriv/hooks';\nimport { getAccountTitle } from 'App/Containers/RealAccountSignup/helpers/constants';\nimport { BinaryLink } from 'App/Components/Routes';\nimport AccountList from './account-switcher-account-list.jsx';\nimport AccountWrapper from './account-switcher-account-wrapper.jsx';\nimport { getSortedAccountList, getSortedCFDList, isDemo } from './helpers';\n\nconst AccountSwitcher = observer(({ history, is_mobile, is_visible }) => {\n    const { client, ui, traders_hub } = useStore();\n    const {\n        available_crypto_currencies,\n        loginid: account_loginid,\n        accounts,\n        account_type,\n        account_list,\n        currency,\n        is_eu,\n        is_landing_company_loaded,\n        is_low_risk,\n        is_high_risk,\n        is_logged_in,\n        is_virtual,\n        has_fiat,\n        mt5_login_list,\n        obj_total_balance,\n        switchAccount,\n        resetVirtualBalance,\n        has_active_real_account,\n        upgradeable_landing_companies,\n        real_account_creation_unlock_date,\n        has_any_real_account,\n        virtual_account_loginid,\n        has_maltainvest_account,\n    } = client;\n    const { show_eu_related_content, content_flag, selectRegion, setTogglePlatformType } = traders_hub;\n    const {\n        is_dark_mode_on,\n        openRealAccountSignup,\n        toggleAccountsDialog,\n        toggleSetCurrencyModal,\n        should_show_real_accounts_list,\n        setShouldShowCooldownModal,\n    } = ui;\n    const [active_tab_index, setActiveTabIndex] = React.useState(!is_virtual || should_show_real_accounts_list ? 0 : 1);\n    const [is_deriv_demo_visible, setDerivDemoVisible] = React.useState(true);\n    const [is_deriv_real_visible, setDerivRealVisible] = React.useState(true);\n    const [is_non_eu_regulator_visible, setNonEuRegulatorVisible] = React.useState(true);\n    const [is_eu_regulator_visible, setEuRegulatorVisible] = React.useState(true);\n\n    const wrapper_ref = React.useRef();\n    const scroll_ref = React.useRef(null);\n\n    const account_total_balance_currency = obj_total_balance.currency;\n\n    const vrtc_loginid = account_list.find(account => account.is_virtual)?.loginid;\n    const vrtc_currency = accounts[vrtc_loginid] ? accounts[vrtc_loginid].currency : 'USD';\n\n    const toggleVisibility = section => {\n        switch (section) {\n            case 'demo_deriv':\n                return setDerivDemoVisible(!is_deriv_demo_visible);\n            case 'real_deriv':\n                return setDerivRealVisible(!is_deriv_real_visible);\n            case 'non-eu-regulator':\n                return setNonEuRegulatorVisible(!is_non_eu_regulator_visible);\n            case 'eu-regulator':\n                return setEuRegulatorVisible(!is_eu_regulator_visible);\n            default:\n                return false;\n        }\n    };\n\n    const closeAccountsDialog = () => {\n        toggleAccountsDialog(false);\n    };\n\n    const validateClickOutside = event => is_visible && !event.target.classList.contains('acc-info');\n\n    useOnClickOutside(wrapper_ref, closeAccountsDialog, validateClickOutside);\n\n    const setAccountCurrency = () => {\n        closeAccountsDialog();\n        toggleSetCurrencyModal();\n    };\n\n    const doSwitch = async loginid => {\n        closeAccountsDialog();\n        if (account_loginid === loginid) return;\n        await switchAccount(loginid);\n    };\n\n    const resetBalance = async () => {\n        closeAccountsDialog();\n        resetVirtualBalance();\n    };\n\n    // Real accounts is always the first tab index based on design\n    const isRealAccountTab = active_tab_index === 0;\n    const isDemoAccountTab = active_tab_index === 1;\n\n    const getRealMT5 = () => {\n        if (is_landing_company_loaded) {\n            const low_risk_non_eu = content_flag === ContentFlag.LOW_RISK_CR_NON_EU;\n            if (low_risk_non_eu) {\n                return getSortedCFDList(mt5_login_list).filter(\n                    account => !isDemo(account) && account.landing_company_short !== 'maltainvest'\n                );\n            }\n            return getSortedCFDList(mt5_login_list).filter(account => !isDemo(account));\n        }\n        return [];\n    };\n\n    const canOpenMulti = () => {\n        if (available_crypto_currencies.length < 1 && !has_fiat) return true;\n        return !is_virtual;\n    };\n\n    // SVG clients can't upgrade.\n    const getRemainingRealAccounts = () => {\n        if (show_eu_related_content || is_virtual || !canOpenMulti() || is_low_risk) {\n            return upgradeable_landing_companies;\n        }\n        return [];\n    };\n\n    const hasSetCurrency = useHasSetCurrency();\n\n    const getTotalDemoAssets = () => {\n        const vrtc_balance = accounts[vrtc_loginid] ? accounts[vrtc_loginid].balance : 0;\n\n        return vrtc_balance;\n    };\n\n    const getTotalRealAssets = () => {\n        const traders_hub_total = obj_total_balance.amount_real;\n        return traders_hub_total;\n    };\n\n    if (!is_logged_in) return false;\n\n    const canResetBalance = account => {\n        const account_init_balance = 10000;\n        return account?.is_virtual && account?.balance !== account_init_balance;\n    };\n\n    const checkMultipleSvgAcc = () => {\n        const all_svg_acc = [];\n        getRealMT5().map(acc => {\n            if (acc.landing_company_short === 'svg' && acc.market_type === 'synthetic') {\n                if (all_svg_acc.length) {\n                    all_svg_acc.forEach(svg_acc => {\n                        if (svg_acc.server !== acc.server) all_svg_acc.push(acc);\n                        return all_svg_acc;\n                    });\n                } else {\n                    all_svg_acc.push(acc);\n                }\n            }\n        });\n        return all_svg_acc.length > 1;\n    };\n\n    const have_more_accounts = type =>\n        getSortedAccountList(account_list, accounts).filter(\n            account => !account.is_virtual && account.loginid.startsWith(type)\n        ).length > 1;\n\n    // all: 1 in mt5_status response means that server is suspended\n    const has_cr_account = account_list.find(acc => acc.loginid?.startsWith('CR'))?.loginid;\n\n    const demo_account = (\n        <div className='acc-switcher__list-wrapper'>\n            {vrtc_loginid && (\n                <AccountWrapper\n                    header={localize('Deriv account')}\n                    is_visible={is_deriv_demo_visible}\n                    toggleVisibility={() => {\n                        toggleVisibility('demo_deriv');\n                    }}\n                >\n                    <div className='acc-switcher__accounts'>\n                        {getSortedAccountList(account_list, accounts)\n                            .filter(account => account.is_virtual)\n                            .map(account => (\n                                <AccountList\n                                    is_dark_mode_on={is_dark_mode_on}\n                                    key={account.loginid}\n                                    balance={accounts[account.loginid].balance}\n                                    currency={accounts[account.loginid].currency}\n                                    currency_icon={`IcCurrency-${account.icon}`}\n                                    display_type={'currency'}\n                                    has_balance={'balance' in accounts[account.loginid]}\n                                    has_reset_balance={canResetBalance(accounts[account_loginid])}\n                                    is_disabled={account.is_disabled}\n                                    is_virtual={account.is_virtual}\n                                    loginid={account.loginid}\n                                    product={account.product}\n                                    redirectAccount={account.is_disabled ? undefined : () => doSwitch(account.loginid)}\n                                    onClickResetVirtualBalance={resetBalance}\n                                    selected_loginid={account_loginid}\n                                />\n                            ))}\n                    </div>\n                </AccountWrapper>\n            )}\n        </div>\n    );\n\n    const real_accounts = (\n        <div ref={scroll_ref} className='acc-switcher__list-wrapper'>\n            <React.Fragment>\n                {!is_eu || is_low_risk ? (\n                    <AccountWrapper\n                        className='acc-switcher__title'\n                        header={\n                            is_low_risk && has_maltainvest_account\n                                ? localize(`Non-EU Deriv ${have_more_accounts('CR') ? 'accounts' : 'account'}`)\n                                : localize(`Deriv ${have_more_accounts('CR') ? 'accounts' : 'account'}`)\n                        }\n                        is_visible={is_non_eu_regulator_visible}\n                        toggleVisibility={() => {\n                            toggleVisibility('real_deriv');\n                        }}\n                    >\n                        <div className='acc-switcher__accounts'>\n                            {getSortedAccountList(account_list, accounts)\n                                .filter(account => !account.is_virtual && account.loginid.startsWith('CR'))\n                                .map(account => {\n                                    return (\n                                        <AccountList\n                                            account_type={account_type}\n                                            is_dark_mode_on={is_dark_mode_on}\n                                            key={account.loginid}\n                                            balance={accounts[account.loginid].balance}\n                                            currency={accounts[account.loginid].currency}\n                                            currency_icon={`IcCurrency-${account.icon}`}\n                                            display_type={'currency'}\n                                            has_balance={'balance' in accounts[account.loginid]}\n                                            is_disabled={account.is_disabled}\n                                            is_virtual={account.is_virtual}\n                                            is_eu={is_eu}\n                                            loginid={account.loginid}\n                                            redirectAccount={\n                                                account.is_disabled ? undefined : () => doSwitch(account.loginid)\n                                            }\n                                            selected_loginid={account_loginid}\n                                            should_show_server_name={checkMultipleSvgAcc()}\n                                        />\n                                    );\n                                })}\n                        </div>\n                        {!has_cr_account &&\n                            getRemainingRealAccounts()\n                                .filter(account => account === 'svg')\n                                .map((account, index) => (\n                                    <div key={index} className='acc-switcher__new-account'>\n                                        <Icon icon='IcDeriv' size={24} />\n                                        <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                            {getAccountTitle(account)}\n                                        </Text>\n                                        <Button\n                                            id='dt_core_account-switcher_add-new-account'\n                                            onClick={() => {\n                                                if (real_account_creation_unlock_date) {\n                                                    closeAccountsDialog();\n                                                    setShouldShowCooldownModal(true);\n                                                } else {\n                                                    selectRegion('Non-EU');\n                                                    openRealAccountSignup('svg');\n                                                }\n                                            }}\n                                            className='acc-switcher__new-account-btn'\n                                            secondary\n                                            small\n                                        >\n                                            {localize('Add')}\n                                        </Button>\n                                    </div>\n                                ))}\n                    </AccountWrapper>\n                ) : null}\n                {(!is_high_risk && has_maltainvest_account) || is_eu ? (\n                    <AccountWrapper\n                        header={\n                            is_low_risk && has_maltainvest_account\n                                ? localize(`EU Deriv ${have_more_accounts('MF') ? 'accounts' : 'account'}`)\n                                : localize(`Deriv ${have_more_accounts('MF') ? 'accounts' : 'account'}`)\n                        }\n                        is_visible={is_eu_regulator_visible}\n                        toggleVisibility={() => {\n                            toggleVisibility('real_deriv');\n                        }}\n                    >\n                        <div className='acc-switcher__accounts'>\n                            {getSortedAccountList(account_list, accounts)\n                                .filter(account => !account.is_virtual && account.loginid.startsWith('MF'))\n                                .map(account => {\n                                    return (\n                                        <AccountList\n                                            account_type={account_type}\n                                            is_dark_mode_on={is_dark_mode_on}\n                                            key={account.loginid}\n                                            balance={accounts[account.loginid].balance}\n                                            currency={accounts[account.loginid].currency}\n                                            currency_icon={`IcCurrency-${account.icon}`}\n                                            display_type={'currency'}\n                                            has_balance={'balance' in accounts[account.loginid]}\n                                            is_disabled={account.is_disabled}\n                                            is_virtual={account.is_virtual}\n                                            is_eu={is_eu}\n                                            loginid={account.loginid}\n                                            redirectAccount={\n                                                account.is_disabled ? undefined : () => doSwitch(account.loginid)\n                                            }\n                                            selected_loginid={account_loginid}\n                                            should_show_server_name={checkMultipleSvgAcc()}\n                                        />\n                                    );\n                                })}\n                        </div>\n                        {getRemainingRealAccounts()\n                            .filter(account => account === 'maltainvest')\n                            .map((account, index) => {\n                                return (\n                                    <div key={index} className='acc-switcher__new-account'>\n                                        <Icon icon='IcDeriv' size={24} />\n                                        <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                            {getAccountTitle(account)}\n                                        </Text>\n                                        <Button\n                                            id='dt_core_account-switcher_add-new-account'\n                                            onClick={() => {\n                                                if (real_account_creation_unlock_date) {\n                                                    closeAccountsDialog();\n                                                    setShouldShowCooldownModal(true);\n                                                } else {\n                                                    selectRegion('EU');\n                                                    openRealAccountSignup('maltainvest');\n                                                }\n                                            }}\n                                            className='acc-switcher__new-account-btn'\n                                            secondary\n                                            small\n                                        >\n                                            {localize('Add')}\n                                        </Button>\n                                    </div>\n                                );\n                            })}\n                    </AccountWrapper>\n                ) : null}\n            </React.Fragment>\n        </div>\n    );\n\n    const first_real_login_id = account_list?.find(account => /^(CR|MF)/.test(account.loginid))?.loginid;\n\n    const TradersHubRedirect = () => {\n        const TradersHubLink = () => {\n            const handleRedirect = async () => {\n                if (!is_virtual && isDemoAccountTab) {\n                    await switchAccount(virtual_account_loginid);\n                } else if (is_virtual && isRealAccountTab) {\n                    await switchAccount(first_real_login_id);\n                }\n                toggleAccountsDialog(false);\n                localStorage.setItem('redirect_to_th_os', 'home');\n                history.push(routes.traders_hub);\n                setTogglePlatformType('cfd');\n            };\n\n            return (\n                <React.Fragment>\n                    <div className='acc-switcher__traders-hub'>\n                        <BinaryLink onClick={handleRedirect} className='acc-switcher__traders-hub--link'>\n                            <Text size='xs' align='center' className='acc-switcher__traders-hub--text'>\n                                <Localize i18n_default_text=\"Looking for CFD accounts? Go to Trader's Hub\" />\n                            </Text>\n                        </BinaryLink>\n                    </div>\n                </React.Fragment>\n            );\n        };\n\n        if ((isRealAccountTab && has_any_real_account) || isDemoAccountTab) {\n            return <TradersHubLink />;\n        }\n\n        return null;\n    };\n\n    return (\n        <div className='acc-switcher__list' ref={wrapper_ref} data-testid='acc-switcher'>\n            {is_landing_company_loaded ? (\n                <React.Fragment>\n                    <Tabs\n                        active_index={active_tab_index}\n                        className='acc-switcher__list-tabs'\n                        onTabItemClick={index => setActiveTabIndex(index)}\n                        top\n                    >\n                        {/* TODO: De-couple and refactor demo and real accounts groups\n                        into a single reusable AccountListItem component */}\n                        <div label={localize('Real')} id='real_account_tab'>\n                            <DesktopWrapper>\n                                <ThemedScrollbars height='354px'>{real_accounts}</ThemedScrollbars>\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                <Div100vhContainer\n                                    className='acc-switcher__list-container'\n                                    max_autoheight_offset='234px'\n                                >\n                                    {real_accounts}\n                                </Div100vhContainer>\n                            </MobileWrapper>\n                        </div>\n                        <div label={localize('Demo')} id='dt_core_account-switcher_demo-tab'>\n                            <DesktopWrapper>\n                                <ThemedScrollbars height='354px'>{demo_account}</ThemedScrollbars>\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                <Div100vhContainer\n                                    className='acc-switcher__list-container'\n                                    max_autoheight_offset='234px'\n                                >\n                                    {demo_account}\n                                </Div100vhContainer>\n                            </MobileWrapper>\n                        </div>\n                    </Tabs>\n                    <div\n                        className={classNames('acc-switcher__separator', {\n                            'acc-switcher__separator--auto-margin': is_mobile,\n                        })}\n                    />\n                    <div className='acc-switcher__total'>\n                        <Text line_height='s' size='xs' weight='bold' color='prominent'>\n                            <Localize i18n_default_text='Total assets' />\n                        </Text>\n                        <Text size='xs' color='prominent' className='acc-switcher__balance'>\n                            <Money\n                                currency={isRealAccountTab ? account_total_balance_currency : vrtc_currency}\n                                amount={formatMoney(\n                                    isRealAccountTab ? account_total_balance_currency : vrtc_currency,\n                                    isRealAccountTab ? getTotalRealAssets() : getTotalDemoAssets(),\n                                    true\n                                )}\n                                show_currency\n                                should_format={false}\n                            />\n                        </Text>\n                    </div>\n                    <Text color='less-prominent' line_height='xs' size='xxxs' className='acc-switcher__total-subtitle'>\n                        {localize('Total assets in your Deriv accounts.')}\n                    </Text>\n                    <div className='acc-switcher__separator' />\n                    <TradersHubRedirect />\n                    {isRealAccountTab && has_active_real_account && !is_virtual && (\n                        <>\n                            <div className='acc-switcher__separator' />\n                            <div className='acc-switcher__footer'>\n                                <Button\n                                    className='acc-switcher__btn--traders_hub'\n                                    secondary\n                                    onClick={\n                                        has_any_real_account && (!hasSetCurrency || !currency)\n                                            ? setAccountCurrency\n                                            : () => openRealAccountSignup('manage')\n                                    }\n                                >\n                                    {localize('Manage accounts')}\n                                </Button>\n                            </div>\n                        </>\n                    )}\n                </React.Fragment>\n            ) : (\n                <Loading is_fullscreen={false} />\n            )}\n        </div>\n    );\n});\n\nAccountSwitcher.propTypes = {\n    is_visible: PropTypes.bool,\n    history: PropTypes.object,\n};\n\nexport default withRouter(AccountSwitcher);\n","import AccountSwitcher from './account-switcher';\n\nexport default AccountSwitcher;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Div100vhContainer, Modal } from '@deriv/components';\nimport AccountSwitcher from 'App/Containers/AccountSwitcher';\n\nconst AccountSwitcherMobile = props => {\n    const { disableApp, enableApp, is_visible, is_upgrade_enabled, toggle } = props;\n    return (\n        <Modal\n            id='dt_account_switcher_modal'\n            className='accounts-switcher'\n            enableApp={enableApp}\n            is_open={is_visible}\n            is_vertical_top\n            disableApp={disableApp}\n            has_close_icon={false}\n            toggleModal={toggle}\n            height='auto'\n            width='calc(100vw - 32px)'\n        >\n            <Div100vhContainer\n                className={classNames('acc-switcher__wrapper', 'acc-switcher__wrapper--is-mobile')}\n                max_autoheight_offset='48px'\n            >\n                <AccountSwitcher is_mobile is_visible={true} toggle={toggle} is_upgrade_enabled={is_upgrade_enabled} />\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nAccountSwitcherMobile.propTypes = {\n    children: PropTypes.any,\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_visible: PropTypes.bool,\n    is_upgrade_enabled: PropTypes.bool,\n    onClose: PropTypes.func,\n    title: PropTypes.string,\n    toggle: PropTypes.func,\n    visible: PropTypes.bool,\n    wrapperClassName: PropTypes.string,\n};\n\nexport default AccountSwitcherMobile;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\n\ntype TAccountInfoIcon = {\n    is_virtual?: boolean;\n    currency?: string;\n};\n\nconst AccountInfoIcon = ({ is_virtual, currency }: TAccountInfoIcon) => (\n    <Icon\n        data_testid='dt_icon'\n        icon={`IcCurrency-${is_virtual ? 'virtual' : currency ?? 'Unknown'}`}\n        className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n        size={24}\n    />\n);\n\nexport default AccountInfoIcon;\n","import React from 'react';\nimport { Localize } from '@deriv/translations';\n\ntype TDisplayAccountType = {\n    account_type: string;\n    is_eu: boolean;\n};\n\nconst DisplayAccountType = ({ account_type, is_eu }: TDisplayAccountType) => {\n    if (account_type === 'financial') {\n        return <Localize i18n_default_text='Multipliers' />;\n    } else if (account_type === 'gaming') {\n        if (is_eu) {\n            return <Localize i18n_default_text='Options' />;\n        }\n        return <Localize i18n_default_text='Derived' />;\n    }\n    return null;\n};\n\nexport default DisplayAccountType;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { getCurrencyDisplayCode } from '@deriv/shared';\nimport { useDevice } from '@deriv-com/ui';\nimport AccountSwitcher from 'App/Containers/AccountSwitcher';\nimport AccountSwitcherMobile from 'App/Containers/AccountSwitcher/account-switcher-mobile';\nimport AccountInfoWrapper from './account-info-wrapper';\nimport AccountInfoIcon from './account-info-icon';\nimport DisplayAccountType from './display-account-type';\n\nconst AccountInfo = ({\n    acc_switcher_disabled_message,\n    account_type = '',\n    balance,\n    currency,\n    disableApp,\n    enableApp,\n    is_dialog_on,\n    is_eu,\n    is_virtual,\n    toggleDialog,\n    is_disabled,\n    is_mobile,\n}) => {\n    const currency_lower = currency?.toLowerCase();\n    const { isDesktop } = useDevice();\n\n    return (\n        <div className='acc-info__wrapper'>\n            {isDesktop && <div className='acc-info__separator' />}\n            <AccountInfoWrapper\n                is_disabled={is_disabled}\n                disabled_message={acc_switcher_disabled_message}\n                is_mobile={is_mobile}\n            >\n                <div\n                    data-testid='dt_acc_info'\n                    id='dt_core_account-info_acc-info'\n                    className={classNames('acc-info', {\n                        'acc-info--show': is_dialog_on,\n                        'acc-info--is-virtual': is_virtual,\n                        'acc-info--is-disabled': is_disabled,\n                    })}\n                    onClick={is_disabled ? undefined : () => toggleDialog()}\n                >\n                    <span className='acc-info__id'>\n                        {isDesktop ? (\n                            <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                        ) : (\n                            (is_virtual || currency) && (\n                                <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                            )\n                        )}\n                    </span>\n                    {(typeof balance !== 'undefined' || !currency) && (\n                        <div className='acc-info__account-type-and-balance'>\n                            <p\n                                data-testid='dt_balance'\n                                className={classNames('acc-info__balance', {\n                                    'acc-info__balance--no-currency': !currency && !is_virtual,\n                                })}\n                            >\n                                {!currency ? (\n                                    <Localize i18n_default_text='No currency assigned' />\n                                ) : (\n                                    `${balance} ${getCurrencyDisplayCode(currency)}`\n                                )}\n                            </p>\n                            <Text size='xxxs' line_height='s'>\n                                <DisplayAccountType account_type={account_type} is_eu={is_eu} />\n                            </Text>\n                        </div>\n                    )}\n                    {is_disabled ? (\n                        <Icon data_testid='dt_lock_icon' icon='IcLock' />\n                    ) : (\n                        <Icon\n                            data_testid='dt_select_arrow'\n                            icon='IcChevronDownBold'\n                            className='acc-info__select-arrow'\n                        />\n                    )}\n                </div>\n            </AccountInfoWrapper>\n            <div className='acc-info__separator' />\n            {isDesktop ? (\n                <CSSTransition\n                    in={is_dialog_on}\n                    timeout={200}\n                    classNames={{\n                        enter: 'acc-switcher__wrapper--enter',\n                        enterDone: 'acc-switcher__wrapper--enter-done',\n                        exit: 'acc-switcher__wrapper--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <div className='acc-switcher__wrapper'>\n                        <AccountSwitcher is_visible={is_dialog_on} toggle={toggleDialog} />\n                    </div>\n                </CSSTransition>\n            ) : (\n                <AccountSwitcherMobile\n                    is_visible={is_dialog_on}\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    toggle={toggleDialog}\n                />\n            )}\n        </div>\n    );\n};\n\nAccountInfo.propTypes = {\n    acc_switcher_disabled_message: PropTypes.string,\n    account_type: PropTypes.string,\n    balance: PropTypes.string,\n    currency: PropTypes.string,\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_dialog_on: PropTypes.bool,\n    is_disabled: PropTypes.bool,\n    is_eu: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    is_mobile: PropTypes.bool,\n    loginid: PropTypes.string,\n    toggleDialog: PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"names":["CurrencyDisplay","_ref2","currency","loginid","is_virtual","replace","_jsx","Localize","i18n_default_text","getCurrencyName","AccountDisplay","_ref3","_server$server_info","_server$server_info2","has_error","market_type","sub_account_type","platform","server","product","is_dark_mode_on","is_eu","shortcode","should_show_server_name","account_title","getCFDAccountDisplay","getServerName","React","account","_account$server_info","server_region","server_info","geolocation","region","_account$server_info2","_account$server_info3","sequence","_jsxs","children","Text","color","size","className","is_bot","isBot","localize","classNames","_ref","balance","currency_icon","display_type","has_balance","has_reset_balance","is_disabled","redirectAccount","onClickResetVirtualBalance","selected_loginid","currency_badge","id","onClick","Icon","icon","Button","e","stopPropagation","secondary","small","styles","fontWeight","Money","getCurrencyDisplayCode","amount","formatMoney","should_format","show_currency","AccountWrapper","header","is_visible","toggleVisibility","ContentExpander","title","is_expanded","onToggle","is_title_spaced","propTypes","PropTypes","getSortedAccountList","account_list","accounts","sort","a","b","a_balance","parseFloat","getSortedCFDList","a_is_demo","isDemo","b_is_demo","account_type","AccountSwitcher","observer","_account_list$find","_account_list$find2","_account_list$find3","history","is_mobile","client","ui","traders_hub","useStore","available_crypto_currencies","account_loginid","is_landing_company_loaded","is_low_risk","is_high_risk","is_logged_in","has_fiat","mt5_login_list","obj_total_balance","switchAccount","resetVirtualBalance","has_active_real_account","upgradeable_landing_companies","real_account_creation_unlock_date","has_any_real_account","virtual_account_loginid","has_maltainvest_account","show_eu_related_content","content_flag","selectRegion","setTogglePlatformType","openRealAccountSignup","toggleAccountsDialog","toggleSetCurrencyModal","should_show_real_accounts_list","setShouldShowCooldownModal","active_tab_index","setActiveTabIndex","is_deriv_demo_visible","setDerivDemoVisible","is_deriv_real_visible","setDerivRealVisible","is_non_eu_regulator_visible","setNonEuRegulatorVisible","is_eu_regulator_visible","setEuRegulatorVisible","wrapper_ref","scroll_ref","account_total_balance_currency","vrtc_loginid","find","vrtc_currency","section","closeAccountsDialog","useOnClickOutside","event","target","classList","contains","doSwitch","async","resetBalance","isRealAccountTab","isDemoAccountTab","getRemainingRealAccounts","length","hasSetCurrency","useHasSetCurrency","canResetBalance","checkMultipleSvgAcc","all_svg_acc","getRealMT5","ContentFlag","LOW_RISK_CR_NON_EU","filter","landing_company_short","map","acc","forEach","svg_acc","push","have_more_accounts","type","startsWith","has_cr_account","_acc$loginid","demo_account","AccountList","undefined","real_accounts","ref","index","getAccountTitle","first_real_login_id","test","TradersHubRedirect","TradersHubLink","BinaryLink","localStorage","setItem","routes","align","Tabs","active_index","onTabItemClick","top","label","DesktopWrapper","ThemedScrollbars","height","MobileWrapper","Div100vhContainer","max_autoheight_offset","line_height","weight","amount_real","_Fragment","setAccountCurrency","Loading","is_fullscreen","withRouter","AccountSwitcherMobile","props","disableApp","enableApp","is_upgrade_enabled","toggle","Modal","is_open","is_vertical_top","has_close_icon","toggleModal","width","onClose","visible","wrapperClassName","data_testid","AccountInfo","acc_switcher_disabled_message","is_dialog_on","toggleDialog","currency_lower","toLowerCase","isDesktop","useDevice","AccountInfoWrapper","disabled_message","AccountInfoIcon","DisplayAccountType","CSSTransition","in","timeout","enter","enterDone","exit","unmountOnExit"],"sourceRoot":""}