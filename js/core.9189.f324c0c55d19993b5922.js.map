{"version":3,"file":"js/core.9189.f324c0c55d19993b5922.js","mappings":"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","sources":["webpack:///../../api/src/hooks/useAuthorize.ts","webpack:///../../api/src/hooks/useGetAccountStatus.ts","webpack:///../../api/src/hooks/useResidenceList.ts","webpack:///../../api/src/hooks/useSettings.ts","webpack:///../../api/src/usePaginatedFetch.ts","webpack:///../../api/src/hooks/useAccountLimits.ts","webpack:///../../api/src/hooks/useAccountStatus.ts","webpack:///../../api/src/hooks/useAccountTypes.ts","webpack:///../../api/src/hooks/useBalance.ts","webpack:///../../api/src/hooks/useCurrencyConfig.ts","webpack:///../../api/src/utils/display-money.ts","webpack:///../../api/src/hooks/useDerivAccountsList.ts","webpack:///../../api/src/hooks/useActiveAccount.ts","webpack:///../../api/src/hooks/useWalletAccountsList.ts","webpack:///../../api/src/hooks/useActiveWalletAccount.ts","webpack:///../../api/src/hooks/useActiveLinkedToTradingAccount.ts","webpack:///../../api/src/hooks/useTradingAccountsList.ts","webpack:///../../api/src/hooks/useActiveTradingAccount.ts","webpack:///../../api/src/hooks/useActiveWalletBalance.ts","webpack:///../../api/src/hooks/useExchangeRates.ts","webpack:///../../api/src/hooks/useCtraderAccountsList.ts","webpack:///../../api/src/hooks/useDxtradeAccountsList.ts","webpack:///../../api/src/hooks/useMT5AccountsList.ts","webpack:///../../api/src/hooks/useCFDAccountsList.ts","webpack:///../../api/src/hooks/useAllAccountsList.ts","webpack:///../../api/src/hooks/useAvailableWallets.ts","webpack:///../../api/src/hooks/useAllWalletAccounts.ts","webpack:///../../api/src/hooks/useAuthentication.ts","webpack:///../../api/src/hooks/useLandingCompany.ts","webpack:///../../api/src/hooks/useAccesiblePlatforms.ts","webpack:///../../api/src/hooks/useAvailableMT5Accounts.ts","webpack:///../../api/src/hooks/useCashierValidation.ts","webpack:///../../api/src/hooks/useCloseDerivAccount.ts","webpack:///../../api/src/hooks/useCFDCompareAccounts.tsx","webpack:///../../api/src/hooks/useCancelCryptoTransaction.ts","webpack:///../../api/src/hooks/useCashierFiatAddress.ts","webpack:///../../api/src/hooks/useCryptoEstimations.ts","webpack:///../../api/src/hooks/useCountryConfig.ts","webpack:///../../api/src/hooks/useCreateNewRealAccount.ts","webpack:///../../api/src/hooks/useCreateWallet.ts","webpack:///../../api/src/hooks/useCryptoTransactions.ts","webpack:///../../api/src/hooks/useCryptoWithdrawal.ts","webpack:///../../api/src/hooks/useCtraderServiceToken.ts","webpack:///../../api/src/hooks/useDepositCryptoAddress.ts","webpack:///../../api/src/utils/file-utils.ts","webpack:///../../api/src/hooks/useDocumentUpload.ts","webpack:///../../api/src/hooks/useDxtradeServiceToken.ts","webpack:///../../api/src/hooks/useDynamicLeverage.ts","webpack:///../../api/src/hooks/useExchangeRateSubscription.ts","webpack:///../../api/src/hooks/useGetExchangeRate.ts","webpack:///../../api/src/hooks/useIdentityDocumentVerificationAdd.ts","webpack:///../../api/src/hooks/useIsEuRegion.ts","webpack:///../../api/src/hooks/usePOI.ts","webpack:///../../api/src/hooks/useJurisdictionStatus.ts","webpack:///../../api/src/hooks/useMT5Deposit.ts","webpack:///../../api/src/constants/countries.ts","webpack:///../../api/src/hooks/useOnfidoServiceToken.ts","webpack:///../../api/src/constants/onfido.ts","webpack:///../../api/src/hooks/useOnfidoNotificationEvent.ts","webpack:///../../api/src/hooks/useOnfido.ts","webpack:///../../api/src/hooks/useOtherCFDPlatformsDeposit.ts","webpack:///../../api/src/hooks/usePOA.ts","webpack:///../../api/src/hooks/useSendbirdServiceToken.ts","webpack:///../../api/src/hooks/useServerTime.ts","webpack:///../../api/src/hooks/useSortedMT5Accounts.ts","webpack:///../../api/src/hooks/useMobileCarouselWalletsList.ts","webpack:///../../api/src/hooks/useStatesList.ts","webpack:///../../api/src/hooks/useTradingPlatformInvestorPasswordChange.ts","webpack:///../../api/src/hooks/useCreateMT5Account.ts","webpack:///../../api/src/hooks/useCreateOtherCFDAccount.ts","webpack:///../../api/src/hooks/useTradingPlatformInvestorPasswordReset.ts","webpack:///../../api/src/hooks/useTradingPlatformPasswordChange.ts","webpack:///../../api/src/hooks/useTransactions.ts","webpack:///../../api/src/hooks/useInfiniteTransactions.ts","webpack:///../../api/src/hooks/useTransferBetweenAccounts.ts","webpack:///../../api/src/hooks/useVerifyEmail.ts","webpack:///../../api/src/hooks/useTradingPlatformPasswordReset.ts","webpack:///../../api/src/hooks/useResetVirtualBalance.ts","webpack:///../../api/src/hooks/useIsDIELEnabled.ts","webpack:///../../api/src/hooks/useKycAuthStatus.ts","webpack:///../../api/src/hooks/useClientCountry.ts","webpack:///../../api/src/useInfiniteQuery.ts","webpack:///../../hooks/src/useWalletsList.ts","webpack:///../../hooks/src/useActiveWallet.ts","webpack:///../../hooks/src/useAvailableWallets.ts","webpack:///../../hooks/src/useCFDAllAccounts.ts","webpack:///../../hooks/src/useCFDDemoAccounts.ts","webpack:///../../hooks/src/useCFDRealAccounts.ts","webpack:///../../hooks/src/useCFDAccounts.ts","webpack:///../../hooks/src/useCashierLocked.ts","webpack:///../../hooks/src/useContentFlag.ts","webpack:///../../hooks/src/useCurrentAccountDetails.ts","webpack:///../../hooks/src/useNeedAuthentication.ts","webpack:///../../hooks/src/useNeedFinancialAssessment.ts","webpack:///../../hooks/src/useDepositLocked.ts","webpack:///../../hooks/src/useDuplicateDOBPhone.ts","webpack:///../../hooks/src/useExchangeRate.ts","webpack:///../../hooks/src/useExistingCFDAccounts.ts","webpack:///../../hooks/src/useFeatureFlags.ts","webpack:///../../hooks/src/useFiatAccountList.ts","webpack:///../../hooks/src/useGetPasskeysList.ts","webpack:///../../hooks/src/usePhoneVerificationAnalytics.ts","webpack:///../../hooks/src/useRequestPhoneNumberOTP.tsx","webpack:///../../hooks/src/useHasCryptoCurrency.ts","webpack:///../../hooks/src/useHasFiatCurrency.ts","webpack:///../../hooks/src/useHasP2PSupportedCurrencies.ts","webpack:///../../hooks/src/useHasUSDCurrency.ts","webpack:///../../hooks/src/useIsAccountStatusPresent.ts","webpack:///../../hooks/src/useIsClientHighRiskForMT5.ts","webpack:///../../hooks/src/useIsSystemMaintenance.ts","webpack:///../../hooks/src/useLandingCompanyDetails.ts","webpack:///../../hooks/src/useLocalStorageData.ts","webpack:///../../hooks/src/useMT5SVGEligibleToMigrate.ts","webpack:///../../hooks/src/useNeedPOI.ts","webpack:///../../hooks/src/useP2PAdvertInfo.ts","webpack:///../../hooks/src/useP2PAdvertList.ts","webpack:///../../hooks/src/useP2PAdvertiserPaymentMethods.ts","webpack:///../../hooks/src/useP2POrderList.ts","webpack:///../../hooks/src/useP2PCompletedOrdersNotification.ts","webpack:///../../hooks/src/useP2PCountryList.ts","webpack:///../../hooks/src/useP2PExchangeRate.ts","webpack:///../../hooks/src/useP2PPaymentMethods.ts","webpack:///../../hooks/src/usePlatformDemoAccount.ts","webpack:///../../hooks/src/usePlatformRealAccounts.ts","webpack:///../../hooks/src/usePlatformAccounts.ts","webpack:///../../hooks/src/useRealSTPAccount.ts","webpack:///../../hooks/src/useRegisterPasskey.ts","webpack:///../../hooks/src/useSendOTPVerificationCode.tsx","webpack:///../../hooks/src/useRemovePasskey.ts","webpack:///../../hooks/src/useRenamePasskey.ts","webpack:///../../hooks/src/useStoreHasAccountDeposited.ts","webpack:///../../hooks/src/useTotalAssetCurrency.ts","webpack:///../../hooks/src/useTotalAccountBalance.ts","webpack:///../../hooks/src/useTransferBetweenAccounts.ts","webpack:///../../hooks/src/useWalletTransactions.ts","webpack:///../../hooks/src/useWalletTransfer.ts","webpack:///../../hooks/src/useIsSelectedMT5AccountCreated.ts","webpack:///../../hooks/src/useGetStatus.ts","webpack:///../../hooks/src/useIsPhoneNumberVerified.ts","webpack:///../../hooks/src/usePhoneNumberVerificationSetTimer.tsx","webpack:///../../hooks/src/usePhoneNumberVerificationSessionTimer.ts","webpack:///../../hooks/src/useTradingPlatformStatus.ts","webpack:///../../hooks/src/useGetWithdrawalLimitsDetails.ts","webpack:///../../hooks/src/useAccountSettingsRedirect.ts","webpack:///../../hooks/src/useAccountTransferVisible.ts","webpack:///../../hooks/src/useAuthorize.ts","webpack:///../../hooks/src/useCountdown.ts","webpack:///../../hooks/src/useCryptoConfig.ts","webpack:///../../hooks/src/useCryptoTransactions.ts","webpack:///../../hooks/src/useCurrencyConfig.ts","webpack:///../../hooks/src/useCurrentCurrencyConfig.ts","webpack:///../../hooks/src/useDepositCryptoAddress.ts","webpack:///../../hooks/src/useDepositFiatAddress.ts","webpack:///../../hooks/src/useFileUploader.ts","webpack:///../../hooks/src/useGetMFAccountStatus.ts","webpack:///../../hooks/src/useGetPhoneNumberList.ts","webpack:///../../hooks/src/useHasActiveRealAccount.ts","webpack:///../../hooks/src/useHasMaltaInvestAccount.ts","webpack:///../../hooks/src/useHasSetCurrency.ts","webpack:///../../hooks/src/useHasSvgAccount.ts","webpack:///../../hooks/src/useIsLiveChatWidgetAvailable.ts","webpack:///../../hooks/src/useIsP2PEnabled.ts","webpack:///../../hooks/src/useIsRealAccountNeededForCashier.ts","webpack:///../../hooks/src/useMFAccountStatus.ts","webpack:///../../hooks/src/useNotificationEvent.ts","webpack:///../../hooks/src/useOnrampVisible.ts","webpack:///../../hooks/src/useP2PNotificationCount.ts","webpack:///../../hooks/src/useP2PSettings.ts","webpack:///../../hooks/src/usePaymentAgentList.ts","webpack:///../../hooks/src/usePaymentAgentTransferVisible.ts","webpack:///../../hooks/src/useResidenceList.ts","webpack:///../../hooks/src/useResidenceSelfDeclaration.ts","webpack:///../../hooks/src/useServiceToken.ts","webpack:///../../hooks/src/useStatesList.ts","webpack:///../../hooks/src/useStoreLinkedWalletsAccounts.ts","webpack:///../../hooks/src/useStoreWalletAccountsList.ts","webpack:///../../hooks/src/useTinValidations.ts","webpack:///../../hooks/src/useVerifyEmail.ts","webpack:///../../stores/src/mockStore.ts"],"sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { getActiveAuthTokenIDFromLocalStorage, getActiveLoginIDFromLocalStorage } from '@deriv/utils';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useQuery from '../useQuery';\nimport { useAPIContext } from '../APIProvider';\n\n/** A custom hook that authorize the user with the given token. If no token is given,\n * it will use the current token from localStorage.\n */\nconst useAuthorize = () => {\n    const current_token = getActiveAuthTokenIDFromLocalStorage();\n    const invalidate = useInvalidateQuery();\n    const { switchEnvironment, queryClient } = useAPIContext();\n\n    const [currentLoginID, setCurrentLoginID] = useState(getActiveLoginIDFromLocalStorage());\n\n    const { data, ...rest } = useQuery('authorize', {\n        payload: { authorize: current_token || '' },\n        options: {\n            enabled: Boolean(current_token),\n            // for authorise request - we cannot affort any race hazards due to it being randomly triggered\n            // e.g. during the process of swithcing account or smth\n            refetchOnWindowFocus: false,\n            refetchOnReconnect: false,\n        },\n    });\n\n    // Add additional information to the authorize response.\n    const modified_authorize = useMemo(() => ({ ...data?.authorize }), [data?.authorize]);\n\n    const switchAccount = useCallback(\n        (loginid: string) => {\n            const active_loginid = getActiveLoginIDFromLocalStorage();\n            if (active_loginid !== loginid) {\n                sessionStorage.setItem('active_loginid', loginid);\n                localStorage.setItem('active_loginid', loginid);\n                switchEnvironment(active_loginid);\n                // whenever we change the loginid, we need to invalidate all queries\n                // as there might be ongoing queries against previous loginid\n                // and we really do not want data from previous loginid, to be mixed with current loginid\n                queryClient.cancelQueries();\n                setCurrentLoginID(loginid);\n            }\n        },\n        [invalidate, switchEnvironment, currentLoginID]\n    );\n\n    return {\n        /** The authorize response. */\n        data: modified_authorize,\n        /** Function to switch to another account */\n        switchAccount,\n        currentLoginID,\n        ...rest,\n    };\n};\n\nexport default useAuthorize;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\n\n/** A custom hook to retrieves the account status for the current user. */\nconst useGetAccountStatus = () => {\n    const { data: get_account_status_data, ...rest } = useQuery('get_account_status');\n\n    // Add additional information to the account status response.\n    const modified_account_status = useMemo(() => {\n        if (!get_account_status_data?.get_account_status) return;\n\n        const { prompt_client_to_authenticate, p2p_status } = get_account_status_data.get_account_status;\n\n        return {\n            ...get_account_status_data.get_account_status,\n            /** Indicates whether the client should be prompted to authenticate their account. */\n            should_prompt_client_to_authenticate: Boolean(prompt_client_to_authenticate),\n            /** Indicates whether the client is a P2P user. */\n            is_p2p_user: Boolean(p2p_status !== 'none' && p2p_status !== 'perm_ban'),\n        };\n    }, [get_account_status_data?.get_account_status]);\n\n    return {\n        /** The account status response. */\n        data: modified_account_status,\n        ...rest,\n    };\n};\n\nexport default useGetAccountStatus;\n","import { useMemo } from 'react';\n\nimport useQuery from '../useQuery';\n\n/** A custom hook that gets the residence list. */\nconst useResidenceList = () => {\n    const { data, ...residence_list_rest } = useQuery('residence_list');\n\n    /** Modify the residence list data. */\n    const modified_residence_list = useMemo(() => {\n        if (!data || !data.residence_list) return [];\n\n        return data.residence_list.map(residence => ({\n            ...residence,\n        }));\n    }, [data]);\n\n    return {\n        /** The residence list */\n        data: modified_residence_list,\n        ...residence_list_rest,\n    };\n};\n\nexport default useResidenceList;\n","import { useCallback, useMemo } from 'react';\nimport useAuthorize from './useAuthorize';\nimport useQuery from '../useQuery';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useMutation from '../useMutation';\n\ntype TSetSettingsPayload = NonNullable<\n    NonNullable<NonNullable<Parameters<ReturnType<typeof useMutation<'set_settings'>>['mutate']>>[0]>['payload']\n>;\n\n/** A custom hook to get and update the user settings. */\nconst useSettings = () => {\n    const { isSuccess } = useAuthorize();\n    const { data, ...rest } = useQuery('get_settings', { options: { enabled: isSuccess } });\n    const { mutate, ...mutate_rest } = useMutation('set_settings', { onSuccess: () => invalidate('get_settings') });\n    const invalidate = useInvalidateQuery();\n\n    const update = useCallback((payload: TSetSettingsPayload) => mutate({ payload }), [mutate]);\n\n    // Add additional information to the settings response.\n    const modified_settings = useMemo(() => {\n        const citizenship = data?.get_settings?.citizen ?? '';\n        const account = data?.get_settings?.account_opening_reason ?? '';\n        const placeofbirth = data?.get_settings?.place_of_birth ?? '';\n        const taxResidence = data?.get_settings?.tax_residence ?? '';\n        const taxIdentificationnumber = data?.get_settings?.tax_identification_number ?? '';\n\n        return {\n            ...data?.get_settings,\n            has_submitted_personal_details: Boolean(\n                citizenship && account && placeofbirth && taxResidence && taxIdentificationnumber\n            ),\n        };\n    }, [data?.get_settings]);\n\n    return {\n        /** The settings response. */\n        data: modified_settings,\n        /** Function to update user settings */\n        update,\n        /** The mutation related information */\n        mutation: mutate_rest,\n        ...rest,\n    };\n};\n\nexport default useSettings;\n","import { useCallback, useState } from 'react';\n\nimport type {\n    TSocketAcceptableProps,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestPayload,\n    TSocketRequestQueryOptions,\n} from '../types';\n\nimport useQuery from './useQuery';\n\nconst usePaginatedFetch = <T extends TSocketPaginateableEndpointNames>(\n    name: T,\n    ...props: TSocketAcceptableProps<T, true>\n) => {\n    const prop = props?.[0];\n    const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n    const options = prop && 'options' in prop ? (prop.options as TSocketRequestQueryOptions<T>) : undefined;\n\n    const limit: number = payload?.payload?.limit || 10;\n    const [offset, setOffset] = useState<number>(payload?.payload?.offset || 0);\n\n    // @ts-expect-error It's safe to ignore the TS error here since the\n    // exact type of the payload is not determined at this point.\n    const { remove, ...rest } = useQuery(name, {\n        payload: { ...payload, offset, limit },\n        options: { ...options, keepPreviousData: !!offset },\n    });\n\n    const loadMore = useCallback(() => setOffset(prev => prev + limit), [limit]);\n\n    const reset = useCallback(() => {\n        remove();\n        setOffset(0);\n    }, [remove]);\n\n    return {\n        ...rest,\n        remove,\n        loadMore,\n        reset,\n    };\n};\n\nexport default usePaginatedFetch;\n","import useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\n\n/** A custom hook to get account limits */\nconst useAccountLimits = () => {\n    const { isSuccess } = useAuthorize();\n    const { data, ...rest } = useQuery('get_limits', { options: { enabled: isSuccess } });\n\n    return {\n        /** Account limits response */\n        data: data?.get_limits,\n        ...rest,\n    };\n};\n\nexport default useAccountLimits;\n","import { useMemo } from 'react';\nimport useGetAccountStatus from './useGetAccountStatus';\n\n/** A custom hook to check the account status for the current user. */\nconst useAccountStatus = () => {\n    const { data: get_account_status_data, ...rest } = useGetAccountStatus();\n\n    // Add additional information to the account status response.\n    const modified_account_status = useMemo(() => {\n        if (!get_account_status_data?.status) return;\n\n        const status = new Set(get_account_status_data?.status);\n\n        return {\n            /** Account status. */\n            status: get_account_status_data?.status,\n            /** client's address is verified by third party services. */\n            is_address_verified: status.has('address_verified'),\n            /** client is allowed to upload documents. */\n            is_allow_document_upload: status.has('allow_document_upload'),\n            /** client is age-verified. */\n            is_age_verification: status.has('age_verification'),\n            /** client is fully authenticated. */\n            is_authenticated: status.has('authenticated'),\n            /** cashier is locked. */\n            is_cashier_locked: status.has('cashier_locked'),\n            /** client has updated tax related information. */\n            is_crs_tin_information: status.has('crs_tin_information'),\n            /** deposit is not allowed. */\n            is_deposit_locked: status.has('deposit_locked'),\n            /** account is disabled. */\n            is_disabled: status.has('disabled'),\n            /** client's submitted proof-of-identity documents have expired. */\n            is_document_expired: status.has('document_expired'),\n            /** client's submitted proof-of-identity documents are expiring within a month. */\n            is_document_expiring_soon: status.has('document_expiring_soon'),\n            /** Deriv X password is not set. */\n            is_dxtrade_password_not_set: status.has('dxtrade_password_not_set'),\n            /** client should complete their financial assessment. */\n            is_financial_assessment_not_complete: status.has('financial_assessment_not_complete'),\n            /** client has not completed financial assessment. */\n            is_financial_information_not_complete: status.has('financial_information_not_complete'),\n            /** client has accepted financial risk disclosure. */\n            is_financial_risk_approval: status.has('financial_risk_approval'),\n            /** client has not set financial limits on their account. Applies to UK and Malta clients. */\n            is_max_turnover_limit_not_set: status.has('max_turnover_limit_not_set'),\n            /** MT5 password is not set. */\n            is_mt5_password_not_set: status.has('mt5_password_not_set'),\n            /** MT5 deposits allowed, but withdrawal is not allowed. */\n            is_mt5_withdrawal_locked: status.has('mt5_withdrawal_locked'),\n            /** user must approve the Affiliate's Code of Conduct Agreement. */\n            is_needs_affiliate_coc_approval: status.has('needs_affiliate_coc_approval'),\n            /** trading is disabled. */\n            is_no_trading: status.has('no_trading'),\n            /** client cannot trade or withdraw but can deposit. */\n            is_no_withdrawal_or_trading: status.has('no_withdrawal_or_trading'),\n            /** p2p is blocked for the current payment agent client. */\n            is_p2p_blocked_for_pa: status.has('p2p_blocked_for_pa'),\n            /** withdrawal through payment agent is allowed. */\n            is_pa_withdrawal_explicitly_allowed: status.has('pa_withdrawal_explicitly_allowed'),\n            /** this client must reset their password. */\n            is_password_reset_required: status.has('password_reset_required'),\n            /** this client has opted for a professional account. */\n            is_professional: status.has('professional'),\n            /** this client has requested for a professional account. */\n            is_professional_requested: status.has('professional_requested'),\n            /** this client's request for a professional account has been rejected. */\n            is_professional_rejected: status.has('professional_rejected'),\n            /** this client is using social signup. */\n            is_social_signup: status.has('social_signup'),\n            /** client has not completed the trading experience questionnaire. */\n            is_trading_experience_not_complete: status.has('trading_experience_not_complete'),\n            /** client cannot deposit or buy contracts, but can withdraw or sell contracts. */\n            is_unwelcome: status.has('unwelcome'),\n            /** deposits allowed but withdrawals are not allowed. */\n            is_withdrawal_locked: status.has('withdrawal_locked'),\n            /** this prevent a client from changing the account currency after deposit attempt. */\n            is_deposit_attempt: status.has('deposit_attempt'),\n            /** client POI documents name mismatch. */\n            is_poi_name_mismatch: status.has('poi_name_mismatch'),\n            /** the client can resubmit POA documents. */\n            is_allow_poa_resubmission: status.has('allow_poa_resubmission'),\n            /** the client can resubmit POI documents. */\n            is_allow_poi_resubmission: status.has('allow_poi_resubmission'),\n            /** the client has been sharing payment methods. */\n            is_shared_payment_method: status.has('shared_payment_method'),\n            /** client is not allowed to edit personal profile details. */\n            is_personal_details_locked: status.has('personal_details_locked'),\n            /** it block any transfer between two accounts. */\n            is_transfers_blocked: status.has('transfers_blocked'),\n            /** the DF deposit will be blocked until the client gets age verified. */\n            is_df_deposit_requires_poi: status.has('df_deposit_requires_poi'),\n            /** the client has been fully authenticated by IDV. */\n            is_authenticated_with_idv_photoid: status.has('authenticated_with_idv_photoid'),\n            /** the client used to be fully authenticated by IDV but it was taken away due to compliance criteria. */\n            is_idv_revoked: status.has('idv_revoked'),\n        };\n    }, [get_account_status_data?.status]);\n\n    return {\n        /** The account status response. */\n        data: modified_account_status,\n        ...rest,\n    };\n};\n\nexport default useAccountStatus;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\n\n/** A custom hook to get available account types for a specific landing company. */\nconst useAccountTypes = (landing_company?: string) => {\n    const { data, ...rest } = useQuery('get_account_types', {\n        payload: { company: landing_company },\n        options: { enabled: Boolean(landing_company) },\n    });\n\n    // Add additional information to the account types response.\n    const modified_account_types = useMemo(() => {\n        if (!data?.get_account_types) return;\n\n        return {\n            ...data.get_account_types,\n            /** Landing company for the account types */\n            landing_company,\n        };\n    }, [data?.get_account_types, landing_company]);\n\n    return {\n        /** The account types response. */\n        data: modified_account_types,\n        ...rest,\n    };\n};\n\nexport default useAccountTypes;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\n\n/** A custom hook that gets the balance for all the user accounts. */\nconst useBalance = () => {\n    const { isSuccess } = useAuthorize();\n    const { data: balance_data, ...rest } = useQuery('balance', {\n        payload: { account: 'all' },\n        options: {\n            enabled: isSuccess,\n        },\n    });\n\n    // Add additional information to the balance data.\n    const modified_balance = useMemo(() => ({ ...balance_data?.balance }), [balance_data?.balance]);\n\n    return {\n        /** The balance response. */\n        data: modified_balance,\n        ...rest,\n    };\n};\n\nexport default useBalance;\n","import { useCallback, useMemo } from 'react';\nimport useQuery from '../useQuery';\n\n/** A custom hook to get the currency config information from `website_status` endpoint and `crypto_config` endpoint. */\nconst useCurrencyConfig = () => {\n    const { data: website_status_data, ...rest } = useQuery('website_status');\n    const { data: crypto_config_data } = useQuery('crypto_config');\n\n    // Add additional information to the currency config.\n    const modified_currencies_config = useMemo(() => {\n        if (!website_status_data?.website_status?.currencies_config) return undefined;\n\n        const website_status_currencies_config = website_status_data.website_status.currencies_config;\n\n        return Object.keys(website_status_currencies_config).map(currency => {\n            const currency_config = website_status_currencies_config[currency];\n\n            return {\n                ...currency_config,\n                /** determine if the currency is a `crypto` currency */\n                is_crypto: currency_config?.type === 'crypto',\n                /** determine if the currency is a `fiat` currency */\n                is_fiat: currency_config?.type === 'fiat',\n                /** determine if the currency is `Australian Dollar` */\n                is_AUD: currency === 'AUD',\n                /** determine if the currency is `US Dollar` */\n                is_USD: currency === 'USD',\n                /** determine if the currency is `Euro` */\n                is_EUR: currency === 'EUR',\n                /** determine if the currency is `Pound Sterling` */\n                is_GBP: currency === 'GBP',\n                /** determine if the currency is `Bitcoin` */\n                is_BTC: currency === 'BTC',\n                /** determine if the currency is `Ethereum` */\n                is_ETH: currency === 'ETH',\n                /** determine if the currency is `Litecoin` */\n                is_LTC: currency === 'LTC',\n                /** determine if the currency is `Multi-Collateral DAI` */\n                is_DAI: currency === 'DAI',\n                /** determine if the currency is `IDK` */\n                is_IDK: currency === 'IDK',\n                /** determine if the currency is `Paxos Standard` */\n                is_PAX: currency === 'PAX',\n                /** determine if the currency is `Binary Coin` */\n                is_USB: currency === 'USB',\n                /** determine if the currency is `Tether Omni` */\n                is_USDT: currency === 'UST',\n                /** determine if the currency is `True USD` */\n                is_TUSD: currency === 'TUSD',\n                /** determine if the currency is `Binance USD` */\n                is_BUSD: currency === 'BUSD',\n                /** determine if the currency is `STATIS Euro` */\n                is_EURS: currency === 'EURS',\n                /** determine if the currency is `Tether ERC20` */\n                is_eUSDT: currency === 'eUSDT',\n                /** determine if the currency is `Tether TRC20` */\n                is_tUSDT: currency === 'tUSDT',\n                /** determine if the currency is `USD Coin` */\n                is_USDC: currency === 'USDC',\n                /** determine if the currency is `USDK` */\n                is_USDK: currency === 'USDK',\n                /** Currency code */\n                code: currency,\n                /** Currency display code */\n                display_code: currency === 'UST' ? 'USDT' : currency,\n            };\n        });\n    }, [website_status_data?.website_status?.currencies_config]);\n\n    // Add additional information to the crypto config.\n    const modified_crypto_config = useMemo(() => {\n        return modified_currencies_config?.map(currency_config => ({\n            ...currency_config,\n            ...crypto_config_data?.crypto_config?.currencies_config[currency_config.code],\n        }));\n    }, [crypto_config_data?.crypto_config?.currencies_config, modified_currencies_config]);\n\n    // Transform the currency config array into a record object.\n    const transformed_currencies_config = useMemo(() => {\n        return modified_crypto_config?.reduce<Record<string, typeof modified_crypto_config[number]>>(\n            (previous, current) => ({ ...previous, [current.code]: current }),\n            {}\n        );\n    }, [modified_crypto_config]);\n\n    const getConfig = useCallback(\n        (currency: string) => transformed_currencies_config?.[currency],\n        [transformed_currencies_config]\n    );\n\n    return {\n        /** Available currencies and their information */\n        data: transformed_currencies_config,\n        /** Returns the currency config object for the given currency */\n        getConfig,\n        ...rest,\n    };\n};\n\nexport default useCurrencyConfig;\n","import { useAuthorize } from '../hooks';\n\ntype TCurrency = NonNullable<ReturnType<typeof useAuthorize>['data']['currency']>;\ntype TPreferredLanguage = ReturnType<typeof useAuthorize>['data']['preferred_language'];\n\nexport const displayMoney = (\n    amount: number,\n    currency: TCurrency,\n    options?: {\n        fractional_digits?: number;\n        preferred_language?: TPreferredLanguage;\n    }\n) => {\n    try {\n        return `${Intl.NumberFormat(options?.preferred_language || 'en-US', {\n            minimumFractionDigits: options?.fractional_digits || 2,\n            maximumFractionDigits: options?.fractional_digits || 2,\n            minimumIntegerDigits: 1,\n        }).format(amount)} ${currency}`;\n    } catch (error) {\n        return `${amount} ${currency}`;\n    }\n};\n","import { useMemo } from 'react';\nimport useAuthorize from './useAuthorize';\nimport useBalance from './useBalance';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport { displayMoney } from '../utils';\n\n/** A custom hook that returns the list of accounts for the current user. */\nconst useDerivAccountsList = () => {\n    const { data: authorize_data, ...rest } = useAuthorize();\n    const { data: balance_data } = useBalance();\n    const { getConfig } = useCurrencyConfig();\n\n    // Add additional information to the authorize response.\n    const modified_accounts = useMemo(() => {\n        return authorize_data.account_list?.map(account => {\n            return {\n                ...account,\n                /** Creation time of the account. */\n                created_at: account.created_at ? new Date(account.created_at) : undefined,\n                /** Account's currency config information */\n                currency_config: account.currency ? getConfig(account.currency) : undefined,\n                /** Date till client has excluded him/herself from the website, only present if client is self excluded. */\n                excluded_until: account.excluded_until ? new Date(account.excluded_until) : undefined,\n                /** Indicating whether the wallet is the currently active account. */\n                is_active: account.loginid === authorize_data.loginid,\n                /** indicating whether the account is marked as disabled or not. */\n                is_disabled: Boolean(account.is_disabled),\n                /** indicating whether the account is a trading account. */\n                is_trading: account.account_category === 'trading',\n                /** indicating whether the account is a virtual-money account. */\n                is_virtual: Boolean(account.is_virtual),\n                /** indicating whether the account is a wallet account. */\n                is_wallet: account.account_category === 'wallet',\n                /** The account ID of specified account. */\n                loginid: `${account.loginid}`,\n                /** The platform of the account */\n                platform: 'deriv' as const,\n                /** To indicate whether the account is MF or not */\n                is_mf: account.loginid?.startsWith('MF'),\n            } as const;\n        });\n    }, [authorize_data.account_list, authorize_data.loginid, getConfig]);\n\n    // Add balance to each account\n    const modified_accounts_with_balance = useMemo(\n        () =>\n            modified_accounts?.map(account => {\n                const balance = balance_data?.accounts?.[account.loginid]?.balance || 0;\n\n                return {\n                    ...account,\n                    /** The balance of the account. */\n                    balance,\n                    /** The balance of the account in currency format. */\n                    display_balance: displayMoney(balance, account.currency_config?.display_code || 'USD', {\n                        fractional_digits: account.currency_config?.fractional_digits,\n                        preferred_language: authorize_data?.preferred_language,\n                    }),\n                };\n            }),\n        [balance_data?.accounts, modified_accounts, authorize_data?.preferred_language]\n    );\n\n    return {\n        /** The list of accounts for the current user. */\n        data: modified_accounts_with_balance,\n        ...rest,\n    };\n};\n\nexport default useDerivAccountsList;\n","import { useMemo } from 'react';\nimport useDerivAccountsList from './useDerivAccountsList';\n\n/** A custom hook that returns the account object for the current active account. */\nconst useActiveAccount = () => {\n    const { data, ...rest } = useDerivAccountsList();\n    const active_account = useMemo(() => data?.find(account => account.is_active), [data]);\n\n    return {\n        /** User's current active account. */\n        data: active_account,\n        ...rest,\n    };\n};\n\nexport default useActiveAccount;\n","import { useMemo } from 'react';\nimport useDerivAccountsList from './useDerivAccountsList';\n\n/** A custom hook that gets the list of all wallet accounts for the current user. */\nconst useWalletAccountsList = () => {\n    const { data: account_list_data, ...rest } = useDerivAccountsList();\n\n    // Filter out non-wallet accounts.\n    const filtered_accounts = useMemo(\n        () => account_list_data?.filter(account => account.is_wallet),\n        [account_list_data]\n    );\n\n    // Add additional information to each wallet account.\n    const modified_accounts = useMemo(() => {\n        return filtered_accounts?.map(wallet => {\n            const wallet_currency_type = wallet.is_virtual ? 'Demo' : wallet.currency || '';\n            const dtrade_loginid = wallet.linked_to?.find(account => account.platform === 'dtrade')?.loginid;\n\n            return {\n                ...wallet,\n                /** Returns the wallet's currency type. ex: `Demo`, `USD`, etc. */\n                wallet_currency_type,\n                /** Landing company shortcode the account belongs to. */\n                landing_company_name: wallet.landing_company_name?.replace('maltainvest', 'malta'),\n                /** Indicating whether the wallet is a maltainvest wallet. */\n                is_malta_wallet: wallet.landing_company_name === 'maltainvest',\n                /** The DTrade account ID of this wallet */\n                dtrade_loginid,\n                /** Returns if the wallet is a crypto wallet. */\n                is_crypto: wallet.currency_config?.is_crypto,\n            } as const;\n        });\n    }, [filtered_accounts]);\n\n    // Sort wallet accounts alphabetically by fiat, crypto, then virtual.\n    const sorted_accounts = useMemo(() => {\n        if (!modified_accounts) return;\n\n        return [...modified_accounts].sort((a, b) => {\n            if (a.is_virtual !== b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if (a.currency_config?.is_crypto !== b.currency_config?.is_crypto) {\n                return a.currency_config?.is_crypto ? 1 : -1;\n            }\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        });\n    }, [modified_accounts]);\n\n    return {\n        /** The list of wallet accounts for the current user. */\n        data: sorted_accounts,\n        ...rest,\n    };\n};\n\nexport default useWalletAccountsList;\n","import { useMemo } from 'react';\nimport useWalletAccountsList from './useWalletAccountsList';\n\n/** A custom hook that returns the wallet object for the current active wallet. */\nconst useActiveWalletAccount = () => {\n    const { data, ...rest } = useWalletAccountsList();\n    const active_wallet = useMemo(() => data?.find(wallet => wallet.is_active), [data]);\n\n    return {\n        /** User's current active wallet. */\n        data: active_wallet,\n        ...rest,\n    };\n};\n\nexport default useActiveWalletAccount;\n","import { useMemo } from 'react';\nimport useDerivAccountsList from './useDerivAccountsList';\nimport useActiveWalletAccount from './useActiveWalletAccount';\n\n/** A custom hook that gets the active linked trading account for the current user. */\nconst useActiveLinkedToTradingAccount = () => {\n    const { data: account_list_data } = useDerivAccountsList();\n    const { data: wallet_account_data } = useActiveWalletAccount();\n\n    const linkedDtradeLoginId = wallet_account_data?.linked_to?.find(\n        linked => linked.loginid && linked?.platform === 'dtrade'\n    )?.loginid;\n\n    const matchingTradingAccount = account_list_data?.filter(account => account.loginid === linkedDtradeLoginId)[0];\n\n    const modified_account = useMemo(() => {\n        if (!account_list_data || !wallet_account_data) return undefined;\n        return { ...matchingTradingAccount };\n    }, [account_list_data, matchingTradingAccount, wallet_account_data]);\n\n    return {\n        /** The active linked trading account for the current user. */\n        data: modified_account,\n    };\n};\n\nexport default useActiveLinkedToTradingAccount;\n","import { useMemo } from 'react';\nimport useDerivAccountsList from './useDerivAccountsList';\nimport useCurrencyConfig from './useCurrencyConfig';\n\n/** A custom hook that gets the list of all trading accounts for the current user. */\nconst useTradingAccountsList = () => {\n    const { data: account_list_data, ...rest } = useDerivAccountsList();\n    const { getConfig } = useCurrencyConfig();\n\n    // Filter out non-trading accounts.\n    const filtered_accounts = useMemo(\n        () => account_list_data?.filter(account => account.is_trading),\n        [account_list_data]\n    );\n\n    // Add additional information to each trading account.\n    const modified_accounts = useMemo(() => {\n        return filtered_accounts?.map(trading => ({\n            ...trading,\n            first_real_loginid: filtered_accounts?.find(account => account.account_type === 'real')?.loginid[0],\n            demo_loginid: filtered_accounts?.find(account => account.account_type === 'demo')?.loginid,\n        }));\n    }, [filtered_accounts]);\n\n    const fiat_account =\n        modified_accounts?.find(account => getConfig(account.currency ?? '')?.is_fiat)?.currency ?? 'USD';\n\n    return {\n        /** The list of trading accounts for the current user. */\n        data: modified_accounts,\n        /** The currency of the fiat account. */\n        fiat_account,\n        ...rest,\n    };\n};\n\nexport default useTradingAccountsList;\n","import { useMemo } from 'react';\nimport useTradingAccountsList from './useTradingAccountsList';\n\n/** A custom hook that returns the trading object for the current active trading. */\nconst useActiveTradingAccount = () => {\n    const { data, ...rest } = useTradingAccountsList();\n    const active_trading = useMemo(() => data?.find(trading => trading.is_active), [data]);\n\n    return {\n        /** User's current active trading. */\n        data: active_trading,\n        ...rest,\n    };\n};\n\nexport default useActiveTradingAccount;\n","import { useEffect } from 'react';\nimport useAuthorize from './useAuthorize';\nimport useSubscription from '../useSubscription';\nimport { displayMoney } from '../utils';\nimport useActiveWalletAccount from './useActiveWalletAccount';\n\n/**\n * Hook to display live, subscribed balance.\n * Use when you have only one wallet on screen.\n */\nconst useActiveWalletBalance = () => {\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { data: account } = useAuthorize();\n\n    const { subscribe, data: balanceData, unsubscribe, ...rest } = useSubscription('balance');\n\n    const balance = balanceData?.balance?.balance || 0;\n    const currencyCode = balanceData?.balance?.currency || 'USD';\n\n    useEffect(() => {\n        subscribe();\n\n        return () => unsubscribe();\n    }, [subscribe]);\n\n    const displayBalance = displayMoney(balance, currencyCode, {\n        fractional_digits: activeWallet?.currency_config?.fractional_digits,\n        preferred_language: account?.preferred_language,\n    });\n\n    return {\n        data: balanceData,\n        displayBalance,\n        ...rest,\n    };\n};\n\nexport default useActiveWalletBalance;\n","import { useRef, useState } from 'react';\nimport { TSocketRequestPayload, TSocketResponseData } from '../../types';\nimport { hashObject } from '../utils';\nimport { useAPIContext } from '../APIProvider';\n\ntype TCurrencyPayload = Exclude<\n    NonNullable<TSocketRequestPayload<'exchange_rates'>>['payload']['target_currency'],\n    undefined\n>;\ntype TCurrencyRateData = NonNullable<TSocketResponseData<'exchange_rates'>['exchange_rates']>['rates'];\ntype TCurrencyExchangeSubscribeFunction<T> = { base_currency: T; target_currencies: T[] };\n\nconst useExchangeRates = <T extends TCurrencyPayload>() => {\n    const { subscribe: _subscribe, unsubscribe: _unsubscribe } = useAPIContext();\n    const exchangeRatesSubscriptions = useRef<string[]>([]);\n    const [data, setData] = useState<Record<TCurrencyPayload, TCurrencyRateData>>();\n\n    const subscribe = async ({ base_currency, target_currencies }: TCurrencyExchangeSubscribeFunction<T>) => {\n        await Promise.all(\n            target_currencies.map(async c => {\n                const { id, subscription } = await _subscribe('exchange_rates', {\n                    payload: { base_currency, target_currency: c },\n                });\n                if (!exchangeRatesSubscriptions.current.includes(id)) {\n                    exchangeRatesSubscriptions.current.push(id);\n                    subscription.subscribe((response: TSocketResponseData<'exchange_rates'>) => {\n                        const rates = response.exchange_rates?.rates;\n                        if (rates) {\n                            setData(prev => {\n                                const currentData = { ...(prev ?? {}) };\n                                if (currentData) {\n                                    currentData[base_currency] = { ...currentData[base_currency], ...rates };\n                                    return currentData;\n                                }\n                                return { [base_currency]: rates };\n                            });\n                        }\n                    });\n                }\n            })\n        );\n    };\n\n    const unsubscribe = async (payload: TCurrencyExchangeSubscribeFunction<T>) => {\n        if (payload) {\n            const id = await hashObject({ name: 'exchange_rates', payload });\n            exchangeRatesSubscriptions.current = exchangeRatesSubscriptions.current.filter(s => s !== id);\n            _unsubscribe(id);\n            setData(prev => {\n                const currData = { ...(prev ?? {}) };\n                delete currData[payload.base_currency];\n                return currData;\n            });\n            return;\n        }\n        exchangeRatesSubscriptions.current.forEach(s => _unsubscribe(s));\n    };\n\n    const getExchangeRate = (base: string, target: string) => {\n        if (data) {\n            return data?.[base]?.[target] ?? 1;\n        }\n        return 1;\n    };\n\n    return { data, subscribe, unsubscribe, getExchangeRate };\n};\n\nexport default useExchangeRates;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport { displayMoney } from '../utils';\nimport useExchangeRates from './useExchangeRates';\nimport useTradingAccountsList from './useTradingAccountsList';\n\n/** A custom hook that gets the list of created cTrader accounts. */\nconst useCtraderAccountsList = () => {\n    const { data: authorize_data, isSuccess } = useAuthorize();\n    const { data: ctrader_accounts, ...rest } = useQuery('trading_platform_accounts', {\n        payload: { platform: 'ctrader' },\n        options: { enabled: isSuccess },\n    });\n    const { getConfig } = useCurrencyConfig();\n    const { fiat_account } = useTradingAccountsList();\n    const { getExchangeRate } = useExchangeRates();\n\n    /** Adding neccesary properties to cTrader accounts */\n    const modified_ctrader_accounts = useMemo(\n        () =>\n            ctrader_accounts?.trading_platform_accounts?.map(account => {\n                const balance = account.balance ?? 0;\n                return {\n                    ...account,\n                    /** Account's currency config information */\n                    currency_config: account.currency ? getConfig(account.currency) : undefined,\n                    /** The id of the cTrader account */\n                    id: account.account_id,\n                    /** indicating whether the account is a virtual-money account. */\n                    is_virtual: account.account_type === 'demo',\n                    /** Landing company shortcode the account belongs to. */\n                    landing_company_name: account.landing_company_short,\n                    /** The platform of the account */\n                    platform: 'ctrader' as const,\n                    /** Formatted display balance */\n                    formatted_balance: displayMoney(account.balance || 0, account.currency || 'USD', {\n                        preferred_language: authorize_data?.preferred_language,\n                    }),\n                    /** Converted balance from the exchange rate */\n                    converted_balance: getExchangeRate(fiat_account, account.currency ?? 'USD') * balance,\n                };\n            }),\n        [\n            authorize_data?.preferred_language,\n            fiat_account,\n            getConfig,\n            getExchangeRate,\n            ctrader_accounts?.trading_platform_accounts,\n        ]\n    );\n    return {\n        /** List of all created cTrader accounts */\n        data: modified_ctrader_accounts,\n        ...rest,\n    };\n};\n\nexport default useCtraderAccountsList;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport { displayMoney } from '../utils';\nimport useTradingAccountsList from './useTradingAccountsList';\nimport useExchangeRates from './useExchangeRates';\n\n/** A custom hook that gets the list of created Deriv X accounts. */\nconst useDxtradeAccountsList = () => {\n    const { data: authorize_data, isSuccess } = useAuthorize();\n    const { data: dxtrade_accounts, ...rest } = useQuery('trading_platform_accounts', {\n        payload: { platform: 'dxtrade' },\n        options: { enabled: isSuccess },\n    });\n    const { getConfig } = useCurrencyConfig();\n    const { getExchangeRate } = useExchangeRates();\n    const { fiat_account } = useTradingAccountsList();\n\n    /** Adding necessary properties to Deriv X accounts */\n    const modified_dxtrade_accounts = useMemo(\n        () =>\n            dxtrade_accounts?.trading_platform_accounts?.map(account => {\n                const balance = account.balance ?? 0;\n                return {\n                    ...account,\n                    /** Account's currency config information */\n                    currency_config: account.currency ? getConfig(account.currency) : undefined,\n                    /** The balance of the account in currency format. */\n                    display_balance: displayMoney(account?.balance || 0, account?.currency || 'USD', {\n                        preferred_language: authorize_data?.preferred_language,\n                    }),\n                    /** indicating whether the account is a virtual-money account. */\n                    is_virtual: account.account_type === 'demo',\n                    /** Landing company shortcode the account belongs to. */\n                    landing_company_name: account.landing_company_short,\n                    /** The platform of the account */\n                    platform: 'dxtrade' as const,\n                    /** Converted balance from the exchange rate */\n                    converted_balance: getExchangeRate(fiat_account, account.currency ?? 'USD') * balance,\n                };\n            }),\n        [\n            authorize_data?.preferred_language,\n            dxtrade_accounts?.trading_platform_accounts,\n            fiat_account,\n            getConfig,\n            getExchangeRate,\n        ]\n    );\n\n    return {\n        /** List of all created Deriv X accounts */\n        data: modified_dxtrade_accounts,\n        ...rest,\n    };\n};\n\nexport default useDxtradeAccountsList;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport { displayMoney } from '../utils';\nimport useTradingAccountsList from './useTradingAccountsList';\nimport useExchangeRates from './useExchangeRates';\n\n/** A custom hook that gets the list created MT5 accounts of the user. */\nconst useMT5AccountsList = () => {\n    const { data: authorize_data, isSuccess } = useAuthorize();\n    const { getConfig } = useCurrencyConfig();\n    const { fiat_account } = useTradingAccountsList();\n    const { getExchangeRate } = useExchangeRates();\n\n    const { data: mt5_accounts, ...mt5_accounts_rest } = useQuery('mt5_login_list', {\n        options: { enabled: isSuccess },\n    });\n\n    /**\n     * @description The list of created MT5 accounts\n     */\n    const modified_mt5_accounts = useMemo(() => {\n        return mt5_accounts?.mt5_login_list?.map(account => {\n            const balance = account.balance ?? 0;\n            return {\n                ...account,\n                /** Account's currency config information */\n                currency_config: account.currency ? getConfig(account.currency) : undefined,\n                /** The formatted display login of the account */\n                display_login: account.login?.replace(/^(MT[DR]?)/, ''),\n                /** Landing company shortcode the account belongs to. */\n                landing_company_name: account.landing_company_short,\n                /** The id of the account */\n                loginid: account.login,\n                /** The balance of the account in currency format. */\n                display_balance: displayMoney(account.balance || 0, account.currency || 'USD', {\n                    preferred_language: authorize_data?.preferred_language,\n                }),\n                /** indicating whether the account is a virtual-money account. */\n                is_virtual: account.account_type === 'demo',\n                /** The platform of the account */\n                platform: 'mt5' as const,\n                /** Converted balance from the exchange rate */\n                converted_balance: getExchangeRate(fiat_account, account.currency ?? 'USD') * balance,\n            };\n        });\n    }, [authorize_data?.preferred_language, fiat_account, getConfig, getExchangeRate, mt5_accounts?.mt5_login_list]);\n\n    return {\n        /** The list of created MT5 accounts */\n        data: modified_mt5_accounts,\n        ...mt5_accounts_rest,\n    };\n};\n\nexport default useMT5AccountsList;\n","import { useMemo } from 'react';\n\nimport useCtraderAccountsList from './useCtraderAccountsList';\nimport useDxtradeAccountsList from './useDxtradeAccountsList';\nimport useMT5AccountsList from './useMT5AccountsList';\n\n/** A custom hook that gets the list all created CFD accounts of the user. */\nconst useCFDAccountsList = () => {\n    const {\n        data: mt5_accounts,\n        isError: isMT5AccountsListError,\n        isLoading: isMT5AccountsListLoading,\n        isSuccess: isMT5AccountsListSuccess,\n    } = useMT5AccountsList();\n    const {\n        data: dxtrade_accounts,\n        isError: isDxtradeAccountsListError,\n        isLoading: isDxtradeAccountsListLoading,\n        isSuccess: isDxtradeAccountsListSuccess,\n    } = useDxtradeAccountsList();\n    const {\n        data: ctrader_accounts,\n        isError: isCtraderAccountsListError,\n        isLoading: CtraderAccountsListLoading,\n        isSuccess: isCtraderAccountsListSuccess,\n    } = useCtraderAccountsList();\n\n    const data = useMemo(() => {\n        if (!mt5_accounts || !dxtrade_accounts || !ctrader_accounts) return;\n\n        return {\n            mt5: mt5_accounts,\n            dxtrade: dxtrade_accounts,\n            ctrader: ctrader_accounts,\n        };\n    }, [mt5_accounts, dxtrade_accounts, ctrader_accounts]);\n\n    const isError = isMT5AccountsListError || isDxtradeAccountsListError || isCtraderAccountsListError;\n\n    const isLoading = isMT5AccountsListLoading || isDxtradeAccountsListLoading || CtraderAccountsListLoading;\n\n    const isSuccess = isMT5AccountsListSuccess && isDxtradeAccountsListSuccess && isCtraderAccountsListSuccess;\n\n    return {\n        data,\n        isError,\n        isLoading,\n        isSuccess,\n    };\n};\n\nexport default useCFDAccountsList;\n","import { useMemo } from 'react';\nimport useDerivAccountsList from './useDerivAccountsList';\nimport useCFDAccountsList from './useCFDAccountsList';\n\n/** A custom hook to get all user accounts, including external apps accounts */\nconst useAllAccountsList = () => {\n    const {\n        data: accountsList,\n        isError: isAccountsListError,\n        isLoading: isAccountsListLoading,\n    } = useDerivAccountsList();\n    const {\n        data: cfdsList,\n        isError: isCFDAccountsListError,\n        isLoading: isCFDAccountsListLoading,\n    } = useCFDAccountsList();\n\n    const accounts = useMemo(\n        () => ({\n            wallets: accountsList?.filter(account => account.is_wallet),\n            dtrade: accountsList?.filter(account => account.is_trading),\n            ...cfdsList,\n        }),\n        [accountsList, cfdsList]\n    );\n    const isError = isAccountsListError || isCFDAccountsListError;\n    const isLoading = isAccountsListLoading || isCFDAccountsListLoading;\n\n    return {\n        data: accounts,\n        isError,\n        isLoading,\n    };\n};\n\nexport default useAllAccountsList;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\n\n/** A custom hook that gets the list of available wallets. */\nconst useAvailableWallets = () => {\n    const { isSuccess } = useAuthorize();\n    const { data, ...rest } = useQuery('available_accounts', {\n        payload: {\n            categories: ['wallet'],\n        },\n        options: {\n            enabled: isSuccess,\n        },\n    });\n\n    const modifiedData = useMemo(() => {\n        if (!data?.available_accounts?.wallets) return;\n\n        return data.available_accounts.wallets;\n    }, [data]);\n\n    return {\n        /** List of available wallet accounts to create */\n        data: modifiedData,\n        ...rest,\n    };\n};\n\nexport default useAvailableWallets;\n","import { useCallback, useMemo } from 'react';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport useWalletAccountsList from './useWalletAccountsList';\nimport useAvailableWallets from './useAvailableWallets';\n\n/** A custom hook that gets the list of added and non-added wallet accounts. */\nconst useAllWalletAccounts = () => {\n    const { data: nonAddedWallets, ...rest } = useAvailableWallets();\n    const { data: addedWallets } = useWalletAccountsList();\n    const { getConfig } = useCurrencyConfig();\n\n    /** Get all the added and non-added wallets account */\n    const modifiedWallets = useMemo(() => {\n        const nonVirtualWallets = addedWallets?.filter(wallet => !wallet.is_virtual);\n\n        /** Modify added wallets list with adding `is_added` and `is_crypto` flag */\n        const modifiedAddedWallets = nonVirtualWallets?.map(wallet => ({\n            currency: wallet.currency,\n            landing_company_name: wallet.landing_company_name,\n            is_added: true,\n            is_crypto: wallet.currency ? getConfig(wallet.currency)?.is_crypto : false,\n        }));\n\n        /** Modify non-added wallets list with adding `is_added` and `is_crypto` flag */\n        const modifiedNonAddedWallets = nonAddedWallets?.map(wallet => ({\n            currency: wallet.currency,\n            landing_company_name: wallet.landing_company,\n            is_added: false,\n            is_crypto: wallet.account_type === 'crypto',\n        }));\n\n        return [...(modifiedAddedWallets || []), ...(modifiedNonAddedWallets || [])];\n    }, [nonAddedWallets, addedWallets, getConfig]);\n\n    /** Function to sort wallet based on currency */\n    const sortWalletsByCurrency = useCallback(\n        (a: typeof modifiedWallets[number], b: typeof modifiedWallets[number]) => {\n            if (a.is_crypto !== b.is_crypto) return a.is_crypto ? 1 : -1;\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        },\n        []\n    );\n\n    /** Sort the wallets by fiat, crypto, then virtual */\n    const sortedWallets = useMemo(() => {\n        if (!modifiedWallets) return;\n\n        // Sort wallets by non-added wallets then added wallets\n        modifiedWallets.sort((a, b) => {\n            if (a.is_added !== b.is_added) return a.is_added ? 1 : -1;\n\n            return 0;\n        });\n\n        // Sort the added wallets alphabetically by fiat, crypto, then virtual (if any)\n        modifiedWallets.sort((a, b) => {\n            if (!a.is_added || !b.is_added) return 0;\n            return sortWalletsByCurrency(a, b);\n        });\n\n        // Sort the non-added wallets alphabetically by fiat, crypto, then virtual (if any)\n        modifiedWallets.sort((a, b) => {\n            if (a.is_added || b.is_added) return 0;\n            return sortWalletsByCurrency(a, b);\n        });\n\n        return [...modifiedWallets];\n    }, [modifiedWallets, sortWalletsByCurrency]);\n\n    return {\n        /** Sorted wallets accounts */\n        data: sortedWallets,\n        ...rest,\n    };\n};\n\nexport default useAllWalletAccounts;\n","import { useMemo } from 'react';\nimport useGetAccountStatus from './useGetAccountStatus';\n\n/** A custom hook to get the verification status (basically any poi, poa, poinc, poo) of the current user. */\nconst useAuthentication = () => {\n    const { data: get_account_status_data, ...rest } = useGetAccountStatus();\n\n    const modified_account_status = useMemo(() => {\n        if (!get_account_status_data) return;\n\n        const needs_verification = new Set(get_account_status_data.authentication?.needs_verification);\n        const account_status = new Set(get_account_status_data?.status);\n\n        return {\n            ...get_account_status_data.authentication,\n            /** client has been authenticated with IDV photo ID feature */\n            is_authenticated_with_idv_photoid: account_status.has('is_authenticated_with_idv_photoid'),\n            /** client is required to verify their document (proof of address) */\n            is_poa_needed: needs_verification.has('document'),\n            /** client is required to verify their identity */\n            is_poi_needed: needs_verification.has('identity'),\n            /** client has been age-verified */\n            is_age_verified: account_status.has('age_verification'),\n            /** client is prevented from verifying from idv */\n            is_idv_disallowed: account_status.has('idv_disallowed'),\n            /** client IDV is revoked */\n            is_idv_revoked: account_status.has('idv_revoked'),\n            /** client is allowed to perform POI and POA (allow uploading documents) */\n            is_allow_document_upload: account_status.has('allow_document_upload'),\n            /** client can resubmit POI documents */\n            is_poi_resubmission_allowed: account_status.has('allow_poi_resubmission'),\n            /** client can resubmit POA documents */\n            is_poa_resubmission_allowed: account_status.has('allow_poa_resubmission'),\n            /** client's name in POI documents does not match */\n            is_poi_name_mismatch: account_status.has('poi_name_mismatch'),\n            /** client's name in POA documents does not match */\n            is_poa_address_mismatch: account_status.has('poa_address_mismatch'),\n            /** client has attempted POA before */\n            has_poa_been_attempted: get_account_status_data?.authentication?.document?.status !== 'none',\n            /** client has attempted POI before */\n            has_poi_been_attempted: get_account_status_data?.authentication?.identity?.status !== 'none',\n            /** client's poi verification status */\n            poi_status: get_account_status_data?.authentication?.identity?.status,\n            /** client's poa verification status */\n            poa_status: get_account_status_data?.authentication?.document?.status,\n            /** client's risk classification: `low`, `standard`, `high`.  */\n            risk_classification: get_account_status_data?.risk_classification,\n        };\n    }, [get_account_status_data]);\n\n    return {\n        data: modified_account_status,\n        ...rest,\n    };\n};\n\nexport default useAuthentication;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useSettings from './useSettings';\n\n/** A custom hook that returns the available landing companies of the user's country. */\nconst useLandingCompany = () => {\n    const { data: settings_data } = useSettings();\n    const { data, ...rest } = useQuery('landing_company', {\n        payload: { landing_company: settings_data?.country_code || '' },\n        options: { enabled: Boolean(settings_data?.country_code) },\n    });\n\n    // Add additional information to the landing company response.\n    const modified_landing_company = useMemo(() => {\n        if (!data?.landing_company) return;\n\n        return { ...data.landing_company };\n    }, [data?.landing_company]);\n\n    return {\n        /** The landing company response. */\n        data: modified_landing_company,\n        ...rest,\n    };\n};\n\nexport default useLandingCompany;\n","import { useMemo } from 'react';\nimport useLandingCompany from './useLandingCompany';\n\n/**\n * A custom hook that provides flags to determine the accessibility status of cTrader and Dxtrade based on the current country of residence.\n */\nconst useAccesiblePlatforms = () => {\n    const { data: landing_company, ...rest } = useLandingCompany();\n\n    const modified_accesible_platform = useMemo(() => {\n        if (!landing_company) return;\n\n        /** check if ctrader jurisdiction is offered in the landing_company response  */\n        const is_ctrader_available = landing_company?.ctrader?.all?.standard === 'svg';\n        /** check if dxtrade is in the landing_company response */\n        const is_dxtrade_available = landing_company?.dxtrade_all_company;\n        /** check if MT5 is in the landing_company response */\n        const is_mt5_available =\n            landing_company?.mt_financial_company ||\n            landing_company?.mt_gaming_company ||\n            landing_company?.mt_all_company;\n\n        return {\n            /** is ctrader accessible for this country of residence */\n            is_ctrader_available: !!is_ctrader_available,\n            /** is dxtrade accessible for this country of residence */\n            is_dxtrade_available: !!is_dxtrade_available,\n            /** is mt5 accessible for this country of residence */\n            is_mt5_available: !!is_mt5_available,\n        };\n    }, [landing_company]);\n\n    return {\n        data: modified_accesible_platform,\n        ...rest,\n    };\n};\n\nexport default useAccesiblePlatforms;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\n\nconst market_type_to_leverage_mapper: Record<string, number> = {\n    gaming: 500,\n    financial: 1000,\n    all: 100,\n};\n\n/** A custom hook to get the list of available MT5 accounts. */\nconst useAvailableMT5Accounts = () => {\n    const { isSuccess } = useAuthorize();\n    const { data: mt5_available_accounts, ...rest } = useQuery('trading_platform_available_accounts', {\n        payload: { platform: 'mt5' },\n        options: { enabled: isSuccess },\n    });\n\n    const modified_mt5_available_accounts = useMemo(\n        () =>\n            mt5_available_accounts?.trading_platform_available_accounts?.map(account => {\n                return {\n                    ...account,\n                    /** The market type for the account */\n                    market_type: account.market_type === 'gaming' ? 'synthetic' : account.market_type,\n                    /** The platform for the account */\n                    platform: 'mt5',\n                    /** Leverage for the account */\n                    leverage:\n                        market_type_to_leverage_mapper[\n                            account.market_type as keyof typeof market_type_to_leverage_mapper\n                        ],\n                } as const;\n            }),\n        [mt5_available_accounts?.trading_platform_available_accounts]\n    );\n\n    return {\n        /** The available MT5 accounts */\n        data: modified_mt5_available_accounts,\n        ...rest,\n    };\n};\n\nexport default useAvailableMT5Accounts;\n","import { useMemo } from 'react';\nimport useGetAccountStatus from './useGetAccountStatus';\n\n/** A custom hook to check the cashier validations for the cashier locked scenarios. */\nconst useCashierValidation = () => {\n    const { data: get_account_status_data, ...rest } = useGetAccountStatus();\n\n    const modified_cashier_validation = useMemo(() => {\n        if (!get_account_status_data?.cashier_validation) return;\n\n        const cashier_validation = new Set(get_account_status_data?.cashier_validation);\n\n        return {\n            transfer_blocked: cashier_validation.has('transfer_blocked'),\n            no_residence: cashier_validation.has('no_residence'),\n            unwelcome_status: cashier_validation.has('unwelcome_status'),\n            self_exclusion: cashier_validation.has('SelfExclusion'),\n            no_withdrawal_or_trading_status: cashier_validation.has('no_withdrawal_or_trading_status'),\n            only_pa_withdrawals_allowed_status: cashier_validation.has('only_pa_withdrawals_allowed_status'),\n            withdraw_service_unavailable_for_pa: cashier_validation.has('WithdrawServiceUnavailableForPA'),\n            withdrawal_locked_status: cashier_validation.has('withdrawal_locked_status'),\n            documents_expired: cashier_validation.has('documents_expired'),\n            cashier_locked_status: cashier_validation.has('cashier_locked_status'),\n            disabled_status: cashier_validation.has('disabled_status'),\n            financial_assessment_required: cashier_validation.has('FinancialAssessmentRequired'),\n            ask_currency: cashier_validation.has('ASK_CURRENCY'),\n            ask_authenticate: cashier_validation.has('ASK_AUTHENTICATE'),\n            ask_financial_risk_approval: cashier_validation.has('ASK_FINANCIAL_RISK_APPROVAL'),\n            ask_tin_information: cashier_validation.has('ASK_TIN_INFORMATION'),\n            ask_self_exclusion_max_turnover_set: cashier_validation.has('ASK_SELF_EXCLUSION_MAX_TURNOVER_SET'),\n            ask_fix_details: cashier_validation.has('ASK_FIX_DETAILS'),\n            pa_commision_withdrawal_limit: cashier_validation.has('PACommisionWithdrawalLimit'),\n        };\n    }, [get_account_status_data?.cashier_validation]);\n\n    return {\n        /** The cashier validation response. */\n        data: modified_cashier_validation,\n        ...rest,\n    };\n};\n\nexport default useCashierValidation;\n","import useMutation from '../useMutation';\n\n/**\n * A custom hook that calls the `account_closure` api. This call allows clients to close all their accounts (including virtual-money account)\n */\nconst useCloseDerivAccount = () => {\n    const response = useMutation('account_closure');\n    return response;\n};\n\nexport default useCloseDerivAccount;\n","import { useMemo } from 'react';\nimport useActiveWalletAccount from './useActiveWalletAccount';\nimport useAvailableMT5Accounts from './useAvailableMT5Accounts';\nimport useLandingCompany from './useLandingCompany';\nimport useMT5AccountsList from './useMT5AccountsList';\n\n// Remove the hardcoded values and use the values from the API once it's ready\nexport const MARKET_TYPE = {\n    ALL: 'all',\n    FINANCIAL: 'financial',\n    SYNTHETIC: 'synthetic',\n} as const;\n\n// Remove the hardcoded values and use the values from the API once it's ready\nexport const CFD_PLATFORMS = {\n    CFDS: 'CFDs',\n    CTRADER: 'ctrader',\n    DXTRADE: 'dxtrade',\n    MT5: 'mt5',\n} as const;\n\n// Remove the hardcoded values and use the values from the API once it's ready\nexport const JURISDICTION = {\n    BVI: 'bvi',\n    LABUAN: 'labuan',\n    MALTAINVEST: 'maltainvest',\n    SVG: 'svg',\n    VANUATU: 'vanuatu',\n} as const;\n\n// Remove the hardcoded values and use the values from the API once it's ready\nconst dxtradeAccount = {\n    leverage: 0,\n    market_type: MARKET_TYPE.ALL,\n    name: 'Deriv X',\n    platform: CFD_PLATFORMS.DXTRADE,\n    requirements: {\n        after_first_deposit: {\n            financial_assessment: [''],\n        },\n        compliance: {\n            mt5: [''],\n            tax_information: [''],\n        },\n        signup: [''],\n    },\n    shortcode: JURISDICTION.SVG,\n};\n\n// Remove the hardcoded values and use the values from the API once it's ready\nconst ctraderAccount = {\n    leverage: 0,\n    market_type: MARKET_TYPE.ALL,\n    name: 'cTrader',\n    platform: CFD_PLATFORMS.CTRADER,\n    requirements: {\n        after_first_deposit: {\n            financial_assessment: [''],\n        },\n        compliance: {\n            mt5: [''],\n            tax_information: [''],\n        },\n        signup: [''],\n    },\n    shortcode: JURISDICTION.SVG,\n};\n\n/** A custom hook that gets compare accounts values. */\nconst useCFDCompareAccounts = () => {\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { is_virtual: isDemo } = activeWallet || {};\n\n    const { data: allAvailableMt5Accounts } = useAvailableMT5Accounts();\n    const { data: addedAccounts, ...rest } = useMT5AccountsList();\n\n    const modifiedMt5Data = useMemo(() => {\n        if (!allAvailableMt5Accounts || !addedAccounts) return;\n\n        return allAvailableMt5Accounts?.map(availableAccount => {\n            const createdAccount = addedAccounts?.find(account => {\n                return (\n                    availableAccount.market_type === account.market_type &&\n                    availableAccount.shortcode === account.landing_company_short\n                );\n            });\n            if (createdAccount)\n                return {\n                    ...availableAccount,\n\n                    /** Determine if the account is added or not */\n                    is_added: true,\n                } as const;\n\n            return {\n                ...availableAccount,\n\n                /** Determine if the account is added or not */\n                is_added: false,\n            } as const;\n        });\n    }, [addedAccounts, allAvailableMt5Accounts]);\n\n    // Sort the data by market_type to make sure the order is 'synthetic', 'financial', 'all'\n    const sortedMt5Accounts = useMemo(() => {\n        const marketTypeOrder = ['synthetic', 'financial', 'all'];\n\n        if (!modifiedMt5Data) return;\n\n        const sortedData = marketTypeOrder.reduce((acc, marketType) => {\n            const accounts = modifiedMt5Data.filter(account => account.market_type === marketType);\n            if (!accounts.length) return acc;\n            return [...acc, ...accounts];\n        }, [] as typeof modifiedMt5Data);\n\n        return sortedData;\n    }, [modifiedMt5Data]);\n\n    const { data: landingCompany } = useLandingCompany();\n\n    const hasDxtradeAccountAvailable = landingCompany?.dxtrade_all_company;\n    const hasCTraderAccountAvailable = landingCompany?.ctrader?.all?.standard === JURISDICTION.SVG;\n\n    const demoAvailableAccounts = useMemo(() => {\n        if (!sortedMt5Accounts) return;\n        return sortedMt5Accounts.filter(account => account.shortcode === JURISDICTION.SVG);\n    }, [sortedMt5Accounts]);\n\n    const modifiedData = useMemo(() => {\n        return {\n            ctraderAccount: hasCTraderAccountAvailable ? ctraderAccount : undefined,\n            dxtradeAccount: hasDxtradeAccountAvailable ? dxtradeAccount : undefined,\n            mt5Accounts: isDemo ? demoAvailableAccounts : sortedMt5Accounts,\n        };\n    }, [demoAvailableAccounts, hasCTraderAccountAvailable, hasDxtradeAccountAvailable, isDemo, sortedMt5Accounts]);\n\n    return {\n        data: modifiedData,\n        hasCTraderAccountAvailable,\n        hasDxtradeAccountAvailable,\n        ...rest,\n    };\n};\n\nexport default useCFDCompareAccounts;\n","import useMutation from '../useMutation';\n\n/** A custom hooks for cancelling crypto transaction  */\nconst useCancelCryptoTransaction = () => {\n    const { data, mutate, ...rest } = useMutation('cashier_withdrawal_cancel');\n\n    return {\n        /** The cancel crypto transaction response */\n        data: data?.cashier_withdrawal_cancel,\n        /** Function to cancel crypto transaction */\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useCancelCryptoTransaction;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TCashierParam = NonNullable<\n    Parameters<ReturnType<typeof useMutation<'cashier'>>['mutate']>\n>[0]['payload']['cashier'];\n\ntype TParams = Omit<\n    NonNullable<Parameters<ReturnType<typeof useMutation<'cashier'>>['mutate']>>[0]['payload'],\n    'cashier' | 'provider'\n>;\n\n/** A custom hook to get the deposit and withdrawal fiat address. */\nconst useCashierFiatAddress = () => {\n    const { data, mutate: _mutate, ...rest } = useMutation('cashier');\n    const iframe_url = typeof data?.cashier === 'string' ? `${data?.cashier}&DarkMode=off` : undefined;\n\n    const mutate = useCallback(\n        (cashier: TCashierParam, payload?: TParams) =>\n            _mutate({ payload: { cashier, provider: 'doughflow', ...payload } }),\n        [_mutate]\n    );\n\n    return {\n        /** The deposit/withdrawal fiat iframe */\n        data: iframe_url,\n        /** Function to get deposit/withdrawal fiat address */\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useCashierFiatAddress;\n","import { useEffect, useRef, useState } from 'react';\nimport { epochToMoment, toMoment } from '@deriv/utils';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { CryptoEstimations } from '@deriv/api-types';\nimport { TSocketError } from '../../types';\nimport useSubscription from '../useSubscription';\n\n/** A custom hook that returns the crypto_estimations fee for given currency code along with count_down and an unique_id */\nconst useCryptoEstimations = () => {\n    const { subscribe, data, error: subscription_error, unsubscribe } = useSubscription('crypto_estimations');\n    const [crypto_estimations_fee_details, setCryptoEstimationsFeeDetails] = useState<\n        CryptoEstimations['k']['withdrawal_fee']\n    >({});\n    const [crypto_estimations_fee_details_latest, setCryptoEstimationsFeeDetailsLatest] = useState<\n        CryptoEstimations['k']['withdrawal_fee']\n    >({});\n    const [currency_code, setCurrencyCode] = useState<string>('BTC');\n    const [error, setError] = useState<TSocketError<'crypto_estimations'>['error']>();\n    const [count_down, setCountDown] = useState<number>(0);\n    const [server_time, setServerTime] = useState<string>('');\n    const timer = useRef<NodeJS.Timeout | null>(null);\n\n    useEffect(() => {\n        if (data?.crypto_estimations?.[currency_code].withdrawal_fee?.expiry_time) {\n            setCryptoEstimationsFeeDetailsLatest(data?.crypto_estimations?.[currency_code].withdrawal_fee ?? {});\n        }\n    }, [currency_code, data]);\n\n    useEffect(() => {\n        if (subscription_error) setError(subscription_error as unknown as TSocketError<'crypto_estimations'>['error']);\n    }, [subscription_error]);\n\n    useEffect(() => {\n        if (crypto_estimations_fee_details_latest?.expiry_time && count_down === 0) {\n            setCryptoEstimationsFeeDetails(crypto_estimations_fee_details_latest);\n            const currentTime = toMoment();\n            setServerTime(`${currentTime.utc().format('HH:mm:ss')} GMT`);\n            const expiryTime =\n                epochToMoment(crypto_estimations_fee_details_latest?.expiry_time ?? 0).diff(currentTime, 'seconds') - 1;\n            setCountDown(expiryTime);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [count_down, crypto_estimations_fee_details_latest?.expiry_time]);\n\n    useEffect(() => {\n        timer.current = setTimeout(() => {\n            if (count_down === 1) {\n                clearTimeout(timer.current as NodeJS.Timeout);\n                setCountDown(prevTime => prevTime - 1);\n            } else if (count_down > 0) {\n                setCountDown(prevTime => prevTime - 1);\n            }\n        }, 1000);\n\n        return () => {\n            if (timer) {\n                clearInterval(timer.current as NodeJS.Timeout);\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [count_down]);\n\n    return {\n        count_down,\n        crypto_estimations_fee: crypto_estimations_fee_details?.value ?? 0,\n        crypto_estimations_fee_unique_id: crypto_estimations_fee_details?.unique_id ?? '',\n        crypto_estimations_fee_expiry_time: crypto_estimations_fee_details?.expiry_time ?? 0,\n        error,\n        getCryptoEstimations: subscribe,\n        setCurrencyCode,\n        server_time,\n        unsubscribeCryptoEstimations: unsubscribe,\n    };\n};\n\nexport default useCryptoEstimations;\n","import { useCallback, useMemo } from 'react';\nimport useQuery from '../useQuery';\n\n/** A custom hook to get the country config information from `residence_list` endpoint. */\nconst useCountryConfig = () => {\n    const { data: residence_list_data, ...rest } = useQuery('residence_list');\n\n    // Add additional information to the country config.\n    const modified_residence_list = useMemo(\n        () =>\n            residence_list_data?.residence_list?.map(country_config => {\n                return {\n                    ...country_config,\n                    /** Determine if the country is disabled */\n                    is_disabled: country_config.disabled !== undefined,\n                    /** 2-letter country code */\n                    code: `${country_config.value}`.toUpperCase(),\n                    /** Country name */\n                    name: `${country_config.text}`,\n                    /** Determine if the IDV service is supported for the country */\n                    is_idv_supported: country_config.identity?.services?.idv?.is_country_supported === 1,\n                    /** Determine if the Onfido service is supported for the country */\n                    is_onfido_supported: country_config.identity?.services?.onfido?.is_country_supported === 1,\n                };\n            }),\n        [residence_list_data?.residence_list]\n    );\n\n    // Transform the country config array into a record object.\n    const transformed_residence_list = useMemo(() => {\n        return modified_residence_list?.reduce<Record<string, typeof modified_residence_list[number]>>(\n            (previous, current) => ({ ...previous, [current.code]: current }),\n            {}\n        );\n    }, [modified_residence_list]);\n\n    const getConfig = useCallback(\n        (currency: string) => transformed_residence_list?.[currency as string],\n        [transformed_residence_list]\n    );\n\n    return {\n        /** Available countries and their information */\n        data: transformed_residence_list,\n        /** Returns the country config object for the given country code */\n        getConfig,\n        ...rest,\n    };\n};\n\nexport default useCountryConfig;\n","import { useMemo } from 'react';\nimport useMutation from '../useMutation';\nimport useInvalidateQuery from '../useInvalidateQuery';\n\n/** A custom hook that creates a new real trading account. */\nconst useCreateNewRealAccount = () => {\n    const invalidate = useInvalidateQuery();\n    const { data, ...rest } = useMutation('new_account_real', {\n        onSuccess: () => {\n            invalidate('authorize');\n        },\n    });\n\n    // Add additional information to the new real trading account response.\n    const modified_data = useMemo(() => {\n        if (!data?.new_account_real) return;\n\n        return { ...data?.new_account_real };\n    }, [data]);\n\n    return {\n        /** The response and the mutation of the new account real API request */\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useCreateNewRealAccount;\n","import { useMemo } from 'react';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useMutation from '../useMutation';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport { displayMoney } from '../utils';\n\n/** A custom hook to create new wallet account */\nconst useCreateWallet = () => {\n    const invalidate = useInvalidateQuery();\n    const { getConfig } = useCurrencyConfig();\n    const {\n        data,\n        mutate: _mutate,\n        ...rest\n    } = useMutation('new_account_wallet', {\n        onSuccess: () => {\n            invalidate('authorize');\n            invalidate('available_accounts');\n        },\n    });\n\n    const mutate = (params: Parameters<typeof _mutate>[0]['payload']) => {\n        return _mutate({ payload: params });\n    };\n\n    const modified_data = useMemo(() => {\n        if (!data?.new_account_wallet) return;\n        const currencyConfig = getConfig(data?.new_account_wallet.currency || 'USD');\n        return {\n            ...data.new_account_wallet,\n            /** The balance of the account in currency format. */\n            display_balance: displayMoney(0, currencyConfig?.display_code || 'USD', {\n                fractional_digits: currencyConfig?.fractional_digits,\n            }),\n        };\n    }, [data?.new_account_wallet, getConfig]);\n\n    return {\n        /** New account information */\n        data: modified_data,\n        /** A function to create new wallet */\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useCreateWallet;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { getTruncatedString } from '@deriv/utils';\nimport useSubscription from '../useSubscription';\nimport useActiveAccount from './useActiveAccount';\nimport useAuthorize from './useAuthorize';\nimport { displayMoney } from '../utils';\n\ntype TTransaction = NonNullable<\n    NonNullable<ReturnType<typeof useSubscription<'cashier_payments'>>['data']>['cashier_payments']\n>['crypto'][number];\n\ntype TStatus = TTransaction['status_code'];\n\ntype TDepositStatus = 'PENDING' | 'CONFIRMED' | 'ERROR';\n\ntype TWithdrawalStatus = Exclude<TStatus, TDepositStatus>;\n\n// Since BE sends the `status_code` for both `deposit` and `withdrawal` in the same field,\n// Here we modify the BE type to make `status_code` type more specific to the `transaction_type` field.\ntype TModifiedTransaction = Omit<TTransaction, 'status_code' | 'transaction_type'> &\n    (\n        | { transaction_type: 'deposit'; status_code: TDepositStatus }\n        | { transaction_type: 'withdrawal'; status_code: TWithdrawalStatus }\n    );\n\nconst getFormattedConfirmations = (transaction: TModifiedTransaction) => {\n    switch (transaction.status_code) {\n        case 'CONFIRMED':\n            return 'Confirmed';\n        case 'ERROR':\n            return 'NA';\n        default:\n            return transaction.confirmations ?? 'Pending';\n    }\n};\n\nconst getStatusName = (status_code: TModifiedTransaction['status_code']) => {\n    switch (status_code) {\n        case 'CONFIRMED':\n        case 'SENT':\n            return 'Successful';\n        case 'ERROR':\n        case 'REJECTED':\n        case 'REVERTED':\n            return 'Unsuccessful';\n        case 'PENDING':\n        case 'PERFORMING_BLOCKCHAIN_TXN':\n        case 'PROCESSING':\n        case 'REVERTING':\n        case 'VERIFIED':\n            return 'In process';\n        case 'CANCELLED':\n            return 'Cancelled';\n        case 'LOCKED':\n            return 'In review';\n        default:\n            return '';\n    }\n};\n\nconst getStatusDescription = (\n    transaction_type: TModifiedTransaction['transaction_type'],\n    status_code: TModifiedTransaction['status_code']\n) => {\n    switch (status_code) {\n        // deposit-specific:\n        case 'CONFIRMED':\n            return 'Your deposit is successful.';\n        case 'PENDING':\n            return \"We've received your request and are waiting for more blockchain confirmations.\";\n        // withdrawal-specific:\n        case 'CANCELLED':\n            return \"You've cancelled your withdrawal request.\";\n        case 'LOCKED':\n            return \"We're reviewing your withdrawal request. You may still cancel this transaction if you wish.\\nOnce we start processing, you won't be able to cancel.\";\n        case 'PERFORMING_BLOCKCHAIN_TXN':\n            return \"We're sending your request to the blockchain.\";\n        case 'PROCESSING':\n            return \"We're awaiting confirmation from the blockchain.\";\n        case 'REJECTED':\n        case 'REVERTED':\n            return \"Your withdrawal is unsuccessful. We've sent you an email with more information.\";\n        case 'REVERTING':\n        case 'VERIFIED':\n            return \"We're processing your withdrawal.\";\n        case 'SENT':\n            return 'Your withdrawal is successful.';\n        // both:\n        case 'ERROR':\n            return `Your ${transaction_type} is unsuccessful due to an error on the blockchain. Please contact ${\n                transaction_type === 'deposit' ? 'your crypto wallet service provider' : 'us via live chat'\n            } for more info.`;\n        default:\n            return '';\n    }\n};\n\n/** A custom hook that returns the list of pending crypto transactions for the current user. */\nconst useCryptoTransactions = () => {\n    const { subscribe, data, ...rest } = useSubscription('cashier_payments');\n    const [transactions, setTransactions] = useState<TModifiedTransaction[]>();\n\n    const {\n        data: { preferred_language },\n    } = useAuthorize();\n\n    const { data: account } = useActiveAccount();\n    const display_code = account?.currency_config?.display_code || 'USD';\n    const fractional_digits = account?.currency_config?.fractional_digits || 2;\n\n    // Reset transactions data\n    const resetData = useCallback(() => setTransactions(undefined), []);\n\n    useEffect(() => {\n        setTransactions(old_transactions => {\n            const new_transactions = data?.cashier_payments?.crypto as TModifiedTransaction[] | undefined;\n\n            if (!new_transactions) return old_transactions;\n\n            if (!old_transactions) return new_transactions;\n\n            const updated_transactions = [...old_transactions];\n\n            // For each new transaction, check if it exists in the old transactions.\n            new_transactions.forEach(new_transaction => {\n                // Find the index of the new transaction in the old transactions if exists.\n                const index = updated_transactions.findIndex(\n                    old_transaction => old_transaction.id === new_transaction.id\n                );\n\n                // If the new transaction does not exist in the old transactions, add it, otherwise update it.\n                if (index === -1) {\n                    updated_transactions.push(new_transaction);\n                } else {\n                    updated_transactions[index] = new_transaction;\n                }\n            });\n\n            return updated_transactions;\n        });\n    }, [data?.cashier_payments?.crypto]);\n\n    // Add additional information to each transaction.\n    const modified_transactions = useMemo(() => {\n        if (!transactions || !transactions.length) return undefined;\n\n        return transactions.map(transaction => ({\n            ...transaction,\n            /** Description of a transaction status */\n            description: getStatusDescription(transaction.transaction_type, transaction.status_code),\n            /** Formatted amount */\n            formatted_amount: displayMoney(transaction.amount || 0, display_code, {\n                fractional_digits,\n                preferred_language,\n            }),\n            /** Formatted transaction hash */\n            formatted_transaction_hash: transaction.transaction_hash\n                ? getTruncatedString(transaction.transaction_hash, { type: 'middle' })\n                : 'Pending',\n            /** Formatted address hash */\n            formatted_address_hash: transaction.address_hash\n                ? getTruncatedString(transaction.address_hash, { type: 'middle' })\n                : 'NA',\n            /** Formatted confirmations status */\n            formatted_confirmations: getFormattedConfirmations(transaction),\n            /** Determine if the transaction is a deposit or not. */\n            is_deposit: transaction.transaction_type === 'deposit',\n            /** Determine if the transaction is a withdrawal or not. */\n            is_withdrawal: transaction.transaction_type === 'withdrawal',\n            /** Status name */\n            status_name: getStatusName(transaction.status_code),\n        }));\n    }, [display_code, fractional_digits, preferred_language, transactions]);\n\n    // Sort transactions by submit time.\n    const sorted_transactions = useMemo(\n        () => modified_transactions?.sort((a, b) => b.submit_date - a.submit_date),\n        [modified_transactions]\n    );\n    // Get the last transaction if exists.\n    const last_transaction = modified_transactions?.[0];\n\n    return {\n        /** List of user transactions sorted by submit time. */\n        data: sorted_transactions,\n        /** Returns the last transaction if exists. */\n        last_transaction,\n        /** Reset transactions data */\n        resetData,\n        subscribe,\n        ...rest,\n    };\n};\n\nexport default useCryptoTransactions;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = Omit<\n    NonNullable<Parameters<ReturnType<typeof useMutation<'cashier'>>['mutate']>>[0]['payload'],\n    'cashier' | 'provider' | 'type'\n>;\n\n/** A custom hook that used for crypto withdrawal */\nconst useCryptoWithdrawal = () => {\n    const { mutate: _mutate, mutateAsync: _mutateAsync, ...rest } = useMutation('cashier');\n\n    const mutate = useCallback(\n        (payload: TPayload) =>\n            _mutate({ payload: { cashier: 'withdraw', provider: 'crypto', type: 'api', ...payload } }),\n        [_mutate]\n    );\n    const mutateAsync = useCallback(\n        (payload: TPayload) =>\n            _mutateAsync({ payload: { cashier: 'withdraw', provider: 'crypto', type: 'api', ...payload } }),\n        [_mutateAsync]\n    );\n\n    return {\n        /** Function to request for crypto withdrawal */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useCryptoWithdrawal;\n","import useQuery from '../useQuery';\nimport useActiveAccount from './useActiveAccount';\n\n/** A custom hook that get Service Token for CTrader Platform. */\nconst useCtraderServiceToken = () => {\n    const { data: account } = useActiveAccount();\n    const { data: ctrader_token, ...rest } = useQuery('service_token', {\n        payload: { service: 'ctrader', server: account?.is_virtual ? 'demo' : 'real' },\n    });\n\n    return {\n        /** return the ctrader account token */\n        data: ctrader_token?.service_token?.ctrader?.token,\n        ...rest,\n    };\n};\n\nexport default useCtraderServiceToken;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\n/** A custom hook to get the deposit crypto address. */\nconst useDepositCryptoAddress = () => {\n    const { data, mutate: _mutate, ...rest } = useMutation('cashier');\n    const deposit_address = typeof data?.cashier !== 'string' ? data?.cashier?.deposit?.address : undefined;\n\n    const mutate = useCallback(\n        () => _mutate({ payload: { cashier: 'deposit', provider: 'crypto', type: 'api' } }),\n        [_mutate]\n    );\n\n    return {\n        ...rest,\n        mutate,\n        data: deposit_address,\n    };\n};\n\nexport default useDepositCryptoAddress;\n","const DEFAULT_IMAGE_WIDTH = 2560;\nconst DEFAULT_IMAGE_QUALITY = 0.9;\nconst WORD_SIZE = 4;\n\ntype TCompressImageOption = {\n    maxWidth?: number;\n    quality?: number;\n};\n\ntype TBase64Image = {\n    filename: string;\n    src: string;\n};\n\ntype TCompressImage = TBase64Image & {\n    options?: TCompressImageOption;\n};\n\nexport type TFileObject = {\n    filename: File['name'];\n    buffer: FileReader['result'];\n    fileSize: File['size'];\n};\n\n/**\n * Compress an image and return it as a Blob.\n * @param {TCompressImage} params - The parameters for image compression.\n * @param {string} params.src - The source image URL or data URI.\n * @param {string} params.filename - The desired filename for the compressed image.\n * @param {Object} [params.options] - Options for image compression.\n * @param {number} [params.options.maxWidth=DEFAULT_IMAGE_WIDTH] - The maximum width for the compressed image.\n * @param {number} [params.options.quality=DEFAULT_IMAGE_QUALITY] - The image quality (0 to 1) for compression.\n * @returns {Promise<Blob>} A Promise that resolves with the compressed image as a Blob.\n */\nexport const compressImage = ({ src, filename, options }: TCompressImage): Promise<Blob> => {\n    const { maxWidth = DEFAULT_IMAGE_WIDTH, quality = DEFAULT_IMAGE_QUALITY } = options || {};\n\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.src = src;\n        image.onload = () => {\n            const canvas = document.createElement('canvas');\n            const canvas_context = canvas.getContext('2d');\n            if (!canvas_context || !(canvas_context instanceof CanvasRenderingContext2D)) {\n                return reject(new Error('Failed to get 2D context'));\n            }\n\n            if (image.naturalWidth > maxWidth) {\n                const width = DEFAULT_IMAGE_WIDTH;\n                const scaleFactor = width / image.naturalWidth;\n                canvas.width = width;\n                canvas.height = image.naturalHeight * scaleFactor;\n            } else {\n                canvas.width = image.naturalWidth;\n                canvas.height = image.naturalHeight;\n            }\n\n            canvas_context.fillStyle = 'transparent';\n            canvas_context.fillRect(0, 0, canvas.width, canvas.height);\n            canvas_context.save();\n            canvas_context.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n            canvas.toBlob(\n                blob => {\n                    if (!blob) return;\n                    const modified_filename = filename.replace(/\\.[^/.]+$/, '.jpg');\n                    const file = new Blob([blob], { type: 'image/jpeg' });\n                    file.lastModifiedDate = Date.now();\n                    file.name = modified_filename;\n                    resolve(file);\n                },\n                'image/jpeg',\n                quality\n            );\n        };\n    });\n};\n\n/**\n * Convert a File to a Base64 encoded image representation.\n * @param {File} file - The File object to convert to Base64.\n * @returns {Promise<TBase64Image>} A Promise that resolves with an object containing the Base64 image data and the filename.\n */\nexport const convertToBase64 = (file: File): Promise<TBase64Image> => {\n    return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onloadend = () => {\n            resolve({\n                src: reader.result?.toString() || '',\n                filename: file.name,\n            });\n        };\n    });\n};\n\n/**\n * Check if a given filename has a supported image format extension.\n *\n * @param {string} filename - The filename to check for a supported image format.\n * @returns {boolean} True if the filename has a supported image format extension, false otherwise.\n */\nexport const isSupportedImageFormat = (filename: string) => /\\.(png|jpg|jpeg|gif|pdf)$/gi.test(filename ?? '');\n\n/**\n * Convert image to base64 and cmpress an image file if it is a supported image format.\n *\n * @param {File} file - The File object to compress.\n * @returns {Promise<Blob>} A Promise that resolves with the compressed image as a Blob.\n */\nexport const compressImageFile = (file: File) => {\n    return new Promise<Blob>(resolve => {\n        if (isSupportedImageFormat(file.type)) {\n            convertToBase64(file).then(img => {\n                compressImage(img).then(resolve);\n            });\n        } else {\n            resolve(file);\n        }\n    });\n};\n\n/**\n * Get Uint8Array from number\n *\n * @param {num} number - The number to convert to Uint8Array.\n * @returns {Uint8Array} Uint8Array\n */\nexport function numToUint8Array(num: number) {\n    const typedArray = new Uint8Array(WORD_SIZE);\n    const dv = new DataView(typedArray.buffer);\n    dv.setUint32(0, num);\n    return typedArray;\n}\n\n/**\n * Turn binary into array of chunks\n *\n * @param {binary} Uint8Array - Uint8Array to be chunked.\n * @returns {Uint8Array[]} Array of Uint8Array chunks\n */\nexport const generateChunks = (binary: Uint8Array, { chunkSize = 16384 /* 16KB */ }) => {\n    const chunks = [];\n    for (let i = 0; i < binary.length; i++) {\n        const item = binary[i];\n        if (i % chunkSize === 0) {\n            chunks.push([item]);\n        } else {\n            chunks[chunks.length - 1].push(item);\n        }\n    }\n    return chunks.map(b => new Uint8Array(b)).concat(new Uint8Array([]));\n};\n\n/**\n * Read a file and return it as modified object with a buffer of the file contents.\n * @param {Blob} file - The file to read.\n * @returns {Promise<TFileObject>} A Promise that resolves with the file as a TFileObject.\n *\n */\nexport const readFile = (file: Blob) => {\n    const fr = new FileReader();\n    return new Promise<\n        | TFileObject\n        | {\n              message: string;\n          }\n    >(resolve => {\n        fr.onload = () => {\n            const fileMetadata = {\n                filename: file.name,\n                buffer: fr.result,\n                fileSize: file.size,\n            };\n            resolve(fileMetadata);\n        };\n\n        fr.onerror = () => {\n            resolve({\n                message: `Unable to read file ${file.name}`,\n            });\n        };\n\n        // Reading file\n        fr.readAsArrayBuffer(file);\n    });\n};\n","import { useCallback, useMemo, useState } from 'react';\nimport useMutation from '../useMutation';\nimport { compressImageFile, generateChunks, numToUint8Array, readFile } from '../utils';\nimport md5 from 'md5';\nimport { getActiveWebsocket } from '../APIProvider';\n\ntype TDocumentUploadPayload = Parameters<ReturnType<typeof useMutation<'document_upload'>>['mutate']>[0]['payload'];\ntype TUploadPayload = Omit<TDocumentUploadPayload, 'document_format' | 'expected_checksum' | 'file_size'> & {\n    file?: File;\n};\n\n/** A custom hook to handle document file uploads to our backend. */\nconst useDocumentUpload = () => {\n    const {\n        data,\n        isLoading: _isLoading,\n        isSuccess: _isSuccess,\n        mutateAsync,\n        status,\n        ...rest\n    } = useMutation('document_upload');\n    const [isDocumentUploaded, setIsDocumentUploaded] = useState(false);\n    const activeWebSocket = getActiveWebsocket();\n\n    const isLoading = _isLoading || (!isDocumentUploaded && status === 'success');\n    const isSuccess = _isSuccess && isDocumentUploaded;\n\n    const upload = useCallback(\n        async (payload: TUploadPayload) => {\n            if (!payload?.file) return Promise.reject(new Error('No file selected'));\n            const file = payload.file;\n            delete payload.file;\n            const fileBlob = await compressImageFile(file);\n            const modifiedFile = await readFile(fileBlob);\n            // @ts-expect-error type mismatch\n            const fileBuffer = new Uint8Array(modifiedFile.buffer);\n            const checksum = md5(Array.from(fileBuffer));\n\n            const updatedPayload = {\n                ...payload,\n                document_format: file.type\n                    .split('/')[1]\n                    .toLocaleUpperCase() as TDocumentUploadPayload['document_format'],\n                expected_checksum: checksum,\n                file_size: fileBuffer.length,\n                passthrough: {\n                    document_upload: true,\n                },\n            };\n            setIsDocumentUploaded(false);\n            await mutateAsync({ payload: updatedPayload }).then(async res => {\n                const chunks = generateChunks(fileBuffer, {});\n                const id = numToUint8Array(res?.document_upload?.upload_id || 0);\n                const type = numToUint8Array(res?.document_upload?.call_type || 0);\n\n                chunks.forEach(chunk => {\n                    const size = numToUint8Array(chunk.length);\n                    const payload = new Uint8Array([...type, ...id, ...size, ...chunk]);\n                    activeWebSocket?.send(payload);\n                });\n                setIsDocumentUploaded(true);\n            });\n        },\n        [activeWebSocket, mutateAsync]\n    );\n\n    const modified_response = useMemo(() => ({ ...data?.document_upload }), [data?.document_upload]);\n\n    return {\n        /** The upload response */\n        data: modified_response,\n        /** Function to upload the document */\n        upload,\n        /** Mutation status */\n        status,\n        /** Whether the mutation is loading */\n        isLoading,\n        /** Whether the mutation is successful */\n        isSuccess,\n        ...rest,\n    };\n};\n\nexport default useDocumentUpload;\n","import useQuery from '../useQuery';\nimport useActiveAccount from './useActiveAccount';\n\n/** A custom hook that get Service Token for Deriv X Platform. */\nconst useDxtradeServiceToken = () => {\n    const { data: account } = useActiveAccount();\n    const { data: dxtrade_token, ...rest } = useQuery('service_token', {\n        payload: { service: 'dxtrade', server: account?.is_virtual ? 'demo' : 'real' },\n    });\n\n    return {\n        /** return the Deriv X account token */\n        data: dxtrade_token?.service_token?.dxtrade?.token,\n        ...rest,\n    };\n};\n\nexport default useDxtradeServiceToken;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\n\n/** A custom hook that gets dynamic leverage values. */\nconst useDynamicLeverage = (platform: 'mt5' | 'dxtrade' | 'ctrader') => {\n    const { data, ...rest } = useQuery('trading_platform_leverage', {\n        payload: { platform },\n    });\n\n    // Add additional information to the dynamic leverage response.\n    const modified_data = useMemo(() => {\n        if (!data?.trading_platform_leverage) return;\n\n        return { ...data?.trading_platform_leverage };\n    }, [data]);\n\n    return {\n        data: modified_data?.leverage,\n        ...rest,\n    };\n};\n\nexport default useDynamicLeverage;\n","import { useCallback } from 'react';\nimport useSubscription from '../useSubscription';\n\ntype TPayload = WithRequiredProperty<\n    NonNullable<Parameters<ReturnType<typeof useSubscription<'exchange_rates'>>['subscribe']>>[0]['payload'],\n    'target_currency'\n>;\n\n/** A custom hook that gets exchange rates from base currency to target currency */\nconst useExchangeRateSubscription = () => {\n    const { data, subscribe: _subscribe, ...rest } = useSubscription('exchange_rates');\n\n    const subscribe = useCallback(\n        (payload: TPayload) => {\n            _subscribe({ payload });\n        },\n        [_subscribe]\n    );\n\n    return {\n        /** The exchange rates response */\n        data: data?.exchange_rates,\n        /** Function to subscribe to exchange rates */\n        subscribe,\n        ...rest,\n    };\n};\n\nexport default useExchangeRateSubscription;\n","import useQuery from '../useQuery';\n\ntype TProps = Required<Parameters<typeof useQuery<'exchange_rates'>>[1]>['payload'];\n\nconst useGetExchangeRate = ({ base_currency, loginid, target_currency }: TProps) => {\n    const { data, ...rest } = useQuery('exchange_rates', { payload: { base_currency, loginid, target_currency } });\n\n    return {\n        /** The exchange rates response */\n        data: data?.exchange_rates,\n        ...rest,\n    };\n};\n\nexport default useGetExchangeRate;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TIdentityVerificationDocumentAddPayload = Parameters<\n    ReturnType<typeof useMutation<'identity_verification_document_add'>>['mutate']\n>[0]['payload'];\n\n/** A custom hook to submit IDV details for POI verification.\n *\n * Use cases:\n * - To submit IDV verification for verification flow in Wallets.\n */\nconst useIdentityDocumentVerificationAdd = () => {\n    const { mutate: _mutate, ...rest } = useMutation('identity_verification_document_add');\n\n    const submitIDVDocuments = useCallback(\n        (payload: TIdentityVerificationDocumentAddPayload) =>\n            _mutate({\n                payload,\n            }),\n        [_mutate]\n    );\n\n    return {\n        /** Call this function upon IDV submission.\n         *\n         * @param payload - The payload to pass in which these fields are required:\n         * - document_number: The document number passed in by the user\n         * - document_type: The type of document in which the document_number is based on. Examples are either drivers_license, passport, ssnit, etc depending on the issuing country.\n         *                  These document types can often be retrieved from the `useResidenceList` hook\n         * - issuing_country: The country in which the documents are issued and supported.\n         */\n        submitIDVDocuments,\n        /** The original mutate function returned by useMutation */\n        _mutate,\n        ...rest,\n    };\n};\n\nexport default useIdentityDocumentVerificationAdd;\n","import { useMemo } from 'react';\nimport useLandingCompany from './useLandingCompany';\n\n/** * A hook to determine if region is Eu using the useLandingCompany hook */\nconst useIsEuRegion = () => {\n    /** Retrieve landing company data*/\n    const { data: landing_company, ...rest } = useLandingCompany();\n\n    const isEuRegion = useMemo(() => {\n        if (!landing_company) return false;\n\n        /** Regular expressions for EU shortcodes and excluded residence */\n        const eu_shortcode_regex = /^maltainvest$/;\n        const eu_excluded_regex = /^mt$/;\n\n        /** Destructure landing company response */\n        const { gaming_company, financial_company, mt_gaming_company, mt_all_company, id: residence } = landing_company;\n        const financial_shortcode = financial_company?.shortcode;\n        const gaming_shortcode = gaming_company?.shortcode;\n        const mt_gaming_shortcode = mt_gaming_company?.financial?.shortcode || mt_all_company?.swap_free?.shortcode;\n\n        /** Determine if the region falls in the EU using destructured data */\n        const is_financial_maltainvest = financial_shortcode === 'maltainvest';\n        const shortcodes = financial_shortcode || gaming_shortcode || mt_gaming_shortcode;\n        const is_financial_eu_and_not_gaming_svg =\n            eu_shortcode_regex.test(financial_shortcode as unknown as string) && gaming_shortcode !== 'svg';\n        const is_gaming_eu = eu_shortcode_regex.test(gaming_shortcode as string);\n        const is_residence_eu = eu_excluded_regex.test(residence as string);\n\n        /** is region Eu based on shortcode */\n        const is_eu_based_on_shortcodes = shortcodes && (is_financial_eu_and_not_gaming_svg || is_gaming_eu);\n        /** is region Eu based on residence */\n        const is_eu_based_on_residence = !shortcodes && is_residence_eu;\n\n        return is_financial_maltainvest || is_eu_based_on_shortcodes || is_eu_based_on_residence;\n    }, [landing_company]);\n\n    // New method to test, if this works will remove the legacy method above\n    const isEUCountry = useMemo(() => {\n        if (!landing_company) return;\n\n        const { gaming_company, financial_company } = landing_company;\n        const isEuRegion = !gaming_company && financial_company?.shortcode === 'maltainvest';\n\n        return isEuRegion;\n    }, [landing_company]);\n\n    return {\n        /** A boolean flag indicating if the region is within the EU */\n        data: isEuRegion,\n        isEUCountry,\n        /** Additional properties inherited from the useLandingCompany hook */\n        ...rest,\n    };\n};\n\nexport default useIsEuRegion;\n","import { useMemo } from 'react';\nimport useAuthentication from './useAuthentication';\nimport useResidenceList from './useResidenceList';\nimport useSettings from './useSettings';\n\n/** A custom hook to get the proof of identity verification info of the current user. */\nconst usePOI = () => {\n    const { data: authentication_data, isSuccess: isAuthenticationSuccess, ...rest } = useAuthentication();\n    const { data: residence_list_data, isSuccess: isResidenceListSuccess } = useResidenceList();\n    const { data: get_settings_data, isSuccess: isGetSettingsSuccess } = useSettings();\n\n    const previous_service = useMemo(() => {\n        const latest_poi_attempt = authentication_data?.attempts?.latest;\n        return latest_poi_attempt?.service;\n    }, [authentication_data?.attempts?.latest]);\n\n    /**\n     * @description Get the previous POI attempts details (if any)\n     */\n    const previous_poi = useMemo(() => {\n        if (!previous_service) {\n            return null;\n        }\n\n        const services = authentication_data?.identity?.services;\n        if (services && services.manual) {\n            return {\n                service: previous_service,\n                status: services.manual.status,\n            };\n        }\n\n        const current_service = services?.[previous_service as 'idv' | 'onfido'];\n        return {\n            service: previous_service,\n            status: current_service?.status,\n            reported_properties: current_service?.reported_properties,\n            last_rejected: current_service?.last_rejected,\n            submissions_left: current_service?.submissions_left || 0,\n        };\n    }, [previous_service, authentication_data?.identity?.services]);\n\n    /**\n     * @description Get the current step based on a few checks. Returns configuration for document validation as well.\n     */\n    const current_poi = useMemo(() => {\n        const user_country_code = get_settings_data?.citizen || get_settings_data?.country_code;\n        const matching_residence_data = residence_list_data?.find(r => r.value === user_country_code);\n        const is_idv_supported = matching_residence_data?.identity?.services?.idv?.is_country_supported;\n        const is_onfido_supported = matching_residence_data?.identity?.services?.onfido?.is_country_supported;\n        const services = authentication_data?.identity?.services;\n        const idv_submission_left = services?.idv?.submissions_left ?? 0;\n        const onfido_submission_left = services?.onfido?.submissions_left ?? 0;\n        if (is_idv_supported && idv_submission_left && !authentication_data?.is_idv_disallowed) {\n            return {\n                country_code: user_country_code,\n                service: 'idv',\n                status: services?.idv?.status,\n                submission_left: idv_submission_left,\n                document_supported: matching_residence_data?.identity?.services?.idv?.documents_supported,\n            };\n        } else if (is_onfido_supported && onfido_submission_left) {\n            return {\n                country_code: user_country_code,\n                service: 'onfido',\n                status: services?.onfido?.status,\n                submission_left: onfido_submission_left,\n                document_supported: matching_residence_data?.identity?.services?.onfido?.documents_supported,\n            };\n        }\n        return {\n            country_code: user_country_code,\n            service: 'manual',\n            status: services?.manual?.status,\n        };\n    }, [\n        get_settings_data?.citizen,\n        get_settings_data?.country_code,\n        residence_list_data,\n        authentication_data?.identity?.services,\n        authentication_data?.is_idv_disallowed,\n    ]);\n\n    const modified_verification_data = useMemo(() => {\n        if (!authentication_data) return;\n\n        return {\n            ...authentication_data?.identity,\n            previous: previous_poi,\n            current: current_poi,\n            is_pending: authentication_data?.identity?.status === 'pending',\n            is_rejected: authentication_data?.identity?.status === 'rejected',\n            is_expired: authentication_data?.identity?.status === 'expired',\n            is_suspected: authentication_data?.identity?.status === 'suspected',\n            is_verified: authentication_data?.identity?.status === 'verified',\n        };\n    }, [authentication_data, current_poi, previous_poi]);\n\n    return {\n        data: modified_verification_data,\n        isSuccess: isAuthenticationSuccess && isGetSettingsSuccess && isResidenceListSuccess,\n        ...rest,\n    };\n};\n\nexport default usePOI;\n","import { useCallback, useMemo } from 'react';\nimport useAuthentication from './useAuthentication';\nimport usePOI from './usePOI';\nimport useMT5AccountsList from './useMT5AccountsList';\n\ntype TAccount = NonNullable<ReturnType<typeof useMT5AccountsList>['data']>[number];\ntype TServices = NonNullable<NonNullable<ReturnType<typeof usePOI>['data']>['services']>;\ntype TServiceStatus = NonNullable<NonNullable<ReturnType<typeof usePOI>['data']>['status']>;\n\n/**\n * Hook that calculates/checks the verification status for a landing company/jurisdiction.\n *\n * Some jurisdictions such as Labuan requires checks for other statuses such as `is_authenticated_with_idv_photoid` status from `get_account_status` endpoint.\n * This hook verifies these checks internally and returns the appropriate verification status for a landing company/jurisdiction.\n *\n * Use cases:\n * - To show the verification badge for a MT5 account with a certain landing company/jurisdiction\n *\n */\nconst useJurisdictionStatus = () => {\n    const { data: authenticationStatus, isSuccess: isSuccessAuthenticationStatus } = useAuthentication();\n    const { data: poiStatus } = usePOI();\n\n    const isSuccess = useMemo(() => {\n        return isSuccessAuthenticationStatus && poiStatus?.current?.service;\n    }, [isSuccessAuthenticationStatus, poiStatus]);\n\n    const getVerificationStatus = useCallback(\n        (jurisdiction: TAccount['landing_company_short'], mt5_account_status: TAccount['status']) => {\n            const isPOIServiceStatus = (...statuses: TServiceStatus[]) => {\n                const current_service = poiStatus?.current?.service as keyof TServices;\n                const service = poiStatus?.services?.[current_service];\n                if (service?.status) {\n                    return statuses.includes(service.status);\n                }\n            };\n\n            const pendingStatus = ['verification_pending'];\n            const isStatusPending = pendingStatus.includes(mt5_account_status ?? '');\n\n            const status = {\n                is_failed: false,\n                is_not_applicable: false,\n                is_pending: false,\n                is_verified: false,\n            };\n            switch (jurisdiction) {\n                case 'bvi':\n                    if (\n                        isPOIServiceStatus('expired', 'rejected', 'suspected') ||\n                        authenticationStatus?.is_idv_revoked ||\n                        mt5_account_status === 'proof_failed'\n                    ) {\n                        status.is_failed = true;\n                    } else if (isPOIServiceStatus('pending') || isStatusPending) {\n                        status.is_pending = true;\n                    } else if (isPOIServiceStatus('verified')) {\n                        status.is_verified = true;\n                    }\n                    break;\n                case 'labuan':\n                    if (\n                        isPOIServiceStatus('expired', 'rejected', 'suspected') ||\n                        authenticationStatus?.is_idv_revoked ||\n                        // NOTE: BE plans to rename this to `authenticated_with_idv`\n                        authenticationStatus?.is_authenticated_with_idv_photoid ||\n                        mt5_account_status === 'proof_failed'\n                    ) {\n                        status.is_failed = true;\n                    } else if (isPOIServiceStatus('pending') || isStatusPending) {\n                        status.is_pending = true;\n                    } else if (isPOIServiceStatus('verified')) {\n                        status.is_verified = true;\n                    }\n                    break;\n                case 'svg':\n                    status.is_not_applicable = true;\n                    break;\n                default:\n                    // for other jurisdictions, MT5 account status already checks for POA status in BE\n                    if (mt5_account_status === 'proof_failed') {\n                        status.is_failed = true;\n                    } else if (isStatusPending) {\n                        status.is_pending = true;\n                    } else if (isPOIServiceStatus('verified')) {\n                        status.is_verified = true;\n                    }\n            }\n\n            return status;\n        },\n        [poiStatus, authenticationStatus?.is_idv_revoked, authenticationStatus?.is_authenticated_with_idv_photoid]\n    );\n\n    return {\n        /**\n         * Function to get verification status\n         * @param jurisdiction - the jurisdiction/landing company, i.e. 'svg', 'bvi', 'labuan', 'vanuatu'\n         * @param mt5_account_status - the status of the MT5 account, usually retrieved from MT5 accounts list item\n         * @returns The following statuses:\n         * - `is_failed`: The verification status for the landing company/jurisdiction has currently failed either due to expiration, rejection, suspicion status or other factors\n         * - `is_pending`: The verification status for the landing company/jurisdiction is currently pending verification\n         * - `is_not_applicable`: The landing company/jurisdiction is not applicable for verification. This status is only applied for `SVG` landing company/jurisdiction\n         * - `is_verified`: The verification status for the landing company/jurisdiction is currently verified\n         *  */\n        getVerificationStatus,\n        /** checks if the hook has completed verification checks for the landing company/jurisdiction */\n        isSuccess,\n    };\n};\n\nexport default useJurisdictionStatus;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\nimport useInvalidateQuery from '../useInvalidateQuery';\n\ntype TPayload = Parameters<ReturnType<typeof useMutation<'mt5_deposit'>>['mutate']>[0]['payload'];\n\n/** A custom hook for top-up of MT5 Accounts */\nconst useMT5Deposit = () => {\n    const invalidate = useInvalidateQuery();\n\n    const {\n        mutate: _mutate,\n        mutateAsync: _mutateAsync,\n        ...rest\n    } = useMutation('mt5_deposit', {\n        onSuccess: () => {\n            invalidate('mt5_login_list');\n        },\n    });\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n    const mutateAsync = useCallback((payload: TPayload) => _mutateAsync({ payload }), [_mutateAsync]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useMT5Deposit;\n","export const ALPHA_2_TO_ALPHA_3: Record<string, string> = {\n    AF: 'AFG',\n    AX: 'ALA',\n    AL: 'ALB',\n    DZ: 'DZA',\n    AS: 'ASM',\n    AD: 'AND',\n    AO: 'AGO',\n    AI: 'AIA',\n    AQ: 'ATA',\n    AG: 'ATG',\n    AR: 'ARG',\n    AM: 'ARM',\n    AW: 'ABW',\n    AU: 'AUS',\n    AT: 'AUT',\n    AZ: 'AZE',\n    BS: 'BHS',\n    BH: 'BHR',\n    BD: 'BGD',\n    BB: 'BRB',\n    BY: 'BLR',\n    BE: 'BEL',\n    BZ: 'BLZ',\n    BJ: 'BEN',\n    BM: 'BMU',\n    BT: 'BTN',\n    BO: 'BOL',\n    BQ: 'BES',\n    BA: 'BIH',\n    BW: 'BWA',\n    BV: 'BVT',\n    BR: 'BRA',\n    VG: 'VGB',\n    IO: 'IOT',\n    BN: 'BRN',\n    BG: 'BGR',\n    BF: 'BFA',\n    BI: 'BDI',\n    KH: 'KHM',\n    CM: 'CMR',\n    CA: 'CAN',\n    CV: 'CPV',\n    KY: 'CYM',\n    CF: 'CAF',\n    TD: 'TCD',\n    CL: 'CHL',\n    CN: 'CHN',\n    HK: 'HKG',\n    MO: 'MAC',\n    CX: 'CXR',\n    CC: 'CCK',\n    CO: 'COL',\n    KM: 'COM',\n    CG: 'COG',\n    CD: 'COD',\n    CK: 'COK',\n    CR: 'CRI',\n    CI: 'CIV',\n    HR: 'HRV',\n    CU: 'CUB',\n    CW: 'CUW',\n    CY: 'CYP',\n    CZ: 'CZE',\n    DK: 'DNK',\n    DJ: 'DJI',\n    DM: 'DMA',\n    DO: 'DOM',\n    EC: 'ECU',\n    EG: 'EGY',\n    SV: 'SLV',\n    GQ: 'GNQ',\n    ER: 'ERI',\n    EE: 'EST',\n    ET: 'ETH',\n    FK: 'FLK',\n    FO: 'FRO',\n    FJ: 'FJI',\n    FI: 'FIN',\n    FR: 'FRA',\n    GF: 'GUF',\n    PF: 'PYF',\n    TF: 'ATF',\n    GA: 'GAB',\n    GM: 'GMB',\n    GE: 'GEO',\n    DE: 'DEU',\n    GH: 'GHA',\n    GI: 'GIB',\n    GR: 'GRC',\n    GL: 'GRL',\n    GD: 'GRD',\n    GP: 'GLP',\n    GU: 'GUM',\n    GT: 'GTM',\n    GG: 'GGY',\n    GN: 'GIN',\n    GW: 'GNB',\n    GY: 'GUY',\n    HT: 'HTI',\n    HM: 'HMD',\n    VA: 'VAT',\n    HN: 'HND',\n    HU: 'HUN',\n    IS: 'ISL',\n    IN: 'IND',\n    ID: 'IDN',\n    IR: 'IRN',\n    IQ: 'IRQ',\n    IE: 'IRL',\n    IM: 'IMN',\n    IL: 'ISR',\n    IT: 'ITA',\n    JM: 'JAM',\n    JP: 'JPN',\n    JE: 'JEY',\n    JO: 'JOR',\n    KZ: 'KAZ',\n    KE: 'KEN',\n    KI: 'KIR',\n    KP: 'PRK',\n    KR: 'KOR',\n    KW: 'KWT',\n    KG: 'KGZ',\n    LA: 'LAO',\n    LV: 'LVA',\n    LB: 'LBN',\n    LS: 'LSO',\n    LR: 'LBR',\n    LY: 'LBY',\n    LI: 'LIE',\n    LT: 'LTU',\n    LU: 'LUX',\n    MK: 'MKD',\n    MG: 'MDG',\n    MW: 'MWI',\n    MY: 'MYS',\n    MV: 'MDV',\n    ML: 'MLI',\n    MT: 'MLT',\n    MH: 'MHL',\n    MQ: 'MTQ',\n    MR: 'MRT',\n    MU: 'MUS',\n    YT: 'MYT',\n    MX: 'MEX',\n    FM: 'FSM',\n    MD: 'MDA',\n    MC: 'MCO',\n    MN: 'MNG',\n    ME: 'MNE',\n    MS: 'MSR',\n    MA: 'MAR',\n    MZ: 'MOZ',\n    MM: 'MMR',\n    NA: 'NAM',\n    NR: 'NRU',\n    NP: 'NPL',\n    NL: 'NLD',\n    AN: 'ANT',\n    NC: 'NCL',\n    NZ: 'NZL',\n    NI: 'NIC',\n    NE: 'NER',\n    NG: 'NGA',\n    NU: 'NIU',\n    NF: 'NFK',\n    MP: 'MNP',\n    NO: 'NOR',\n    OM: 'OMN',\n    PK: 'PAK',\n    PW: 'PLW',\n    PS: 'PSE',\n    PA: 'PAN',\n    PG: 'PNG',\n    PY: 'PRY',\n    PE: 'PER',\n    PH: 'PHL',\n    PN: 'PCN',\n    PL: 'POL',\n    PT: 'PRT',\n    PR: 'PRI',\n    QA: 'QAT',\n    RE: 'REU',\n    RO: 'ROU',\n    RU: 'RUS',\n    RW: 'RWA',\n    BL: 'BLM',\n    SH: 'SHN',\n    KN: 'KNA',\n    LC: 'LCA',\n    MF: 'MAF',\n    PM: 'SPM',\n    VC: 'VCT',\n    WS: 'WSM',\n    SM: 'SMR',\n    ST: 'STP',\n    SA: 'SAU',\n    SN: 'SEN',\n    RS: 'SRB',\n    SC: 'SYC',\n    SL: 'SLE',\n    SG: 'SGP',\n    SX: 'SXM',\n    SK: 'SVK',\n    SI: 'SVN',\n    SB: 'SLB',\n    SO: 'SOM',\n    ZA: 'ZAF',\n    GS: 'SGS',\n    SS: 'SSD',\n    ES: 'ESP',\n    LK: 'LKA',\n    SD: 'SDN',\n    SR: 'SUR',\n    SJ: 'SJM',\n    SZ: 'SWZ',\n    SE: 'SWE',\n    CH: 'CHE',\n    SY: 'SYR',\n    TW: 'TWN',\n    TJ: 'TJK',\n    TZ: 'TZA',\n    TH: 'THA',\n    TL: 'TLS',\n    TG: 'TGO',\n    TK: 'TKL',\n    TO: 'TON',\n    TT: 'TTO',\n    TN: 'TUN',\n    TR: 'TUR',\n    TM: 'TKM',\n    TC: 'TCA',\n    TV: 'TUV',\n    UG: 'UGA',\n    UA: 'UKR',\n    AE: 'ARE',\n    GB: 'GBR',\n    US: 'USA',\n    UM: 'UMI',\n    UY: 'URY',\n    UZ: 'UZB',\n    VU: 'VUT',\n    VE: 'VEN',\n    VN: 'VNM',\n    VI: 'VIR',\n    WF: 'WLF',\n    EH: 'ESH',\n    YE: 'YEM',\n    ZM: 'ZMB',\n    ZW: 'ZWE',\n    XK: 'XKX',\n};\n\nexport const ALPHA_3_TO_ALPHA_2: Record<string, string> = {\n    AFG: 'AF',\n    ALA: 'AX',\n    ALB: 'AL',\n    DZA: 'DZ',\n    ASM: 'AS',\n    AND: 'AD',\n    AGO: 'AO',\n    AIA: 'AI',\n    ATA: 'AQ',\n    ATG: 'AG',\n    ARG: 'AR',\n    ARM: 'AM',\n    ABW: 'AW',\n    AUS: 'AU',\n    AUT: 'AT',\n    AZE: 'AZ',\n    BHS: 'BS',\n    BHR: 'BH',\n    BGD: 'BD',\n    BRB: 'BB',\n    BLR: 'BY',\n    BEL: 'BE',\n    BLZ: 'BZ',\n    BEN: 'BJ',\n    BMU: 'BM',\n    BTN: 'BT',\n    BOL: 'BO',\n    BES: 'BQ',\n    BIH: 'BA',\n    BWA: 'BW',\n    BVT: 'BV',\n    BRA: 'BR',\n    VGB: 'VG',\n    IOT: 'IO',\n    BRN: 'BN',\n    BGR: 'BG',\n    BFA: 'BF',\n    BDI: 'BI',\n    KHM: 'KH',\n    CMR: 'CM',\n    CAN: 'CA',\n    CPV: 'CV',\n    CYM: 'KY',\n    CAF: 'CF',\n    TCD: 'TD',\n    CHL: 'CL',\n    CHN: 'CN',\n    HKG: 'HK',\n    MAC: 'MO',\n    CXR: 'CX',\n    CCK: 'CC',\n    COL: 'CO',\n    COM: 'KM',\n    COG: 'CG',\n    COD: 'CD',\n    COK: 'CK',\n    CRI: 'CR',\n    CIV: 'CI',\n    HRV: 'HR',\n    CUB: 'CU',\n    CUW: 'CW',\n    CYP: 'CY',\n    CZE: 'CZ',\n    DNK: 'DK',\n    DJI: 'DJ',\n    DMA: 'DM',\n    DOM: 'DO',\n    ECU: 'EC',\n    EGY: 'EG',\n    SLV: 'SV',\n    GNQ: 'GQ',\n    ERI: 'ER',\n    EST: 'EE',\n    ETH: 'ET',\n    FLK: 'FK',\n    FRO: 'FO',\n    FJI: 'FJ',\n    FIN: 'FI',\n    FRA: 'FR',\n    GUF: 'GF',\n    PYF: 'PF',\n    ATF: 'TF',\n    GAB: 'GA',\n    GMB: 'GM',\n    GEO: 'GE',\n    DEU: 'DE',\n    GHA: 'GH',\n    GIB: 'GI',\n    GRC: 'GR',\n    GRL: 'GL',\n    GRD: 'GD',\n    GLP: 'GP',\n    GUM: 'GU',\n    GTM: 'GT',\n    GGY: 'GG',\n    GIN: 'GN',\n    GNB: 'GW',\n    GUY: 'GY',\n    HTI: 'HT',\n    HMD: 'HM',\n    VAT: 'VA',\n    HND: 'HN',\n    HUN: 'HU',\n    ISL: 'IS',\n    IND: 'IN',\n    IDN: 'ID',\n    IRN: 'IR',\n    IRQ: 'IQ',\n    IRL: 'IE',\n    IMN: 'IM',\n    ISR: 'IL',\n    ITA: 'IT',\n    JAM: 'JM',\n    JPN: 'JP',\n    JEY: 'JE',\n    JOR: 'JO',\n    KAZ: 'KZ',\n    KEN: 'KE',\n    KIR: 'KI',\n    PRK: 'KP',\n    KOR: 'KR',\n    KWT: 'KW',\n    KGZ: 'KG',\n    LAO: 'LA',\n    LVA: 'LV',\n    LBN: 'LB',\n    LSO: 'LS',\n    LBR: 'LR',\n    LBY: 'LY',\n    LIE: 'LI',\n    LTU: 'LT',\n    LUX: 'LU',\n    MKD: 'MK',\n    MDG: 'MG',\n    MWI: 'MW',\n    MYS: 'MY',\n    MDV: 'MV',\n    MLI: 'ML',\n    MLT: 'MT',\n    MHL: 'MH',\n    MTQ: 'MQ',\n    MRT: 'MR',\n    MUS: 'MU',\n    MYT: 'YT',\n    MEX: 'MX',\n    FSM: 'FM',\n    MDA: 'MD',\n    MCO: 'MC',\n    MNG: 'MN',\n    MNE: 'ME',\n    MSR: 'MS',\n    MAR: 'MA',\n    MOZ: 'MZ',\n    MMR: 'MM',\n    NAM: 'NA',\n    NRU: 'NR',\n    NPL: 'NP',\n    NLD: 'NL',\n    ANT: 'AN',\n    NCL: 'NC',\n    NZL: 'NZ',\n    NIC: 'NI',\n    NER: 'NE',\n    NGA: 'NG',\n    NIU: 'NU',\n    NFK: 'NF',\n    MNP: 'MP',\n    NOR: 'NO',\n    OMN: 'OM',\n    PAK: 'PK',\n    PLW: 'PW',\n    PSE: 'PS',\n    PAN: 'PA',\n    PNG: 'PG',\n    PRY: 'PY',\n    PER: 'PE',\n    PHL: 'PH',\n    PCN: 'PN',\n    POL: 'PL',\n    PRT: 'PT',\n    PRI: 'PR',\n    QAT: 'QA',\n    REU: 'RE',\n    ROU: 'RO',\n    RUS: 'RU',\n    RWA: 'RW',\n    BLM: 'BL',\n    SHN: 'SH',\n    KNA: 'KN',\n    LCA: 'LC',\n    MAF: 'MF',\n    SPM: 'PM',\n    VCT: 'VC',\n    WSM: 'WS',\n    SMR: 'SM',\n    STP: 'ST',\n    SAU: 'SA',\n    SEN: 'SN',\n    SRB: 'RS',\n    SYC: 'SC',\n    SLE: 'SL',\n    SGP: 'SG',\n    SXM: 'SX',\n    SVK: 'SK',\n    SVN: 'SI',\n    SLB: 'SB',\n    SOM: 'SO',\n    ZAF: 'ZA',\n    SGS: 'GS',\n    SSD: 'SS',\n    ESP: 'ES',\n    LKA: 'LK',\n    SDN: 'SD',\n    SUR: 'SR',\n    SJM: 'SJ',\n    SWZ: 'SZ',\n    SWE: 'SE',\n    CHE: 'CH',\n    SYR: 'SY',\n    TWN: 'TW',\n    TJK: 'TJ',\n    TZA: 'TZ',\n    THA: 'TH',\n    TLS: 'TL',\n    TGO: 'TG',\n    TKL: 'TK',\n    TON: 'TO',\n    TTO: 'TT',\n    TUN: 'TN',\n    TUR: 'TR',\n    TKM: 'TM',\n    TCA: 'TC',\n    TUV: 'TV',\n    UGA: 'UG',\n    UKR: 'UA',\n    ARE: 'AE',\n    GBR: 'GB',\n    USA: 'US',\n    UMI: 'UM',\n    URY: 'UY',\n    UZB: 'UZ',\n    VUT: 'VU',\n    VEN: 'VE',\n    VNM: 'VN',\n    VIR: 'VI',\n    WLF: 'WF',\n    ESH: 'EH',\n    YEM: 'YE',\n    ZMB: 'ZM',\n    ZWE: 'ZW',\n    XKX: 'XK',\n};\n","import { ALPHA_3_TO_ALPHA_2 } from '../constants';\nimport useQuery from '../useQuery';\nimport useSettings from './useSettings';\n\n// TODO: Merge service token hooks into a single service token hook call\n/** A custom hook that get Service Token for Onfido.\n * @param [country] - The country code to be used to retrieve the Onfido service token.\n * For example:\n * ```\n * const { data: { token } } = useOnfidoServiceToken()\n * ```\n */\n\nconst useOnfidoServiceToken = (country?: string) => {\n    const { data: settings } = useSettings();\n    const country_code = country ?? settings.country_code ?? '';\n    const countryCode = country_code.length >= 3 ? ALPHA_3_TO_ALPHA_2[country_code] : country_code;\n    const { data: onfido_token_data, ...rest } = useQuery('service_token', {\n        payload: {\n            service: 'onfido',\n            country: countryCode,\n        },\n        options: {\n            retry: 3,\n            enabled: !!countryCode,\n        },\n    });\n\n    return {\n        /** return the onfido account token */\n        data: {\n            ...onfido_token_data?.service_token?.onfido,\n        },\n        ...rest,\n    };\n};\n\nexport default useOnfidoServiceToken;\n","import React from 'react';\n\nexport const ROOT_CLASS = 'manual-poi-details';\n\nexport const DOCUMENT_TYPES = {\n    NATIONAL_IDENTITY_CARD: 'national_identity_card',\n    NIMC_SLIP: 'nimc_slip',\n    PASSPORT: 'passport',\n    DRIVING_LICENCE: 'driving_licence',\n    BIRTH_CERTIFICATE: 'birth_certificate',\n    SELFIE_WITH_ID: 'selfie_with_id',\n    OTHER: 'other',\n};\n\nconst PAGE_TYPE = {\n    FRONT: 'front',\n    BACK: 'back',\n    PHOTO: 'photo',\n};\n\nexport const SELFIE_DOCUMENT = {\n    document_type: DOCUMENT_TYPES.SELFIE_WITH_ID,\n    pageType: PAGE_TYPE.PHOTO,\n    name: 'selfie_with_id',\n    icon: 'IcSelfie',\n    info: 'Upload your selfie.',\n};\n\nexport const date_field = {\n    name: 'expiry_date',\n    label: 'Expiry date',\n    type: 'date',\n    required: true,\n};\n\nexport const ONFIDO_PHRASES = {\n    country_select: {\n        alert_dropdown: {\n            country_not_found: 'Country not found',\n        },\n        alert: {\n            another_doc:\n                'Documents from that country are not currently supported — <fallback>try another document type</fallback>',\n        },\n        button_primary: 'Submit document',\n        search: {\n            accessibility: 'Select country',\n            input_placeholder: 'e.g. United States',\n            label: 'Search for country',\n        },\n        title: 'Select issuing country',\n    },\n    cross_device_checklist: {\n        button_primary: 'Submit verification',\n        info: 'Tips',\n        list_item_doc_multiple: 'Documents uploaded',\n        list_item_doc_one: 'Document uploaded',\n        list_item_selfie: 'Selfie uploaded',\n        subtitle: \"We're now ready to verify your identity\",\n        title: \"Great, that's everything we need\",\n    },\n    cross_device_error_desktop: {\n        subtitle: 'The link only works on mobile devices',\n        title: \"Something's gone wrong\",\n    },\n    cross_device_error_restart: {\n        subtitle: \"You'll need to restart your verification on your computer\",\n        title: \"Something's gone wrong\",\n    },\n    cross_device_intro: {\n        button_primary: 'Get secure link',\n        list_accessibility: 'Steps required to continue verification on your mobile',\n        list_item_finish: 'Check back here to finish the submission',\n        list_item_open_link: 'Open the link and complete the tasks',\n        list_item_send_phone: 'Send a secure link to your phone',\n        subtitle: \"Here's how to do it:\",\n        title: 'Continue on your phone',\n    },\n    cross_device_return: {\n        body: 'Your computer may take a few seconds to update',\n        subtitle: 'You can now return to your computer to continue',\n        title: 'Uploads successful',\n    },\n    doc_confirmation: {\n        alert: {\n            blur_detail: 'Make sure everything is clear',\n            blur_title: 'Blurry photo detected',\n            crop_detail: 'Make sure full document is visible',\n            crop_title: 'Cut-off image detected',\n            glare_detail: 'Move away from direct light',\n            glare_title: 'Glare detected',\n            no_doc_detail: 'Make sure all of the document is in the photo',\n            no_doc_title: 'No document detected',\n        },\n        body_id: 'Make sure your card details are clear to read, with no blur or glare',\n        body_image_medium: 'It’ll take longer to verify you if we can’t read it',\n        body_image_poor: 'To smoothly verify you, we need a better photo',\n        body_license: 'Make sure your license details are clear to read, with no blur or glare',\n        body_passport: 'Make sure your passport details are clear to read, with no blur or glare',\n        body_permit: 'Make sure your permit details are clear to read, with no blur or glare',\n        body_tax_letter: 'Make sure details are clear to read, with no blur or glare',\n        button_close: 'Close',\n        button_primary_redo: 'Redo',\n        button_primary_upload: 'Confirm',\n        button_primary_upload_anyway: 'Upload anyway',\n        button_secondary_redo: 'Redo',\n        button_zoom: 'Enlarge image',\n        image_accessibility: 'Photo of your document',\n        title: 'Check your image',\n    },\n    doc_select: {\n        button_id: 'Identity card',\n        button_id_detail: 'Front and back',\n        button_license: \"Driver's license\",\n        button_license_detail: 'Front and back',\n        button_passport: 'Passport',\n        button_passport_detail: 'Face photo page',\n        button_permit: 'Residence permit',\n        button_permit_detail: 'Front and back',\n        extra_no_mobile: 'Sorry, no mobile phone bills',\n        list_accessibility: 'Documents you can use to verify your identity',\n        subtitle: 'It must be an official photo ID',\n        subtitle_poa: 'These are the documents most likely to show your current home address',\n        title: 'Choose document',\n        title_poa: 'Select a %{country} document',\n    },\n    doc_submit: {\n        button_link_upload: 'or upload photo – no scans or photocopies',\n        button_primary: 'Continue on phone',\n        subtitle: 'Take a photo with your phone',\n        title_id_back: 'Submit identity card (back)',\n        title_id_front: 'Submit identity card (front)',\n        title_license_back: 'Submit license (back)',\n        title_license_front: 'Submit license (front)',\n        title_passport: 'Submit passport photo page',\n        title_permit_back: 'Submit residence permit (back)',\n        title_permit_front: 'Submit residence permit (front)',\n    },\n    error_unsupported_browser: {\n        subtitle_android: 'Restart the process on the latest version of Google Chrome',\n        subtitle_ios: 'Restart the process on the latest version of Safari',\n        title_android: 'Unsupported browser',\n        title_ios: 'Unsupported browser',\n    },\n    generic: {\n        accessibility: {\n            close_sdk_screen: 'Close identity verification screen',\n            dismiss_alert: 'Dismiss alert',\n        },\n        back: 'back',\n        close: 'close',\n        errors: {\n            interrupted_flow_error: {\n                instruction: 'Restart process on a different device',\n                message: 'Camera not detected',\n            },\n            invalid_size: {\n                instruction: 'Must be under 10MB.',\n                message: 'File size exceeded.',\n            },\n            invalid_type: {\n                instruction: 'Try using another file type.',\n                message: 'File not uploaded.',\n            },\n            lazy_loading: {\n                message: 'An error occurred while loading the component',\n            },\n            multiple_faces: {\n                instruction: 'Only your face can be in the selfie',\n                message: 'Multiple faces found',\n            },\n            no_face: {\n                instruction: 'Your face is needed in the selfie',\n                message: 'No face found',\n            },\n            request_error: {\n                instruction: 'Please try again',\n                message: 'Connection lost',\n            },\n            sms_failed: {\n                instruction: 'Copy the link to your phone',\n                message: \"Something's gone wrong\",\n            },\n            sms_overuse: {\n                instruction: 'Copy the link to your phone',\n                message: 'Too many failed attempts',\n            },\n            unsupported_file: {\n                instruction: 'Try using a JPG or PNG file',\n                message: 'File type not supported',\n            },\n        },\n        lazy_load_placeholder: 'Loading...',\n        loading: 'Loading',\n    },\n    get_link: {\n        alert_wrong_number: 'Check that your number is correct',\n        button_copied: 'Copied',\n        button_copy: 'Copy',\n        button_submit: 'Send link',\n        info_qr_how: 'How to scan a QR code',\n        info_qr_how_list_item_camera: 'Point your phone’s camera at the QR code',\n        info_qr_how_list_item_download:\n            'If it doesn’t work, download a QR code scanner from Google Play or the App Store',\n        link_divider: 'or',\n        link_qr: 'Scan QR code',\n        link_sms: 'Get link via SMS',\n        link_url: 'Copy link',\n        loader_sending: 'Sending',\n        number_field_input_placeholder: 'Enter mobile number',\n        number_field_label: 'Enter your mobile number:',\n        subtitle_qr: 'Scan the QR code with your phone',\n        subtitle_sms: 'Send this one-time link to your phone',\n        subtitle_url: 'Open the link on your mobile',\n        title: 'Get your secure link',\n        url_field_label: 'Copy the link to your mobile browser',\n    },\n    linked_computer: {\n        button_primary: 'Continue',\n        info: 'Make sure§',\n        list_item_desktop_open: '2. Your desktop window stays open',\n        list_item_sent_by_you: '1. This link was sent by you',\n        subtitle: 'Continue with the verification',\n        title: 'Linked to your computer',\n    },\n    mobilePhrases: {\n        photo_upload: {\n            body_id_back: 'Take a photo of the back of your card',\n            body_id_front: 'Take a photo of the front of your card',\n            body_license_back: 'Take a photo of the back of your license',\n            body_license_front: 'Take a photo of the front of your license',\n            body_passport: 'Take a photo of your passport photo page',\n            body_selfie: 'Take a selfie showing your face',\n        },\n        selfie_capture: {\n            alert: {\n                camera_inactive: {\n                    detail: 'Take a photo using the <fallback>basic camera mode</fallback> instead',\n                },\n                camera_not_working: {\n                    detail: 'Take a photo using the <fallback>basic camera mode</fallback> instead',\n                },\n            },\n        },\n        upload_guide: {\n            button_primary: 'Take a photo',\n            title: 'Passport photo page',\n        },\n    },\n    outro: {\n        body: 'Thank you',\n        title: 'Verification complete',\n    },\n    permission_recovery: {\n        button_primary: 'Refresh',\n        info: 'Recovery',\n        list_header_cam: 'Follow these steps to recover camera access:',\n        list_item_action_cam: 'Refresh this page to restart the identity verification process',\n        list_item_how_to_cam: 'Grant access to your camera from your browser settings',\n        subtitle_cam: 'Recover camera access to continue face verification',\n        title_cam: 'Camera access is denied',\n    },\n    permission: {\n        body_cam: 'We cannot verify you without using your camera',\n        button_primary_cam: 'Enable camera',\n        subtitle_cam: 'When prompted, you must enable camera access to continue',\n        title_cam: 'Allow camera access',\n    },\n    photo_upload: {\n        body_bank_statement: 'Provide the whole document page for best results',\n        body_benefits_letter: 'Provide the whole document page for best results',\n        body_bill: 'Provide the whole document page for best results',\n        body_government_letter: 'Provide the whole document page for best results',\n        body_id_back: 'Upload back of card from your computer',\n        body_id_front: 'Upload front of card from your computer',\n        body_license_back: 'Upload back of license from your computer',\n        body_license_front: 'Upload front of license from your computer',\n        body_passport: 'Upload passport photo page from your computer',\n        body_selfie: 'Upload a selfie from your computer',\n        body_tax_letter: 'Provide the whole document page for best results',\n        button_take_photo: 'Take photo',\n        button_upload: 'Upload',\n        title_selfie: 'Selfie',\n    },\n    selfie_capture: {\n        alert: {\n            camera_inactive: {\n                detail: 'Check that it is connected and functional. You can also <fallback>continue verification on your phone</fallback>',\n                detail_no_fallback: 'Make sure your device has a working camera',\n                title: 'Camera not working?',\n            },\n            camera_not_working: {\n                detail: 'It may be disconnected. <fallback>Try using your phone instead</fallback>.',\n                detail_no_fallback: \"Make sure your device's camera works\",\n                title: 'Camera not working',\n            },\n            timeout: {\n                detail: \"Remember to press stop when you're done. <fallback>Redo video actions</fallback>\",\n                title: 'Looks like you took too long',\n            },\n        },\n        button_accessibility: 'Take a photo',\n        frame_accessibility: 'View from camera',\n        title: 'Take a selfie',\n    },\n    selfie_confirmation: {\n        image_accessibility: 'Photo of your face',\n        subtitle: 'Make sure your selfie clearly shows your face',\n        title: 'Check selfie',\n    },\n    selfie_intro: {\n        button_primary: 'Continue',\n        list_accessibility: 'Tips to take a good selfie',\n        list_item_face_forward: 'Face forward and make sure your eyes are clearly visible',\n        list_item_no_glasses: 'Remove your glasses, if necessary',\n        subtitle: \"We'll compare it with your document\",\n        title: 'Take a selfie',\n    },\n    sms_sent: {\n        info: 'Tips',\n        info_link_expire: 'Your link will expire in one hour',\n        info_link_window: 'Keep this window open while using your mobile',\n        link: 'Resend link',\n        subtitle: \"We've sent a secure link to %{number}\",\n        subtitle_minutes: 'It may take a few minutes to arrive',\n        title: 'Check your mobile',\n    },\n    switch_phone: {\n        info: 'Tips',\n        info_link_expire: 'Your mobile link will expire in one hour',\n        info_link_refresh: \"Don't refresh this page\",\n        info_link_window: 'Keep this window open while using your mobile',\n        link: 'Cancel',\n        subtitle: \"Once you've finished we'll take you to the next step\",\n        title: 'Connected to your mobile',\n    },\n    upload_guide: {\n        button_primary: 'Upload photo',\n        image_detail_blur_alt: 'Example of a blurry document',\n        image_detail_blur_label: 'All details must be clear — nothing blurry',\n        image_detail_cutoff_alt: 'Example of a cut-off document',\n        image_detail_cutoff_label: 'Show all details — including the bottom 2 lines',\n        image_detail_glare_alt: 'Example of a document with glare',\n        image_detail_glare_label: 'Move away from direct light — no glare',\n        image_detail_good_alt: 'Document example',\n        image_detail_good_label: 'The photo should clearly show your document',\n        subtitle: 'Scans and photocopies are not accepted',\n        title: 'Upload passport photo page',\n    },\n};\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\n/** A custom hook to send notification event to backend about Onfido successful documents uploaded */\nconst useOnfidoNotificationEvent = () => {\n    const { mutate: _mutate, ...rest } = useMutation('notification_event');\n\n    const mutate = useCallback(\n        (documentIds: string[]) =>\n            _mutate({\n                payload: {\n                    category: 'authentication',\n                    event: 'poi_documents_uploaded',\n                    args: {\n                        documents: documentIds,\n                    },\n                },\n            }),\n        [_mutate]\n    );\n\n    return {\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useOnfidoNotificationEvent;\n","import { useCallback, useRef, useMemo, useEffect, useState } from 'react';\nimport { LocalStorageUtils } from '@deriv-com/utils';\nimport useOnfidoServiceToken from './useOnfidoServiceToken';\nimport { ALPHA_2_TO_ALPHA_3, ONFIDO_PHRASES } from '../constants';\nimport useSettings from './useSettings';\nimport useResidenceList from './useResidenceList';\nimport type { SdkHandle, SdkResponse } from '../types/onfido';\nimport useOnfidoNotificationEvent from './useOnfidoNotificationEvent';\nimport { v4 as uuidv4 } from 'uuid';\n\n/** A custom hook to initialize Onfido SDK.\n * To initialize Onfido, ensure that an empty container is present.\n * Call the hook and use `onfidoContainerId` to mark the empty container where the Onfido UI is to be mounted.\n *  @param [country] - The country code to be used to retrieve the Onfido service token.\n *  @param [selectedDocument] - Type of document to be passed to bypass the document selection screen\n * For example:\n * ```\n * const { data: { onfidoContainerId } } = useOnfido()\n * ...\n * return (\n *    <>\n *       ...\n *       <div id={onfidoContainerId}></div>\n *       ...\n *    </>\n * )\n * ```\n */\nconst useOnfido = (country?: string, selectedDocument?: string) => {\n    // use to check that we do not re-attempt to reload the onfido script while its still loading\n    const [isOnfidoLoading, setIsOnfidoLoading] = useState(false);\n    const [isOnfidoInitialized, setIsOnfidoInitialized] = useState(false);\n    const [onfidoInitializationError, setOnfidoInitializationError] = useState<Error | null>(null);\n    const [hasSubmitted, setHasSubmitted] = useState(false);\n\n    /**\n     * A reference to the Onfido SDK\n     */\n    const onfidoRef = useRef<SdkHandle | null>(null);\n    /**\n     * A generated ID which should be assigned to a container where the Onfido UI is to be mounted.\n     * For example:\n     * ```\n     * const { data: { onfidoContainerId } } = useOnfido()\n     * ...\n     * return (\n     *    <>\n     *       ...\n     *       <div id={onfidoContainerId}></div>\n     *       ...\n     *    </>\n     * )\n     * ```\n     */\n    const onfidoContainerId = useMemo(() => uuidv4(), []);\n\n    // settings for retrieving country code\n    const { data: settings } = useSettings();\n    // residence list for retrieving supported documents for onfido for the user's country\n    const { data: residenceList } = useResidenceList();\n    const countryCode = useMemo(() => {\n        return country ?? settings?.country_code ?? '';\n    }, [country, settings?.country_code]);\n    // onfido service token to be passed in Onfido SDK\n    const {\n        data: { token },\n        error: serviceTokenError,\n        isLoading: isServiceTokenLoading,\n    } = useOnfidoServiceToken(countryCode);\n    // notification event for onfido once user submits documents\n    const { mutate: submitDocuments } = useOnfidoNotificationEvent();\n\n    const supportedDocuments = useMemo(() => {\n        if (countryCode && residenceList.length) {\n            // TODO: Replace these logic with data from useKycAuthStatus hook.\n            const onfidoResidence = residenceList.find(residence => residence?.value === countryCode)?.identity\n                ?.services?.onfido;\n            if (selectedDocument && onfidoResidence?.documents_supported) {\n                return [onfidoResidence?.documents_supported[selectedDocument]?.display_name];\n            }\n            if (onfidoResidence && onfidoResidence.is_country_supported) {\n                return Object.keys(onfidoResidence.documents_supported ?? {}).map(\n                    (document: string) => onfidoResidence.documents_supported?.[document].display_name\n                );\n            }\n        }\n        return [];\n    }, [residenceList, countryCode, selectedDocument]);\n\n    const onComplete = useCallback(\n        (data: Omit<SdkResponse, 'data'> & { data?: { id?: string } }) => {\n            const document_ids = Object.keys(data).map(key => data[key as keyof SdkResponse]?.id ?? '');\n            submitDocuments(document_ids);\n            setHasSubmitted(true);\n        },\n        [submitDocuments]\n    );\n\n    const initOnfido = useCallback(async () => {\n        const localizeLanguage = LocalStorageUtils.getValue<string>('i18n_language');\n        const i18NLanguage = localizeLanguage || 'en';\n\n        const onfidoCountryCode =\n            countryCode.length !== 3 ? ALPHA_2_TO_ALPHA_3[countryCode.toUpperCase()] : countryCode;\n        try {\n            onfidoRef.current = await window.Onfido.init({\n                containerId: onfidoContainerId,\n                language: {\n                    locale: i18NLanguage.toLowerCase(),\n                    phrases: ONFIDO_PHRASES,\n                    mobilePhrases: ONFIDO_PHRASES,\n                },\n                token,\n                useModal: false,\n                useMemoryHistory: true,\n                onComplete,\n                steps: [\n                    {\n                        type: 'document',\n                        options: {\n                            documentTypes: {\n                                passport: supportedDocuments.some(doc => /Passport/g.test(doc ?? '')),\n                                driving_licence: supportedDocuments.some(doc => /Driving Licence/g.test(doc ?? ''))\n                                    ? {\n                                          country: onfidoCountryCode,\n                                      }\n                                    : false,\n                                national_identity_card: supportedDocuments.some(doc =>\n                                    /National Identity Card/g.test(doc ?? '')\n                                )\n                                    ? {\n                                          country: onfidoCountryCode,\n                                      }\n                                    : false,\n                            },\n                            hideCountrySelection: true,\n                        },\n                    },\n                    'face',\n                ],\n            });\n            setIsOnfidoInitialized(true);\n        } catch (error) {\n            if (error instanceof Error) {\n                setOnfidoInitializationError(error);\n            }\n            setIsOnfidoInitialized(false);\n        }\n    }, [countryCode, onComplete, onfidoContainerId, supportedDocuments, token]);\n\n    const loadOnfidoSdkScript = useCallback(() => {\n        const hasOnfidoScriptNode = !!document.getElementById('onfido_sdk');\n        // check if the onfido sdk script has been loaded, and if its still loading the onfido script, don't re-attempt to load the script again\n        if (hasOnfidoScriptNode) {\n            if (!isOnfidoLoading) initOnfido();\n        } else {\n            setIsOnfidoLoading(true);\n            const scriptNode = document.createElement('script');\n            const linkNode = document.createElement('link');\n            // [TODO] - Need to lock version of onfido sdk - Current version in CDN is 13.8.4\n            scriptNode.id = 'onfido_sdk';\n            scriptNode.src = 'https://assets.onfido.com/web-sdk-releases/13.8.4/onfido.min.js';\n            linkNode.href = 'https://assets.onfido.com/web-sdk-releases/13.8.4/style.css';\n            linkNode.rel = 'stylesheet';\n\n            document.body.appendChild(scriptNode);\n            document.body.appendChild(linkNode);\n\n            scriptNode.addEventListener('load', () => {\n                initOnfido();\n                setIsOnfidoLoading(false);\n            });\n        }\n    }, [initOnfido, isOnfidoLoading]);\n\n    useEffect(() => {\n        if (token && supportedDocuments.length && countryCode) {\n            loadOnfidoSdkScript();\n        }\n    }, [token, supportedDocuments, countryCode, loadOnfidoSdkScript]);\n\n    return {\n        data: {\n            onfidoRef,\n            onfidoContainerId,\n            hasSubmitted,\n        },\n        isOnfidoInitialized,\n        isServiceTokenLoading,\n        serviceTokenError,\n        onfidoInitializationError,\n    };\n};\n\nexport default useOnfido;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\nimport useInvalidateQuery from '../useInvalidateQuery';\n\ntype TPayload = Parameters<ReturnType<typeof useMutation<'trading_platform_deposit'>>['mutate']>[0]['payload'];\n\n/** A custom hook for top-up of Other CFD Accounts */\nconst useOtherCFDPlatformsDeposit = () => {\n    const invalidate = useInvalidateQuery();\n\n    const {\n        mutate: _mutate,\n        mutateAsync: _mutateAsync,\n        ...rest\n    } = useMutation('trading_platform_deposit', {\n        onSuccess: () => {\n            invalidate('trading_platform_accounts');\n        },\n    });\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n    const mutateAsync = useCallback((payload: TPayload) => _mutateAsync({ payload }), [_mutateAsync]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useOtherCFDPlatformsDeposit;\n","import { useMemo } from 'react';\nimport useAuthentication from './useAuthentication';\n\n/** A custom hook to get the proof of address (poa) verification info of the current user  */\nconst usePOA = () => {\n    const { data: authentication_data, ...rest } = useAuthentication();\n\n    const modified_authentication_data = useMemo(() => {\n        if (!authentication_data?.document) return;\n\n        return {\n            ...authentication_data.document,\n            has_attempted_poa: authentication_data?.document.status !== 'none',\n            is_pending: authentication_data?.document.status === 'pending',\n            is_rejected: authentication_data?.document.status === 'rejected',\n            is_expired: authentication_data?.document.status === 'expired',\n            is_suspected: authentication_data?.document.status === 'suspected',\n            is_verified: authentication_data?.document.status === 'verified',\n            is_need_submission: !['pending', 'verified'].includes(authentication_data?.document.status || ''),\n        };\n    }, [authentication_data]);\n\n    return {\n        data: modified_authentication_data,\n        ...rest,\n    };\n};\n\nexport default usePOA;\n","import useQuery from '../useQuery';\nimport useSettings from './useSettings';\n\nconst SEVEN_DAYS_MILLISECONDS = 604800000;\n\n/** A custom hook that get Service Token for Sendbird. */\nconst useSendbirdServiceToken = () => {\n    const { isSuccess } = useSettings();\n    const { data: sendbird_token_data, ...rest } = useQuery('service_token', {\n        payload: {\n            service: 'sendbird',\n        },\n        options: {\n            enabled: isSuccess,\n            staleTime: SEVEN_DAYS_MILLISECONDS, // Sendbird tokens expire 7 days by default\n        },\n    });\n\n    return {\n        /** return the sendbird service token */\n        data: {\n            ...sendbird_token_data?.service_token?.sendbird,\n        },\n        ...rest,\n    };\n};\n\nexport default useSendbirdServiceToken;\n","import React from 'react';\nimport useQuery from '../useQuery';\nimport { toMoment } from '@deriv/utils';\n\n/**\n * Hook that returns the current server time fetched using `time` endpoint\n */\nconst useServerTime = () => {\n    const { data, ...rest } = useQuery('time');\n\n    const modified_data = React.useMemo(() => {\n        if (!data) return;\n\n        const server_time_moment = toMoment(data.time);\n        return {\n            ...data,\n            /** Returns the server time in UTC format */\n            server_time_utc: server_time_moment.utc().valueOf(),\n            /** Returns the server time in an instance of Moment */\n            server_time_moment,\n        };\n    }, [data]);\n\n    return {\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useServerTime;\n","import { useMemo } from 'react';\nimport useMT5AccountsList from './useMT5AccountsList';\nimport useAvailableMT5Accounts from './useAvailableMT5Accounts';\nimport useIsEuRegion from './useIsEuRegion';\nimport useActiveAccount from './useActiveAccount';\n\n/** A custom hook to get the sorted added and non-added MT5 accounts. */\nconst useSortedMT5Accounts = (regulation?: string) => {\n    const { data: all_available_mt5_accounts } = useAvailableMT5Accounts();\n    const { isEUCountry } = useIsEuRegion();\n    const { data: mt5_accounts, ...rest } = useMT5AccountsList();\n    const { data: activeAccount } = useActiveAccount();\n\n    const isEU = regulation === 'EU' || isEUCountry;\n\n    const modified_data = useMemo(() => {\n        if (!all_available_mt5_accounts || !mt5_accounts) return;\n\n        const filtered_available_accounts = isEU\n            ? all_available_mt5_accounts.filter(account => account.shortcode === 'maltainvest')\n            : all_available_mt5_accounts;\n\n        const filtered_mt5_accounts = mt5_accounts.filter(\n            account =>\n                account.is_virtual === activeAccount?.is_virtual &&\n                (isEU\n                    ? account.landing_company_short === 'maltainvest'\n                    : account.landing_company_short !== 'maltainvest')\n        );\n\n        return filtered_available_accounts?.map(available_account => {\n            const created_account = filtered_mt5_accounts?.find(account => {\n                return (\n                    available_account.market_type === account.market_type &&\n                    available_account.shortcode === account.landing_company_short\n                );\n            });\n\n            if (created_account)\n                return {\n                    ...created_account,\n                    /** Determine if the account is added or not */\n                    is_added: true,\n                } as const;\n\n            return {\n                ...available_account,\n                /** Determine if the account is added or not */\n                is_added: false,\n            } as const;\n        });\n    }, [activeAccount?.is_virtual, all_available_mt5_accounts, isEU, mt5_accounts]);\n\n    // // Reduce out the added and non added accounts to make sure only one of each market_type is shown for not added\n    const filtered_data = useMemo(() => {\n        if (!modified_data) return;\n\n        const added_accounts = modified_data.filter(account => account.is_added);\n        const non_added_accounts = modified_data.filter(account => !account.is_added);\n\n        const filtered_non_added_accounts = non_added_accounts.reduce((acc, account) => {\n            const existing_account = acc.find(acc_account => acc_account.market_type === account.market_type);\n            const added_account = added_accounts.find(acc_account => acc_account.market_type === account.market_type);\n            if (existing_account || added_account) return acc;\n\n            return [...acc, account];\n        }, [] as typeof non_added_accounts);\n\n        return [...added_accounts, ...filtered_non_added_accounts];\n    }, [modified_data]);\n\n    // Sort the data by market_type to make sure the order is 'synthetic', 'financial', 'all'\n    const sorted_data = useMemo(() => {\n        const market_type_order = ['synthetic', 'financial', 'all'];\n\n        if (!filtered_data) return;\n\n        const sorted_data = market_type_order.reduce((acc, market_type) => {\n            const accounts = filtered_data.filter(account => account.market_type === market_type);\n            if (!accounts.length) return acc;\n            return [...acc, ...accounts];\n        }, [] as typeof filtered_data);\n\n        return sorted_data;\n    }, [filtered_data]);\n\n    const areAllAccountsCreated = sorted_data?.length === all_available_mt5_accounts?.length;\n\n    return {\n        data: sorted_data,\n        /** Determine if all the accounts are created */\n        areAllAccountsCreated,\n        ...rest,\n    };\n};\n\nexport default useSortedMT5Accounts;\n","import { useState, useEffect } from 'react';\nimport useWalletAccountsList from './useWalletAccountsList';\nimport useCurrencyConfig from './useCurrencyConfig';\n\n/** A custom hook that gets the list of all wallet accounts for the current user. */\nconst useMobileCarouselWalletsList = () => {\n    const { data: walletAccountsList, isLoading } = useWalletAccountsList();\n    const { isLoading: isCurrencyConfigLoading } = useCurrencyConfig();\n\n    const [staleWalletAccountsList, setStaleWalletAccountslist] = useState(walletAccountsList);\n    const [staleIsLoading, setStaleIsLoading] = useState(true);\n\n    useEffect(() => {\n        if (!isLoading && !isCurrencyConfigLoading) {\n            setStaleIsLoading(false);\n            setStaleWalletAccountslist(walletAccountsList);\n        }\n\n        // due to quirky nature of underlying hooks chain, need this complex list of conditions\n        if (\n            !isLoading &&\n            !isCurrencyConfigLoading &&\n            walletAccountsList &&\n            staleWalletAccountsList &&\n            staleWalletAccountsList?.length !== walletAccountsList?.length &&\n            walletAccountsList?.length > staleWalletAccountsList?.length\n        ) {\n            setStaleIsLoading(false);\n            setStaleWalletAccountslist(walletAccountsList);\n        }\n    }, [isLoading, isCurrencyConfigLoading, walletAccountsList]);\n\n    return {\n        /** The list of wallet accounts for the current user. */\n        data: staleWalletAccountsList,\n        isLoading: staleIsLoading,\n    };\n};\n\nexport default useMobileCarouselWalletsList;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useSettings from './useSettings';\nimport { TSocketRequestQueryOptions } from '../../types';\n\n/** Custom hook to get states list for a particular country. */\ntype TStatesList = Exclude<NonNullable<ReturnType<typeof useSettings>['data']['residence' | 'country']>, undefined>;\n\nconst useStatesList = (country: TStatesList, options?: TSocketRequestQueryOptions<'states_list'>) => {\n    const { data, ...rest } = useQuery('states_list', {\n        // @ts-expect-error The `states_list` type from `@deriv/api-types` is not correct.\n        // The type should be `string`, but it's an alias to string type.\n        payload: { states_list: country },\n        options,\n    });\n\n    const modified_states_list = useMemo(() => [...(data?.states_list ?? [])], [data?.states_list]);\n\n    return {\n        /** The states list for the given country. */\n        data: modified_states_list,\n        ...rest,\n    };\n};\n\nexport default useStatesList;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = Parameters<\n    ReturnType<typeof useMutation<'trading_platform_investor_password_change'>>['mutate']\n>[0]['payload'];\n\n/** A custom hook that change the Trading Platform Investor Password. */\nconst useTradingPlatformInvestorPasswordChange = () => {\n    const {\n        mutate: _mutate,\n        mutateAsync: _mutateAsync,\n        ...rest\n    } = useMutation('trading_platform_investor_password_change');\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n    const mutateAsync = useCallback((payload: TPayload) => _mutateAsync({ payload }), [_mutateAsync]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useTradingPlatformInvestorPasswordChange;\n","import { useMemo } from 'react';\nimport useMutation from '../useMutation';\nimport useInvalidateQuery from '../useInvalidateQuery';\n\n/** A custom hook to create MT5 accounts. */\nconst useCreateMT5Account = () => {\n    const invalidate = useInvalidateQuery();\n    const { data, ...rest } = useMutation('mt5_new_account', {\n        onSuccess: () => {\n            invalidate('mt5_login_list');\n        },\n    });\n\n    // Add additional information to the create MT5 account response.\n    const modified_data = useMemo(() => {\n        if (!data?.mt5_new_account) return undefined;\n\n        return { ...data?.mt5_new_account };\n    }, [data]);\n\n    return {\n        /** The response and the mutation of the create MT5 account API request */\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useCreateMT5Account;\n","import { useMemo } from 'react';\nimport useMutation from '../useMutation';\nimport useInvalidateQuery from '../useInvalidateQuery';\n\n/** A custom hook to create third party CFD accounts. */\nconst useCreateOtherCFDAccount = () => {\n    const invalidate = useInvalidateQuery();\n    const { data, ...rest } = useMutation('trading_platform_new_account', {\n        onSuccess: () => {\n            invalidate('trading_platform_accounts');\n        },\n    });\n\n    // Add additional information to the create Other CFD account response.\n    const modified_data = useMemo(() => {\n        if (!data) return undefined;\n\n        return { ...data };\n    }, [data]);\n\n    return {\n        /** The response and the mutation of the create third party CFDs API request */\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useCreateOtherCFDAccount;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = Parameters<\n    ReturnType<typeof useMutation<'trading_platform_investor_password_reset'>>['mutate']\n>[0]['payload'];\n\n/** A custom hook that reset the Trading Platform Investor Password. */\nconst useTradingPlatformInvestorPasswordReset = () => {\n    const { mutate: _mutate, ...rest } = useMutation('trading_platform_investor_password_reset');\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useTradingPlatformInvestorPasswordReset;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = Parameters<ReturnType<typeof useMutation<'trading_platform_password_change'>>['mutate']>[0]['payload'];\ntype TPayloadAsync = Parameters<\n    ReturnType<typeof useMutation<'trading_platform_password_change'>>['mutateAsync']\n>[0]['payload'];\n\n/** A custom hook that change the Trading Platform Password. */\nconst useTradingPlatformPasswordChange = () => {\n    const { mutate: _mutate, mutateAsync: _mutateAsync, ...rest } = useMutation('trading_platform_password_change');\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n    const mutateAsync = useCallback((payload: TPayloadAsync) => _mutateAsync({ payload }), [_mutateAsync]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useTradingPlatformPasswordChange;\n","import { useEffect, useMemo, useState } from 'react';\nimport { TSocketRequestPayload } from '../../types';\nimport useAuthorize from './useAuthorize';\nimport useQuery from '../useQuery';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useActiveAccount from './useActiveAccount';\nimport { displayMoney } from '../utils';\n\ntype TFilter = NonNullable<TSocketRequestPayload<'statement'>['payload']>['action_type'];\n\n/** A custom hook to get the summary of account transactions */\nconst useTransactions = () => {\n    const {\n        data: { preferred_language },\n        isFetching,\n        isSuccess,\n    } = useAuthorize();\n\n    const { data: account } = useActiveAccount();\n    const display_code = account?.currency_config?.display_code || 'USD';\n    const fractional_digits = account?.currency_config?.fractional_digits || 2;\n\n    const [filter, setFilter] = useState<TFilter>();\n    const { data, remove, ...rest } = useQuery('statement', {\n        options: {\n            enabled: !isFetching && isSuccess,\n            getNextPageParam: (lastPage, pages) => {\n                if (!lastPage?.statement?.count) return;\n\n                return pages.length;\n            },\n        },\n        payload: {\n            action_type: filter,\n            // TODO: remove this once backend adds `to` and `from` for Deriv X transfers\n            description: 1,\n        },\n    });\n\n    const invalidate = useInvalidateQuery();\n    useEffect(() => {\n        invalidate('statement');\n    }, [filter, invalidate]);\n\n    useEffect(() => {\n        return remove;\n    }, [remove]);\n\n    // Modify the data.\n    const modified_data = useMemo(() => {\n        if (!data?.statement?.transactions?.length) return;\n\n        return data?.statement?.transactions?.map(transaction => ({\n            ...transaction,\n            /** The transaction amount in currency format. */\n            display_amount: displayMoney(transaction?.amount || 0, display_code, {\n                fractional_digits,\n                preferred_language,\n            }),\n            /** The balance of account after the transaction in currency format. */\n            display_balance_after: displayMoney(transaction?.balance_after || 0, display_code, {\n                fractional_digits,\n                preferred_language,\n            }),\n        }));\n    }, [data?.statement?.transactions, display_code, fractional_digits, preferred_language]);\n\n    return {\n        /** List of account transactions */\n        data: modified_data,\n        /** Filter the transactions by type */\n        setFilter,\n        ...rest,\n    };\n};\n\nexport default useTransactions;\n","import { useEffect, useMemo, useState } from 'react';\nimport useInfiniteQuery from '../useInfiniteQuery';\nimport { TSocketRequestPayload } from '../../types';\nimport useAuthorize from './useAuthorize';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useActiveAccount from './useActiveAccount';\nimport { displayMoney } from '../utils';\n\ntype TFilter = NonNullable<TSocketRequestPayload<'statement'>['payload']>['action_type'];\n\n/** A custom hook to get the summary of account transactions */\nconst useInfiniteTransactions = () => {\n    const {\n        data: { preferred_language },\n        isFetching,\n        isSuccess,\n    } = useAuthorize();\n\n    const { data: account } = useActiveAccount();\n    const display_code = account?.currency_config?.display_code || 'USD';\n    const fractional_digits = account?.currency_config?.fractional_digits || 2;\n\n    const [filter, setFilter] = useState<TFilter>();\n    const { data, fetchNextPage, remove, ...rest } = useInfiniteQuery('statement', {\n        options: {\n            enabled: !isFetching && isSuccess,\n            getNextPageParam: (lastPage, pages) => {\n                if (!lastPage?.statement?.count) return;\n\n                return pages.length;\n            },\n        },\n        payload: {\n            action_type: filter,\n            // TODO: remove this once backend adds `to` and `from` for Deriv X transfers\n            description: 1,\n        },\n    });\n\n    const invalidate = useInvalidateQuery();\n    useEffect(() => {\n        invalidate('statement');\n    }, [filter, invalidate]);\n\n    useEffect(() => {\n        return remove;\n    }, [remove]);\n\n    // Flatten the data array.\n    const flatten_data = useMemo(() => {\n        if (!data?.pages?.length) return;\n\n        return data?.pages?.flatMap(page => page?.statement?.transactions);\n    }, [data?.pages]);\n\n    // Modify the data.\n    const modified_data = useMemo(() => {\n        if (!flatten_data?.length) return;\n\n        return flatten_data?.map(transaction => ({\n            ...transaction,\n            /** The transaction amount in currency format. */\n            display_amount: displayMoney(transaction?.amount || 0, display_code, {\n                fractional_digits,\n                preferred_language,\n            }),\n            /** The balance of account after the transaction in currency format. */\n            display_balance_after: displayMoney(transaction?.balance_after || 0, display_code, {\n                fractional_digits,\n                preferred_language,\n            }),\n        }));\n    }, [flatten_data, preferred_language, fractional_digits, display_code]);\n\n    return {\n        /** List of account transactions */\n        data: modified_data,\n        /** Fetch the next page of transactions */\n        fetchNextPage,\n        /** Filter the transactions by type */\n        setFilter,\n        ...rest,\n    };\n};\n\nexport default useInfiniteTransactions;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = NonNullable<\n    NonNullable<Parameters<ReturnType<typeof useMutation<'transfer_between_accounts'>>['mutate']>[0]>['payload']\n>;\n\n/** A custom hook used to transfer money between client accounts */\nconst useTransferBetweenAccounts = () => {\n    const { mutate: _mutate, mutateAsync: _mutateAsync, ...rest } = useMutation('transfer_between_accounts');\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n    const mutateAsync = useCallback((payload: TPayload) => _mutateAsync({ payload }), [_mutateAsync]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useTransferBetweenAccounts;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = Parameters<ReturnType<typeof useMutation<'verify_email'>>['mutate']>[0]['payload'];\n\n/** A custom hook for verifying email address */\nconst useVerifyEmail = () => {\n    const { mutate: _mutate, ...rest } = useMutation('verify_email');\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useVerifyEmail;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = Parameters<ReturnType<typeof useMutation<'trading_platform_password_reset'>>['mutate']>[0]['payload'];\ntype TPayloadAsync = Parameters<\n    ReturnType<typeof useMutation<'trading_platform_password_reset'>>['mutateAsync']\n>[0]['payload'];\n\n/** A custom hook that reset the Trading Platform Password. */\nconst useTradingPlatformPasswordReset = () => {\n    const { mutate: _mutate, mutateAsync: _mutateAsync, ...rest } = useMutation('trading_platform_password_reset');\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n    const mutateAsync = useCallback((payload: TPayloadAsync) => _mutateAsync({ payload }), [_mutateAsync]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useTradingPlatformPasswordReset;\n","import useMutation from '../useMutation';\nimport useInvalidateQuery from '../useInvalidateQuery';\n\n/** A  custom hook for resetting the virtual balance */\nconst useResetVirtualBalance = () => {\n    const invalidate = useInvalidateQuery();\n\n    const { mutate, ...rest } = useMutation('topup_virtual', {\n        onSuccess: () => {\n            invalidate('balance');\n        },\n    });\n\n    return {\n        /** The mutation function for resetting the virtual balance */\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useResetVirtualBalance;\n","import { useMemo } from 'react';\nimport useLandingCompany from './useLandingCompany';\n\n/**\n * @returns {boolean} isDIELEnabled\n * description: A custom hook to check if the DIEL landing company is enabled\n */\nconst useIsDIELEnabled = () => {\n    const { data, ...rest } = useLandingCompany();\n\n    const modifiedData = useMemo(() => {\n        if (!data) return;\n\n        const { financial_company, gaming_company } = data;\n\n        const isDIELEnabled = financial_company?.shortcode === 'maltainvest' && gaming_company?.shortcode === 'svg';\n\n        return isDIELEnabled;\n    }, [data]);\n\n    return {\n        /**\n         * Initially known as LOW_RISK, this is a landing company that is a combination of\n         * financial_company: { shortcode: 'maltainvest' }\n         * gaming_company: { shortcode: 'svg' }\n         */\n        data: modifiedData,\n        ...rest,\n    };\n};\n\nexport default useIsDIELEnabled;\n","import { TSocketRequestPayload } from '../../types';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\n\ntype TKycAuthStatusPayload = TSocketRequestPayload<'kyc_auth_status'>['payload'];\n\n/** Custom hook that returns Proof of Identity (POI) and Proof of Address (POA) authentication status details. */\nconst useKycAuthStatus = (payload: TKycAuthStatusPayload) => {\n    const { isSuccess } = useAuthorize();\n    const { data, ...kyc_auth_status_rest } = useQuery('kyc_auth_status', {\n        payload,\n        options: { enabled: isSuccess },\n    });\n    return {\n        /** The KYC auth status */\n        kyc_auth_status: data?.kyc_auth_status,\n        ...kyc_auth_status_rest,\n    };\n};\n\nexport default useKycAuthStatus;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\n\n/** A custom hook that gets the client country. */\nconst useClientCountry = () => {\n    const { data, ...website_status_rest } = useQuery('website_status');\n\n    /** Modify the client country. */\n    const modified_client_country = useMemo(() => {\n        return data?.website_status?.clients_country;\n    }, [data]);\n\n    return {\n        /** The client's country */\n        data: modified_client_country,\n        ...website_status_rest,\n    };\n};\n\nexport default useClientCountry;\n","import { useInfiniteQuery as _useInfiniteQuery } from '@tanstack/react-query';\n\nimport type {\n    TSocketAcceptableProps,\n    TSocketError,\n    TSocketPaginatateableRequestCleaned,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestInfiniteQueryOptions,\n    TSocketRequestPayload,\n    TSocketResponseData,\n} from '../types';\n\nimport useAPI from './useAPI';\nimport { getQueryKeys } from './utils';\n\nconst useInfiniteQuery = <T extends TSocketPaginateableEndpointNames>(\n    name: T,\n    ...props: TSocketAcceptableProps<T, true, 'useInfiniteQuery'>\n) => {\n    const prop = props?.[0];\n    const payload = prop && 'payload' in prop ? (prop.payload as TSocketPaginatateableRequestCleaned<T>) : undefined;\n    const options = prop && 'options' in prop ? (prop.options as TSocketRequestInfiniteQueryOptions<T>) : undefined;\n    const { send } = useAPI();\n\n    const initial_offset = payload?.offset || 0;\n    const limit = payload?.limit || 50;\n\n    return _useInfiniteQuery<TSocketResponseData<T>, TSocketError<T>>(\n        getQueryKeys(name, payload),\n\n        ({ pageParam = 0 }) =>\n            send(name, {\n                ...payload,\n                limit,\n                offset: pageParam * limit + initial_offset,\n            } as unknown as TSocketRequestPayload<T>),\n        {\n            ...options,\n            getNextPageParam: options?.getNextPageParam ? options.getNextPageParam : (_lastPage, pages) => pages.length,\n        }\n    );\n};\n\nexport default useInfiniteQuery;\n","import { useMemo } from 'react';\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\nimport useAuthorize from './useAuthorize';\nimport useCurrencyConfig from './useCurrencyConfig';\n\nconst currency_to_icon_mapper: Record<string, Record<'light' | 'dark', string>> = {\n    Demo: {\n        dark: 'IcWalletDerivDemoDark',\n        light: 'IcWalletDerivDemoLight',\n    },\n    USD: {\n        dark: 'IcWalletCurrencyUsd',\n        light: 'IcWalletCurrencyUsd',\n    },\n    EUR: {\n        dark: 'IcWalletCurrencyEur',\n        light: 'IcWalletCurrencyEur',\n    },\n    AUD: {\n        dark: 'IcWalletCurrencyAud',\n        light: 'IcWalletCurrencyAud',\n    },\n    GBP: {\n        dark: 'IcWalletCurrencyGbp',\n        light: 'IcWalletCurrencyGbp',\n    },\n    BTC: {\n        dark: 'IcWalletBitcoinDark',\n        light: 'IcWalletBitcoinLight',\n    },\n    ETH: {\n        dark: 'IcWalletEthereumDark',\n        light: 'IcWalletEthereumLight',\n    },\n    USDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    eUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    tUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    UST: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    LTC: {\n        dark: 'IcWalletLiteCoinDark',\n        light: 'IcWalletLiteCoinLight',\n    },\n    USDC: {\n        dark: 'IcWalletUsdCoinDark',\n        light: 'IcWalletUsdCoinLight',\n    },\n};\n\n/** A custom hook to get the list of wallets for the current user. */\nconst useWalletsList = () => {\n    const { ui, client } = useStore();\n    const { is_dark_mode_on } = ui;\n    const { is_authorize } = client;\n    const { getConfig } = useCurrencyConfig();\n\n    const { data: authorize_data, isSuccess, ...rest } = useAuthorize();\n    const { data: balance_data } = useFetch('balance', {\n        payload: { account: 'all' },\n        options: { enabled: is_authorize && isSuccess },\n    });\n\n    // Filter out non-wallet accounts.\n    const wallets = useMemo(\n        () => authorize_data?.account_list?.filter(account => account.account_category === 'wallet'),\n        [authorize_data?.account_list]\n    );\n\n    // Add balance to each wallet.\n    const wallets_with_balance = useMemo(\n        () =>\n            wallets?.map(wallet => ({\n                ...wallet,\n                /** Wallet balance */\n                balance: balance_data?.balance?.accounts?.[wallet.loginid || '']?.balance || 0,\n            })),\n        [balance_data?.balance?.accounts, wallets]\n    );\n\n    // Add additional information to each wallet.\n    const modified_wallets = useMemo(() => {\n        return wallets_with_balance?.map(wallet => {\n            const wallet_currency_type = wallet.is_virtual === 1 ? 'Demo' : wallet.currency || '';\n            const wallet_gradient_class_name = `${wallet_currency_type.toLowerCase()}-bg${\n                is_dark_mode_on ? '--dark' : ''\n            }`;\n            const wallet_icon = currency_to_icon_mapper[wallet_currency_type];\n\n            return {\n                ...wallet,\n                /** Indicating whether the wallet is the currently selected wallet. */\n                is_selected: wallet.loginid === authorize_data?.loginid,\n                /** Indicating whether the wallet is a virtual-money wallet. */\n                is_demo: wallet.is_virtual === 1,\n                /** Returns the wallet's currency type. ex: `Demo`, `USD`, etc. */\n                wallet_currency_type,\n                /** Landing company shortcode the account belongs to. */\n                landing_company_name: wallet.landing_company_name?.replace('maltainvest', 'malta'),\n                /** Indicating whether the wallet is a maltainvest wallet. */\n                is_malta_wallet: wallet.landing_company_name === 'malta',\n                /** The gradient class name for the wallet header background. */\n                gradient_header_class: `wallet-header__${wallet_gradient_class_name}`,\n                /** The gradient class name for the wallet card background. */\n                gradient_card_class: `wallet-card__${wallet_gradient_class_name}`,\n                /** Wallet's currency config information */\n                currency_config: wallet.currency ? getConfig(wallet.currency) : undefined,\n                /** Local asset name for the wallet icon. ex: `IcWalletCurrencyUsd` for `USD`  */\n                icon: is_dark_mode_on ? wallet_icon.dark : wallet_icon.light,\n            } as const;\n        });\n    }, [getConfig, is_dark_mode_on, authorize_data?.loginid, wallets_with_balance]);\n\n    // Sort wallets alphabetically by fiat, crypto, then virtual.\n    const sorted_wallets = useMemo(() => {\n        if (!modified_wallets) return [];\n\n        return [...modified_wallets].sort((a, b) => {\n            if (a.is_virtual !== b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if (a.currency_config?.is_crypto !== b.currency_config?.is_crypto) {\n                return a.currency_config?.is_crypto ? 1 : -1;\n            }\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        });\n    }, [modified_wallets]);\n\n    return {\n        /** List of wallets for current user. */\n        data: sorted_wallets,\n        /** Indicating whether the user has a wallet */\n        has_wallet: sorted_wallets && sorted_wallets.length > 0,\n        ...rest,\n    };\n};\n\nexport default useWalletsList;\n","import { useMemo } from 'react';\nimport useWalletsList from './useWalletsList';\n\n/** A custom hook that returns the wallet object for the current active wallet. */\nconst useActiveWallet = () => {\n    const { data } = useWalletsList();\n    const active_wallet = useMemo(() => data?.find(wallet => wallet.is_selected), [data]);\n\n    /** User's current active wallet. */\n    return active_wallet;\n};\n\nexport default useActiveWallet;\n","import React from 'react';\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\nimport useWalletsList from './useWalletsList';\nimport useAuthorize from './useAuthorize';\n\nconst useAvailableWallets = () => {\n    const { client, ui } = useStore();\n    const { is_dark_mode_on } = ui;\n    const { is_crypto } = client;\n    const { data } = useAuthorize();\n\n    const { data: account_type_data, ...rest } = useFetch('get_account_types', {\n        payload: { company: data?.landing_company_name === 'virtual' ? 'svg' : data?.landing_company_name },\n        options: { enabled: Boolean(data?.landing_company_name) },\n    });\n\n    const { data: added_wallets } = useWalletsList();\n\n    const sortedWallets = React.useMemo(() => {\n        if (!account_type_data) return null;\n        const { crypto, doughflow } = account_type_data?.get_account_types?.wallet || {};\n        const crypto_currencies = crypto?.currencies;\n        const fiat_currencies = doughflow?.currencies;\n\n        if (!crypto_currencies || !fiat_currencies) return null;\n        const available_currencies = [...fiat_currencies, ...crypto_currencies];\n        const non_virtual_wallets = added_wallets?.filter(wallet => !wallet.is_virtual);\n\n        const modified_wallets = non_virtual_wallets?.map(wallet => ({\n            currency: wallet.currency,\n            landing_company_name: wallet.landing_company_name,\n            is_added: true,\n            gradient_card_class: wallet.gradient_card_class,\n        }));\n\n        const available_wallets = available_currencies\n            .filter(currency => !modified_wallets?.some(wallet => wallet.currency === currency))\n            .map(currency => ({\n                currency,\n                landing_company_name: data?.landing_company_name === 'virtual' ? 'svg' : data?.landing_company_name,\n                is_added: false,\n                gradient_card_class: `wallet-card__${currency.toLowerCase()}-bg${is_dark_mode_on ? '--dark' : ''}`,\n            }));\n\n        // Sort the unadded wallets alphabetically by fiat, crypto, then virtual\n        available_wallets?.sort((a, b) => {\n            if (is_crypto(a.currency) !== is_crypto(b.currency)) {\n                return is_crypto(a.currency) ? 1 : -1;\n            }\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        });\n\n        // Sort the added wallets alphabetically by fiat, crypto, then virtual (if any)\n        if (Array.isArray(modified_wallets)) {\n            modified_wallets?.sort((a, b) => {\n                if (is_crypto(a.currency) !== is_crypto(b.currency)) {\n                    return is_crypto(a.currency) ? 1 : -1;\n                }\n\n                return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n            });\n            return [...available_wallets, ...modified_wallets];\n        }\n\n        return [...available_wallets];\n    }, [added_wallets, account_type_data, data?.landing_company_name, is_dark_mode_on, is_crypto]);\n\n    return {\n        ...rest,\n        data: sortedWallets,\n    };\n};\n\nexport default useAvailableWallets;\n","import { useStore } from '@deriv/stores';\n\n/** @deprecated Use `useMT5AccountsList` for MT5 accounts and `useDxtradeAccountsList` for Other CFD accounts from `@deriv/api` instead. */\nconst useCFDAllAccounts = () => {\n    const { client } = useStore();\n    const { dxtrade_accounts_list, mt5_login_list, ctrader_accounts_list } = client;\n\n    let cfd_accounts: typeof mt5_login_list = [];\n    if (Array.isArray(mt5_login_list)) {\n        cfd_accounts = [...cfd_accounts, ...mt5_login_list];\n    }\n    if (Array.isArray(dxtrade_accounts_list)) {\n        cfd_accounts = [...cfd_accounts, ...dxtrade_accounts_list];\n    }\n    if (Array.isArray(ctrader_accounts_list)) {\n        cfd_accounts = [...cfd_accounts, ...ctrader_accounts_list];\n    }\n\n    return cfd_accounts;\n};\n\nexport default useCFDAllAccounts;\n","import useCFDAllAccounts from './useCFDAllAccounts';\n\n/**\n *  we can use this hook to get the CFD demo accounts.\n *  it loops through the all of user's CFD accounts, finds and returns demo accounts\n */\nconst useCFDDemoAccounts = () => {\n    const cfd_accounts = useCFDAllAccounts();\n\n    const cfd_demo_accounts = cfd_accounts.filter(account => account.account_type === 'demo');\n\n    return cfd_demo_accounts;\n};\n\nexport default useCFDDemoAccounts;\n","import { useStore } from '@deriv/stores';\nimport useCFDAllAccounts from './useCFDAllAccounts';\n\n/**\n * we can use this hook to get the real CFD accounts for both Eu and Non-Eu regions.\n * it loops through the all of user's CFD accounts, finds and returns real accounts\n */\nconst useCFDRealAccounts = () => {\n    const { traders_hub } = useStore();\n    const { is_eu_user } = traders_hub;\n    const cfd_accounts = useCFDAllAccounts();\n\n    const cfd_real_accounts = cfd_accounts.filter(account => {\n        const is_demo = account.account_type === 'demo';\n        const is_maltainvest = account.landing_company_short === 'maltainvest';\n\n        if (is_demo) return false;\n        if (!is_eu_user) return !is_maltainvest;\n\n        return is_maltainvest;\n    });\n\n    return cfd_real_accounts;\n};\n\nexport default useCFDRealAccounts;\n","import useCFDAllAccounts from './useCFDAllAccounts';\nimport useCFDDemoAccounts from './useCFDDemoAccounts';\nimport useCFDRealAccounts from './useCFDRealAccounts';\n\n/**\n * this is a wrapper hook for useCFDDemoAccounts and useCFDRealAccounts\n * and it returns different cfd account types which are demo, real, and all\n */\n\nconst useCFDAccounts = () => {\n    const all_cfd_accounts = useCFDAllAccounts();\n    const cfd_demo_accounts = useCFDDemoAccounts();\n    const cfd_real_accounts = useCFDRealAccounts();\n\n    return {\n        all: all_cfd_accounts,\n        demo: cfd_demo_accounts,\n        real: cfd_real_accounts,\n    };\n};\n\nexport default useCFDAccounts;\n","import { useStore } from '@deriv/stores';\n\nconst useCashierLocked = () => {\n    const { client } = useStore();\n    const { account_status } = client;\n\n    const is_cashier_locked = account_status?.status?.some(status => status === 'cashier_locked') || false;\n\n    return is_cashier_locked;\n};\n\nexport default useCashierLocked;\n","import { ContentFlag } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\n\nconst useContentFlag = () => {\n    const { traders_hub } = useStore();\n    const content_flag = traders_hub?.content_flag;\n\n    return {\n        is_low_risk_cr_non_eu: content_flag === ContentFlag.LOW_RISK_CR_NON_EU,\n        is_low_risk_cr_eu: content_flag === ContentFlag.LOW_RISK_CR_EU,\n        is_high_risk_cr: content_flag === ContentFlag.HIGH_RISK_CR,\n        is_cr_demo: content_flag === ContentFlag.CR_DEMO,\n        is_eu_demo: content_flag === ContentFlag.EU_DEMO,\n        is_eu_real: content_flag === ContentFlag.EU_REAL,\n    };\n};\n\nexport default useContentFlag;\n","import { useStore } from '@deriv/stores';\n\nconst useCurrentAccountDetails = () => {\n    const { client } = useStore();\n    const { account_list, loginid } = client;\n\n    return account_list.find(account => loginid === account.loginid);\n};\n\nexport default useCurrentAccountDetails;\n","import { useStore } from '@deriv/stores';\n\nconst useNeedAuthentication = () => {\n    const { client, traders_hub } = useStore();\n    const { is_authentication_needed } = client;\n    const { is_low_risk_cr_eu_real } = traders_hub;\n    const is_need_authentication = is_authentication_needed && is_low_risk_cr_eu_real;\n\n    return is_need_authentication;\n};\n\nexport default useNeedAuthentication;\n","import { useStore } from '@deriv/stores';\n\nconst useNeedFinancialAssessment = () => {\n    const { client } = useStore();\n    const { is_financial_account, is_financial_information_incomplete, is_trading_experience_incomplete } = client;\n    const is_need_financial_assessment =\n        is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete);\n\n    return is_need_financial_assessment;\n};\n\nexport default useNeedFinancialAssessment;\n","import { useStore } from '@deriv/stores';\nimport useNeedAuthentication from './useNeedAuthentication';\nimport useNeedFinancialAssessment from './useNeedFinancialAssessment';\nimport useIsTNCNeeded from './useIsTNCNeeded';\n\nconst useDepositLocked = () => {\n    const { client } = useStore();\n    const {\n        is_deposit_lock,\n        is_trading_experience_incomplete,\n        landing_company_shortcode,\n        is_account_to_be_closed_by_residence,\n    } = client;\n    const is_need_authentication = useNeedAuthentication();\n    const is_tnc_needed = useIsTNCNeeded();\n    const is_need_financial_assessment = useNeedFinancialAssessment();\n    const is_malta_invest = landing_company_shortcode === 'maltainvest';\n    const is_trading_experience_incomplete_or_need_financial_assessment = is_malta_invest\n        ? is_trading_experience_incomplete\n        : is_need_financial_assessment;\n\n    const is_deposit_locked =\n        is_deposit_lock ||\n        is_need_authentication ||\n        is_tnc_needed ||\n        is_trading_experience_incomplete_or_need_financial_assessment ||\n        is_account_to_be_closed_by_residence;\n\n    return is_deposit_locked;\n};\n\nexport default useDepositLocked;\n","import { useStore } from '@deriv/stores';\n\nconst useDuplicateDOBPhone = () => {\n    const { client } = useStore();\n    const { is_duplicate_dob_phone } = client;\n\n    return is_duplicate_dob_phone;\n};\n\nexport default useDuplicateDOBPhone;\n","import { useStore } from '@deriv/stores';\n\nexport const useExchangeRate = () => {\n    const { client } = useStore();\n    const {\n        exchange_rates,\n        subscribeToExchangeRate,\n        getExchangeRate,\n        unsubscribeFromExchangeRate,\n        unsubscribeFromAllExchangeRates,\n    } = client;\n\n    return {\n        handleSubscription: subscribeToExchangeRate,\n        exchange_rates,\n        getExchangeRate,\n        unsubscribe: unsubscribeFromExchangeRate,\n        unsubscribeAll: unsubscribeFromAllExchangeRates,\n    };\n};\n\nexport default useExchangeRate;\n","import { useMemo } from 'react';\n\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nimport useActiveWallet from './useActiveWallet';\n\ntype TAccount = {\n    cfd_type?: 'mt5' | 'dxtrade';\n\n    market_type?: 'financial' | 'synthetic' | 'all';\n};\n\nconst getAccountIcon = ({ cfd_type, market_type }: TAccount) => {\n    switch (cfd_type) {\n        case 'mt5': {\n            switch (market_type) {\n                case 'financial':\n                    return 'IcRebrandingMt5FinancialDashboard';\n                case 'synthetic':\n                    return 'IcRebrandingMt5DerivedDashboard';\n                case 'all':\n                    return 'IcRebrandingMt5SwapFree';\n                default:\n                    return 'IcRebrandingDmt5Dashboard';\n            }\n        }\n        case 'dxtrade':\n            return 'IcRebrandingDerivX';\n        default:\n            return '';\n    }\n};\n\n/**\n * @description This hook is used to get the created CFD accounts of the user.\n */\nconst useExistingCFDAccounts = () => {\n    const { traders_hub } = useStore();\n    const { combined_cfd_mt5_accounts } = traders_hub;\n    const wallet = useActiveWallet();\n    const { data: mt5, ...mt5_rest } = useFetch('mt5_login_list');\n    const { data: dxtrade, ...dxtrade_rest } = useFetch('trading_platform_accounts', {\n        payload: { platform: 'dxtrade' },\n    });\n\n    /**\n     *\n     * @description This is the modified MT5 accounts that will be used in the CFD account creation.\n     */\n    const modified_mt5_accounts = useMemo(() => {\n        const getAccountInfo = (login?: string) => {\n            return {\n                platform: wallet?.linked_to?.find(linked => linked.loginid === login)?.platform,\n                icon: combined_cfd_mt5_accounts?.find(cfd => cfd.login === login)?.icon,\n                description: combined_cfd_mt5_accounts?.find(cfd => cfd.login === login)?.description,\n                name: combined_cfd_mt5_accounts?.find(cfd => cfd.login === login)?.name,\n                sub_title: combined_cfd_mt5_accounts?.find(cfd => cfd.login === login)?.sub_title,\n                action_type: 'multi-action',\n            };\n        };\n\n        return mt5?.mt5_login_list?.map(account => ({\n            ...account,\n            ...getAccountInfo(account.login),\n            loginid: account.login,\n            transfer_icon: getAccountIcon({ cfd_type: 'mt5', ...account }),\n        }));\n    }, [mt5?.mt5_login_list, wallet?.linked_to, combined_cfd_mt5_accounts]);\n\n    const modified_dxtrade_accounts = useMemo(\n        () =>\n            dxtrade?.trading_platform_accounts?.map(account => ({\n                ...account,\n                loginid: account.account_id,\n                transfer_icon: getAccountIcon({ cfd_type: 'dxtrade' }),\n            })),\n        [dxtrade?.trading_platform_accounts]\n    );\n    const data = useMemo(\n        () => ({\n            mt5_accounts: modified_mt5_accounts || [],\n            dxtrade_accounts: modified_dxtrade_accounts || [],\n        }),\n        [modified_mt5_accounts, modified_dxtrade_accounts]\n    );\n\n    return {\n        data,\n        isSuccess: [mt5_rest.isSuccess, dxtrade_rest.isSuccess].every(Boolean),\n    };\n};\n\nexport default useExistingCFDAccounts;\n","import { useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst useFeatureFlags = () => {\n    const { feature_flags } = useStore();\n\n    const result = useMemo(() => {\n        const flags = feature_flags.data ?? {};\n\n        return Object.keys(flags).reduce(\n            (previous, current) => ({\n                ...previous,\n                // @ts-expect-error current key is always present in the object, Hence can ignore the TS error.\n                [`is_${current}_enabled`]: Boolean(flags[current]),\n            }),\n            {} as Record<`is_${keyof typeof flags}_enabled`, boolean>\n        );\n    }, [feature_flags.data]);\n\n    return result;\n};\nexport default useFeatureFlags;\n","import { useStore } from '@deriv/stores';\n\nconst useFiatAccountList = () => {\n    const { client } = useStore();\n    const { account_list, is_crypto } = client;\n\n    const fiat_account_list = account_list.filter(account => !account.is_virtual && !is_crypto(account.title || ''));\n\n    return fiat_account_list;\n};\n\nexport default useFiatAccountList;\n","import { useState } from 'react';\nimport { useStore } from '@deriv/stores';\n\ntype TError = { code?: string; name?: string; message: string };\n\nconst useGetPasskeysList = () => {\n    const { client } = useStore();\n    const { passkeys_list, fetchPasskeysList } = client;\n\n    const [is_passkeys_list_loading, setIsPasskeysListLoading] = useState(false);\n    const [passkeys_list_error, setPasskeysListError] = useState<TError | null>(null);\n\n    const refetchPasskeysList = async () => {\n        try {\n            setIsPasskeysListLoading(true);\n            await fetchPasskeysList();\n        } catch (e) {\n            setPasskeysListError(e as TError);\n        } finally {\n            setIsPasskeysListLoading(false);\n        }\n    };\n\n    return {\n        passkeys_list,\n        passkeys_list_error,\n        is_passkeys_list_loading,\n        refetchPasskeysList,\n    };\n};\n\nexport default useGetPasskeysList;\n","import { Analytics, TEvents } from '@deriv-com/analytics';\nimport { useCallback } from 'react';\n\ntype TTrackPhoneVerificationEventsPayload = {\n    //@ts-expect-error will remove this error when Analytics package types are being updated\n    action: TEvents['ce_phone_verification_form']['action'];\n    cta_name?: string;\n    subform_name?: string;\n};\n\nconst usePhoneVerificationAnalytics = () => {\n    const trackPhoneVerificationEvents = useCallback(\n        (payload: TTrackPhoneVerificationEventsPayload) =>\n            //@ts-expect-error will remove this error when Analytics package types are being updated\n            Analytics.trackEvent('ce_phone_verification_form', { form_name: 'ce_phone_verification_form', ...payload }),\n        []\n    );\n\n    return { trackPhoneVerificationEvents };\n};\n\nexport default usePhoneVerificationAnalytics;\n","import React, { useState } from 'react';\nimport { useMutation } from '@deriv/api';\nimport { getCarriers, getUseRequestPhoneNumberOTPErrorMessage, VERIFICATION_SERVICES } from '@deriv/shared';\nimport useSettings from './useSettings';\nimport { useStore } from '@deriv/stores';\nimport usePhoneVerificationAnalytics from './usePhoneVerificationAnalytics';\n\ntype TFormatError = {\n    code: string;\n    message: string;\n};\n\n/** A hook for requesting OTP which is sent on whatsapp or sms platforms */\nconst useRequestPhoneNumberOTP = () => {\n    const {\n        data,\n        mutate,\n        error: email_otp_error,\n        isSuccess: is_email_verified,\n        ...rest\n    } = useMutation('phone_number_challenge');\n    const [error_message, setErrorMessage] = useState<React.ReactNode>('');\n    const [is_disabled_request_button, setIsDisabledRequestButton] = useState(false);\n    const [carrier, setCarrier] = useState('');\n    const { client } = useStore();\n    const { verification_code } = client;\n    const { phone_number_verification: phone_number_verification_code } = verification_code;\n    const {\n        mutation: { mutateAsync: updateSettings },\n    } = useSettings();\n    const { trackPhoneVerificationEvents } = usePhoneVerificationAnalytics();\n\n    React.useEffect(() => {\n        //@ts-expect-error will fix this later\n        if (email_otp_error) formatError(email_otp_error);\n    }, [email_otp_error]);\n\n    const getOtherCarrier = () => {\n        return carrier === VERIFICATION_SERVICES.SMS ? getCarriers().WHATSAPP : getCarriers().SMS;\n    };\n\n    const getCurrentCarrier = () => {\n        return carrier === VERIFICATION_SERVICES.SMS ? getCarriers().SMS : getCarriers().WHATSAPP;\n    };\n\n    const requestOnSMS = () => {\n        mutate({\n            payload: {\n                carrier: VERIFICATION_SERVICES.SMS,\n                email_code: phone_number_verification_code || '',\n            },\n        });\n        setCarrier(VERIFICATION_SERVICES.SMS);\n    };\n\n    const requestOnWhatsApp = () => {\n        mutate({\n            payload: {\n                carrier: VERIFICATION_SERVICES.WHATSAPP,\n                email_code: phone_number_verification_code || '',\n            },\n        });\n        setCarrier(VERIFICATION_SERVICES.WHATSAPP);\n    };\n\n    const sendEmailOTPVerification = (value: string) => {\n        mutate({ payload: { email_code: value } });\n    };\n\n    const setUsersPhoneNumber = async (value: { [key: string]: unknown }) => {\n        let error;\n        try {\n            await updateSettings({\n                payload: value,\n            });\n        } catch (err) {\n            trackPhoneVerificationEvents({\n                action: 'error',\n                subform_name: 'verify_phone_screen',\n                // @ts-expect-error will remove once solved\n                error_code: err.code,\n            });\n            formatError(err as TFormatError);\n            error = err;\n        }\n\n        return {\n            error,\n        };\n    };\n\n    const formatError = ({ code, message }: TFormatError) => {\n        const errorCases = {\n            // This boolean value is used to disable the request button: setIsDisabledRequestButton()\n            PhoneNumberTaken: true,\n            PhoneNumberVerificationSuspended: false,\n            InvalidPhone: false,\n        };\n\n        if (code in errorCases) {\n            setIsDisabledRequestButton(errorCases[code as keyof typeof errorCases]);\n            setErrorMessage(getUseRequestPhoneNumberOTPErrorMessage(code, getCurrentCarrier, getOtherCarrier));\n        } else {\n            setIsDisabledRequestButton(true);\n            setErrorMessage(message);\n        }\n    };\n\n    return {\n        data: data?.phone_number_challenge,\n        error_message,\n        email_otp_error,\n        is_email_verified,\n        requestOnWhatsApp,\n        requestOnSMS,\n        formatError,\n        setErrorMessage,\n        setUsersPhoneNumber,\n        sendEmailOTPVerification,\n        is_disabled_request_button,\n        setIsDisabledRequestButton,\n        getCurrentCarrier,\n        getOtherCarrier,\n        setCarrier,\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useRequestPhoneNumberOTP;\n","import { useStore } from '@deriv/stores';\n\nconst useHasCryptoCurrency = () => {\n    const { client } = useStore();\n    const { account_list, is_crypto } = client;\n\n    const has_crypto_currency = account_list.some(account => is_crypto(account.title || 'USD'));\n\n    return has_crypto_currency;\n};\n\nexport default useHasCryptoCurrency;\n","import { useStore } from '@deriv/stores';\nimport useCurrencyConfig from './useCurrencyConfig';\n\nconst useHasFiatCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n    const { getConfig } = useCurrencyConfig();\n\n    const has_fiat_currency = account_list.some(\n        account => account.title !== 'Real' && getConfig(account.title || '')?.is_fiat\n    );\n\n    return has_fiat_currency;\n};\n\nexport default useHasFiatCurrency;\n","import { useStore } from '@deriv/stores';\nimport useP2PSettings from './useP2PSettings';\n\nconst useHasP2PSupportedCurrencies = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n    const { p2p_settings, ...rest } = useP2PSettings();\n\n    const real_account_currencies_list = active_accounts\n        .filter(account => !account.is_virtual)\n        .map(account => account.currency?.toLowerCase());\n\n    const has_p2p_supported_currencies = Boolean(\n        p2p_settings?.supported_currencies?.some((currency: string) => real_account_currencies_list.includes(currency))\n    );\n\n    return {\n        ...rest,\n        data: has_p2p_supported_currencies,\n    };\n};\n\nexport default useHasP2PSupportedCurrencies;\n","import { useStore } from '@deriv/stores';\n\nconst useHasUSDCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n\n    const has_usd_currency = account_list.some(account => account.title === 'USD');\n\n    return has_usd_currency;\n};\n\nexport default useHasUSDCurrency;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst AccountStatusList = [\n    'address_verified',\n    'age_verification',\n    'allow_document_upload',\n    'allow_poa_resubmission',\n    'allow_poi_resubmission',\n    'authenticated',\n    'cashier_locked',\n    'crs_tin_information',\n    'deposit_attempt',\n    'deposit_locked',\n    'df_deposit_requires_poi',\n    'disabled',\n    'document_expired',\n    'document_expiring_soon',\n    'document_under_review',\n    'dxtrade_password_not_set',\n    'financial_assessment_not_complete',\n    'financial_information_not_complete',\n    'financial_risk_approval',\n    'idv_revoked',\n    'max_turnover_limit_not_set',\n    'mt5_password_not_set',\n    'mt5_withdrawal_locked',\n    'needs_affiliate_coc_approval',\n    'no_trading',\n    'no_withdrawal_or_trading',\n    'p2p_blocked_for_pa',\n    'pa_withdrawal_explicitly_allowed',\n    'password_reset_required',\n    'personal_details_locked',\n    'poi_name_mismatch',\n    'professional',\n    'professional_requested',\n    'professional_rejected',\n    'shared_payment_method',\n    'social_signup',\n    'transfers_blocked',\n    'trading_experience_not_complete',\n    'unwelcome',\n    'withdrawal_locked',\n] as const;\n\ntype TAccountStatus = typeof AccountStatusList[number];\n\n/**\n * Custom hook to check if a particular account status is present.\n * @name useIsAccountStatusPresent\n * @param status of the account to check\n * @returns boolean\n */\nconst useIsAccountStatusPresent = (status: TAccountStatus) => {\n    const {\n        client: { account_status },\n    } = useStore();\n\n    const status_list = account_status?.status;\n\n    return React.useMemo(() => status_list?.includes(status) ?? false, [status_list, status]);\n};\n\nexport default useIsAccountStatusPresent;\n","import { useStore } from '@deriv/stores';\n\n/**\n * Checks if a client is considered high risk for MT5 trading based on their available trading accounts.\n * @returns `true` if the client is high risk for MT5 trading, `false` otherwise.\n */\nconst useIsClientHighRiskForMT5 = () => {\n    const {\n        client: { trading_platform_available_accounts },\n    } = useStore();\n    const financial_available_accounts = trading_platform_available_accounts.filter(\n        available_account => available_account.market_type === 'financial'\n    );\n\n    const synthetic_available_accounts = trading_platform_available_accounts.filter(\n        available_account => available_account.market_type === 'gaming'\n    );\n\n    return (\n        financial_available_accounts.length === 1 &&\n        financial_available_accounts.every(acc => acc.shortcode === 'svg') &&\n        synthetic_available_accounts.length === 1 &&\n        synthetic_available_accounts.every(acc => acc.shortcode === 'svg')\n    );\n};\n\nexport default useIsClientHighRiskForMT5;\n","import { useStore } from '@deriv/stores';\n\nconst useIsSystemMaintenance = () => {\n    const { client } = useStore();\n    const { account_status } = client;\n\n    const is_system_maintenance =\n        account_status?.cashier_validation?.some(validation => validation === 'system_maintenance') || false;\n\n    return is_system_maintenance;\n};\n\nexport default useIsSystemMaintenance;\n","import { useQuery } from '@deriv/api';\nimport { useMemo } from 'react';\n\ntype TUseLandingCompanyDetailsPayload = Parameters<typeof useQuery<'landing_company_details'>>['1']['payload'];\n\n/** A custom hook that returns the available landing companies of the user's country. */\nconst useLandingCompanyDetails = (payload: TUseLandingCompanyDetailsPayload) => {\n    const { data, ...rest } = useQuery('landing_company_details', {\n        payload,\n        options: { enabled: Boolean(payload.landing_company_details) },\n    });\n\n    // Add additional information to the landing company response.\n    const modified_landing_company_details = useMemo(() => {\n        if (!data?.landing_company_details) return undefined;\n\n        return { ...data.landing_company_details };\n    }, [data?.landing_company_details]);\n\n    return {\n        /** The landing company response. */\n        data: modified_landing_company_details,\n        ...rest,\n    };\n};\n\nexport default useLandingCompanyDetails;\n","import React from 'react';\nimport { getLocalStorage } from '@deriv/utils';\n\n/**\n * Hook that manages a localStorage value as a React state.\n * @template T - The generic type of the localStorage value.\n * @param {string} key - The localStorage key.\n * @param {T} [fallback_value] - Optional fallback value if the key does not exist or has no value.\n * @returns - An array containing the current value, a function to update the value, and a function to clear the value.\n */\nconst useLocalStorageData = <T>(\n    key: string,\n    fallback_value?: T\n): [T | null, React.Dispatch<React.SetStateAction<T | null>>, VoidFunction] => {\n    const [data, setData] = React.useState<T | null>(getLocalStorage(key) ?? fallback_value ?? null);\n\n    React.useEffect(() => {\n        localStorage.setItem(key, JSON.stringify(data));\n    }, [key, data]);\n\n    const clearData = () => {\n        localStorage.removeItem(key);\n        setData(fallback_value ?? null);\n    };\n\n    return [data, setData, clearData];\n};\n\nexport default useLocalStorageData;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { Jurisdiction, getFormattedJurisdictionCode } from '@deriv/shared';\n\nconst useMT5SVGEligibleToMigrate = () => {\n    const { client, traders_hub } = useStore();\n    const { mt5_login_list } = client;\n    const { show_eu_related_content } = traders_hub;\n\n    const mt5_migration_config = React.useMemo(() => {\n        const svg_accounts_to_migrate = mt5_login_list.filter(\n            account => account.landing_company_short === Jurisdiction.SVG && !!account.eligible_to_migrate\n        );\n\n        const has_svg_accounts_to_migrate = !!svg_accounts_to_migrate.length && !show_eu_related_content;\n\n        const no_of_svg_accounts_to_migrate = svg_accounts_to_migrate.length;\n\n        const is_eligible_for_svg_to_bvi_migration = !!svg_accounts_to_migrate.filter(account =>\n            Object.values(account.eligible_to_migrate ?? {}).includes(Jurisdiction.BVI)\n        ).length;\n\n        const is_eligible_for_svg_to_vanuatu_migration = !!svg_accounts_to_migrate.filter(account =>\n            Object.values(account.eligible_to_migrate ?? {}).includes(Jurisdiction.VANUATU)\n        ).length;\n\n        const getEligibleAccountToMigrate = () => {\n            if (is_eligible_for_svg_to_bvi_migration) {\n                return Jurisdiction.BVI;\n            } else if (is_eligible_for_svg_to_vanuatu_migration) {\n                return Jurisdiction.VANUATU;\n            }\n        };\n        const eligible_account_to_migrate_label = getFormattedJurisdictionCode(getEligibleAccountToMigrate());\n\n        const eligible_svg_to_bvi_derived_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.synthetic === Jurisdiction.BVI\n        ).length;\n\n        const eligible_svg_to_bvi_financial_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.financial === Jurisdiction.BVI\n        ).length;\n\n        const eligible_svg_to_vanuatu_derived_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.synthetic === Jurisdiction.VANUATU\n        ).length;\n\n        const eligible_svg_to_vanuatu_financial_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.financial === Jurisdiction.VANUATU\n        ).length;\n\n        const has_derived_mt5_to_migrate =\n            eligible_svg_to_bvi_derived_accounts || eligible_svg_to_vanuatu_derived_accounts;\n        const has_financial_mt5_to_migrate =\n            eligible_svg_to_bvi_financial_accounts || eligible_svg_to_vanuatu_financial_accounts;\n        const has_derived_and_financial_mt5 = has_derived_mt5_to_migrate && has_financial_mt5_to_migrate;\n\n        return {\n            eligible_account_to_migrate_label,\n            eligible_svg_to_bvi_derived_accounts,\n            eligible_svg_to_bvi_financial_accounts,\n            eligible_svg_to_vanuatu_derived_accounts,\n            eligible_svg_to_vanuatu_financial_accounts,\n            getEligibleAccountToMigrate,\n            has_derived_and_financial_mt5,\n            has_derived_mt5_to_migrate,\n            has_svg_accounts_to_migrate,\n            no_of_svg_accounts_to_migrate,\n            svg_accounts_to_migrate,\n        };\n    }, [mt5_login_list, show_eu_related_content]);\n    return {\n        ...mt5_migration_config,\n    };\n};\n\nexport default useMT5SVGEligibleToMigrate;\n","import { useStore } from '@deriv/stores';\n\nconst useNeedPOI = () => {\n    const { client } = useStore();\n    const authentication = client.account_status?.authentication;\n\n    return authentication?.needs_verification.includes('identity');\n};\n\nexport default useNeedPOI;\n","import React from 'react';\nimport { useSubscription } from '@deriv/api';\n\n/**\n * @deprecated Please use `useAdvertInfo` from the `api` package instead.\n * This custom hook returns the advert info for a specific advert by calling 'p2p_advert_info' endpoint\n */\nconst useP2PAdvertInfo = (id: string) => {\n    const { subscribe, data, unsubscribe, ...rest } = useSubscription('p2p_advert_info');\n\n    React.useEffect(() => {\n        if (id) subscribe({ payload: { id } });\n\n        return () => unsubscribe();\n    }, [subscribe]);\n\n    const modified_data = React.useMemo(() => {\n        const p2p_advert_info = data?.p2p_advert_info;\n\n        if (!p2p_advert_info) return undefined;\n\n        return {\n            ...p2p_advert_info,\n            /** Determines whether the advert is a buy advert or not. */\n            is_buy: p2p_advert_info?.type === 'buy',\n            /** Determines whether the advert is a sell advert or not. */\n            is_sell: p2p_advert_info?.type === 'sell',\n        };\n    }, [data?.p2p_advert_info]);\n\n    return {\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useP2PAdvertInfo;\n","import React from 'react';\nimport { useInfiniteQuery } from '@deriv/api';\n\n/**\n * This custom hook returns available adverts for use with 'p2p_order_create' by calling 'p2p_advert_list' endpoint\n */\nconst useP2PAdvertList = (\n    payload?: NonNullable<Parameters<typeof useInfiniteQuery<'p2p_advert_list'>>[1]>['payload'],\n    config?: { enabled?: boolean }\n) => {\n    const { data, fetchNextPage, ...rest } = useInfiniteQuery('p2p_advert_list', {\n        payload: { ...payload, offset: payload?.offset || 0, limit: payload?.limit || 50 },\n        options: {\n            getNextPageParam: (lastPage, pages) => {\n                if (!lastPage?.p2p_advert_list?.list) return;\n\n                return pages.length;\n            },\n            enabled: config?.enabled === undefined || config.enabled,\n            refetchOnWindowFocus: false,\n        },\n    });\n\n    // Flatten the data array.\n    const flatten_data = React.useMemo(() => {\n        if (!data?.pages?.length) return;\n\n        return data?.pages?.flatMap(page => page?.p2p_advert_list?.list);\n    }, [data?.pages]);\n\n    // Add additional information to the 'p2p_advert_list' data\n    const modified_data = React.useMemo(() => {\n        if (!flatten_data?.length) return undefined;\n\n        return flatten_data.map(advert => ({\n            ...advert,\n            /** Determine if the rate is floating or fixed */\n            is_floating: advert?.rate_type === 'float',\n            /** The advert creation time in epoch. */\n            created_time: advert?.created_time ? new Date(advert.created_time) : undefined,\n        }));\n    }, [flatten_data]);\n\n    return {\n        /** The 'p2p_advert_list' response. */\n        data: modified_data,\n        loadMoreAdverts: fetchNextPage,\n        ...rest,\n    };\n};\n\nexport default useP2PAdvertList;\n","import { useCallback, useMemo } from 'react';\nimport { useFetch, useInvalidateQuery, useRequest } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\ntype TPayloads = NonNullable<\n    NonNullable<Parameters<ReturnType<typeof useRequest<'p2p_advertiser_payment_methods'>>['mutate']>[0]>['payload']\n>;\ntype TCreatePayload = NonNullable<TPayloads['create']>[0];\ntype TUpdatePayload = NonNullable<TPayloads['update']>[0];\n\nconst type_to_icon_mapper = {\n    bank: 'IcCashierBankTransfer',\n    other: 'IcCashierOther',\n    ewallet: 'IcCashierEwallet',\n};\n\n/** A custom hook to fetch, create, update, and delete p2p advertiser payment methods */\nconst useP2PAdvertiserPaymentMethods = () => {\n    const invalidate = useInvalidateQuery();\n    const { client } = useStore();\n    const { is_authorize } = client;\n    const { mutate, ...mutate_rest } = useRequest('p2p_advertiser_payment_methods', {\n        onSuccess: () => invalidate('p2p_advertiser_payment_methods'),\n    });\n    const { data, ...rest } = useFetch('p2p_advertiser_payment_methods', {\n        options: { enabled: is_authorize },\n    });\n\n    // Modify the response to add additional informations\n    const modified_data = useMemo(() => {\n        const p2p_advertiser_payment_methods = data?.p2p_advertiser_payment_methods;\n\n        if (!p2p_advertiser_payment_methods) return undefined;\n\n        return Object.keys(p2p_advertiser_payment_methods).map(key => {\n            const advertiser_payment_method = p2p_advertiser_payment_methods[key];\n\n            return {\n                ...advertiser_payment_method,\n                /** Icon for each payment method based on the type */\n                icon: type_to_icon_mapper[advertiser_payment_method.type],\n                /** The id of payment method */\n                id: key,\n            };\n        });\n    }, [data]);\n\n    const create = useCallback((values: TCreatePayload) => mutate({ payload: { create: [{ ...values }] } }), [mutate]);\n\n    const update = useCallback(\n        (id: string, values: TUpdatePayload) => mutate({ payload: { update: { [id]: { ...values } } } }),\n        [mutate]\n    );\n\n    const delete_payment_method = useCallback((id: number) => mutate({ payload: { delete: [id] } }), [mutate]);\n\n    return {\n        /** The list of p2p advertiser payment methods */\n        data: modified_data,\n        /** Sends a request to create new p2p advertiser payment method */\n        create,\n        /** Sends a request to update existing p2p advertiser payment method */\n        update,\n        /** Sends a request to delete existing p2p advertiser payment method */\n        delete: delete_payment_method,\n        ...rest,\n        mutation: mutate_rest,\n    };\n};\n\nexport default useP2PAdvertiserPaymentMethods;\n","import { useSubscription } from '@deriv/api';\n\n/** A custom hook to subscribe to p2p_order_list */\nconst useP2POrderList = () => {\n    const { data, ...rest } = useSubscription('p2p_order_list');\n\n    return {\n        /** List of p2p orders for the current user */\n        data,\n        ...rest,\n    };\n};\n\nexport default useP2POrderList;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { useGetAccountStatus } from '@deriv/api';\nimport useP2POrderList from './useP2POrderList';\n\nconst useP2PCompletedOrdersNotification = () => {\n    const { subscribe, data, unsubscribe, isSubscribed } = useP2POrderList();\n    const { data: getAccountStatusData } = useGetAccountStatus();\n    const { is_p2p_user } = getAccountStatusData || {};\n    const { client, notifications } = useStore();\n    const { is_authorize } = client;\n\n    React.useEffect(() => {\n        if (is_authorize && is_p2p_user) {\n            subscribe({\n                payload: {\n                    active: 0,\n                },\n            });\n        }\n        return () => {\n            isSubscribed && unsubscribe();\n        };\n    }, [isSubscribed, is_authorize, is_p2p_user, subscribe, unsubscribe]);\n\n    React.useEffect(() => {\n        if (data?.p2p_order_list?.list.length && data?.p2p_order_list?.list !== notifications.p2p_completed_orders) {\n            notifications.p2p_completed_orders = data.p2p_order_list.list;\n        }\n        // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n        else if (data?.p2p_order_info) {\n            if (notifications?.p2p_completed_orders) {\n                // replace order if order id is in the list\n                // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n                if (notifications?.p2p_completed_orders.some(order => order.id === data.p2p_order_info.id)) {\n                    const index = notifications?.p2p_completed_orders.findIndex(\n                        // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n                        order => order.id === data.p2p_order_info.id\n                    );\n                    // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n                    notifications?.p2p_completed_orders.splice(index, 1, data.p2p_order_info);\n                }\n                // add order if order id is not in the list\n                else {\n                    // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n                    notifications?.p2p_completed_orders.unshift(data.p2p_order_info);\n                }\n            }\n        }\n        notifications?.p2p_completed_orders?.sort((a, b) => {\n            return (b.completion_time || 0) - (a.completion_time || 0);\n        });\n    }, [data, notifications]);\n};\n\nexport default useP2PCompletedOrdersNotification;\n","import { useQuery } from '@deriv/api';\n\n/**\n * A custom hook that returns an object containing the list of countries available for P2P trading.\n *\n * For returning details of a specific country, the country code can be passed in the payload.\n * @example: useCountryList({ country: 'id' })\n *\n */\nconst useP2PCountryList = (payload?: NonNullable<Parameters<typeof useQuery<'p2p_country_list'>>[1]>['payload']) => {\n    const { data, ...rest } = useQuery('p2p_country_list', {\n        payload,\n        options: { refetchOnWindowFocus: false },\n    });\n\n    return {\n        p2p_country_list: data?.p2p_country_list,\n        ...rest,\n    };\n};\n\nexport default useP2PCountryList;\n","import React from 'react';\nimport useExchangeRate from './useExchangeRate';\n\nconst useP2PExchangeRate = (local_currency: string) => {\n    const { handleSubscription, exchange_rates } = useExchangeRate();\n\n    React.useEffect(() => {\n        handleSubscription('USD', local_currency);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [local_currency]);\n\n    const exchange_rate = exchange_rates?.USD?.[local_currency];\n\n    return exchange_rate;\n};\n\nexport default useP2PExchangeRate;\n","import React from 'react';\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst type_to_icon_mapper = {\n    bank: 'IcCashierBankTransfer',\n    other: 'IcCashierOther',\n    ewallet: 'IcCashierEwallet',\n};\n\n/**\n * @deprecated This hook is deprecated. Please use the one from the `api` package instead.\n * A custom hook that return the list of P2P available payment methods */\nconst useP2PPaymentMethods = () => {\n    const { client } = useStore();\n    const { is_authorize } = client;\n\n    const { data, ...rest } = useFetch('p2p_payment_methods', {\n        options: { enabled: is_authorize, refetchOnWindowFocus: false },\n    });\n\n    // Modify the data to add additional information.\n    const modified_data = React.useMemo(() => {\n        const p2p_payment_methods = data?.p2p_payment_methods;\n\n        if (!p2p_payment_methods) return undefined;\n\n        return Object.keys(p2p_payment_methods).map(key => {\n            const payment_method = p2p_payment_methods[key];\n            const fields = Object.keys(payment_method.fields).map(field_key => payment_method.fields[field_key]);\n\n            return {\n                ...payment_method,\n                /** Payment method field definitions. */\n                fields,\n                /** Icon for each payment method based on the type */\n                icon: type_to_icon_mapper[payment_method.type],\n                /** Payment method id */\n                id: key,\n            };\n        });\n    }, [data]);\n\n    return {\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useP2PPaymentMethods;\n","import { useStore } from '@deriv/stores';\n\n/**\n * we can use this hook to get the platform demo account.\n * it loops through the all of user's accounts, finds and returns demo account\n */\n\nconst usePlatformDemoAccount = () => {\n    const { client } = useStore();\n    const { accounts } = client;\n    const account_list = Object.keys(accounts).map(loginid => ({\n        ...accounts[loginid],\n        loginid,\n    }));\n\n    const platform_demo_account = account_list.find(account => account.is_virtual);\n\n    return platform_demo_account;\n};\n\nexport default usePlatformDemoAccount;\n","import { useStore } from '@deriv/stores';\n\n/**\n * we can use this hook to get all real accounts for both Eu and Non-Eu regions.\n * it loops through the accounts list and returns all real accounts\n */\n\nconst usePlatformRealAccounts = () => {\n    const { client, traders_hub } = useStore();\n    const { accounts } = client;\n    const { is_eu_user } = traders_hub;\n    const account_list = Object.keys(accounts).map(loginid => ({\n        ...accounts[loginid],\n        loginid,\n    }));\n\n    const platform_real_accounts = account_list.filter(account => {\n        const is_maltainvest =\n            'landing_company_shortcode' in account && account.landing_company_shortcode === 'maltainvest';\n\n        if (account.is_virtual) return false;\n        if (!is_eu_user) return !is_maltainvest;\n\n        return is_maltainvest;\n    });\n\n    return platform_real_accounts;\n};\n\nexport default usePlatformRealAccounts;\n","import usePlatformDemoAccount from './usePlatformDemoAccount';\nimport usePlatformRealAccounts from './usePlatformRealAccounts';\n\n/**\n * this is a wrapper hook for usePlatformDemoAccount and usePlatformRealAccounts\n * and it returns different platform accounts which are demo, and real\n */\nconst usePlatformAccounts = () => {\n    const platform_demo_account = usePlatformDemoAccount();\n    const platform_real_accounts = usePlatformRealAccounts();\n\n    return {\n        demo: platform_demo_account,\n        real: platform_real_accounts,\n    };\n};\n\nexport default usePlatformAccounts;\n","import { useStore } from '@deriv/stores';\n\nconst useRealSTPAccount = () => {\n    const { client } = useStore();\n    const { mt5_login_list } = client;\n    const has_real_stp_account = mt5_login_list.some(\n        item => item.account_type === 'real' && item.sub_account_type === 'financial_stp'\n    );\n\n    return has_real_stp_account;\n};\n\nexport default useRealSTPAccount;\n","import { useState } from 'react';\nimport { startRegistration } from '@simplewebauthn/browser';\nimport { PublicKeyCredentialCreationOptionsJSON } from '@simplewebauthn/typescript-types';\nimport { WS } from '@deriv/shared';\n\ntype TError = { code?: string; name?: string; message: string };\n\nconst useRegisterPasskey = ({ onSuccess }: { onSuccess: () => void }) => {\n    const [passkey_registration_error, setPasskeyRegistrationError] = useState<TError | null>(null);\n    const [public_key, setPublicKey] = useState<null | PublicKeyCredentialCreationOptionsJSON>(null);\n\n    const startPasskeyRegistration = async () => {\n        try {\n            const passkeys_register_options_response = await WS.send({ passkeys_register_options: 1 });\n            const public_key = passkeys_register_options_response?.passkeys_register_options?.publicKey;\n            setPublicKey(public_key);\n        } catch (e) {\n            setPasskeyRegistrationError(e as TError);\n        }\n    };\n\n    const createPasskey = async () => {\n        try {\n            if (public_key) {\n                const authenticator_response = await startRegistration(public_key);\n                const passkeys_register_response = await WS.send({\n                    passkeys_register: 1,\n                    publicKeyCredential: authenticator_response,\n                });\n                if (passkeys_register_response?.passkeys_register?.properties?.name) {\n                    onSuccess();\n                } else if (passkeys_register_response?.error) {\n                    setPasskeyRegistrationError(passkeys_register_response?.error);\n                }\n            }\n        } catch (e) {\n            setPasskeyRegistrationError(e as TError);\n        } finally {\n            setPublicKey(null);\n        }\n    };\n\n    return {\n        createPasskey,\n        passkey_registration_error,\n        startPasskeyRegistration,\n    };\n};\n\nexport default useRegisterPasskey;\n","import React, { useEffect, useState } from 'react';\nimport { useMutation } from '@deriv/api';\nimport { TSocketError } from '@deriv/api/types';\nimport useRequestPhoneNumberOTP from './useRequestPhoneNumberOTP';\nimport { useStore } from '@deriv/stores';\nimport useSettings from './useSettings';\nimport { emailOTPErrorMessage, phoneOTPErrorMessage } from '@deriv/shared';\nimport usePhoneVerificationAnalytics from './usePhoneVerificationAnalytics';\n\n/** A hook for verifying Phone Number OTP and Email OTP */\nconst useSendOTPVerificationCode = () => {\n    const [phone_otp_error_message, setPhoneOtpErrorMessage] = useState<React.ReactNode>('');\n    const [show_cool_down_period_modal, setShowCoolDownPeriodModal] = useState(false);\n    const { ui } = useStore();\n    const { setIsForcedToExitPnv } = ui;\n    const {\n        data,\n        mutate,\n        error: phone_otp_error,\n        isSuccess: is_phone_number_verified,\n        ...rest\n    } = useMutation('phone_number_verify');\n    const { data: account_settings, refetch } = useSettings();\n    const {\n        sendEmailOTPVerification,\n        email_otp_error,\n        is_email_verified,\n        getCurrentCarrier,\n        getOtherCarrier,\n        requestOnSMS,\n        requestOnWhatsApp,\n    } = useRequestPhoneNumberOTP();\n    const { trackPhoneVerificationEvents } = usePhoneVerificationAnalytics();\n    // @ts-expect-error will remove once solved\n    const challenge_attempts_remaining = account_settings?.phone_number_verification?.challenge_attempts_remaining;\n    // @ts-expect-error will remove once solved\n    const verify_attempts_remaining = account_settings?.phone_number_verification?.verify_attempts_remaining;\n\n    type OTPErrorCode =\n        | 'PhoneCodeExpired'\n        | 'InvalidOTP'\n        | 'EmailCodeExpired'\n        | 'InvalidToken'\n        | 'NoAttemptsLeft'\n        | 'PhoneNumberVerificationSuspended';\n\n    const formatOtpError = (error: TSocketError<'phone_number_verify' | 'phone_number_challenge'>['error']) => {\n        const errorHandlers: Record<OTPErrorCode, () => void> = {\n            PhoneCodeExpired: () =>\n                setPhoneOtpErrorMessage(phoneOTPErrorMessage('PhoneCodeExpired', verify_attempts_remaining)),\n            InvalidOTP: () => {\n                refetch();\n                if (verify_attempts_remaining - 1 === 0) {\n                    setIsForcedToExitPnv(true);\n                    setShowCoolDownPeriodModal(true);\n                    return;\n                }\n                setPhoneOtpErrorMessage(phoneOTPErrorMessage('InvalidOTP', verify_attempts_remaining));\n            },\n            EmailCodeExpired: () =>\n                setPhoneOtpErrorMessage(\n                    emailOTPErrorMessage(\n                        'EmailCodeExpired',\n                        getCurrentCarrier,\n                        getOtherCarrier,\n                        challenge_attempts_remaining\n                    )\n                ),\n            InvalidToken: () => {\n                refetch();\n                if (challenge_attempts_remaining - 1 === 0) {\n                    setIsForcedToExitPnv(true);\n                    setShowCoolDownPeriodModal(true);\n                    return;\n                }\n                setPhoneOtpErrorMessage(\n                    emailOTPErrorMessage(\n                        'InvalidToken',\n                        getCurrentCarrier,\n                        getOtherCarrier,\n                        challenge_attempts_remaining\n                    )\n                );\n            },\n            NoAttemptsLeft: () => {\n                refetch();\n                setIsForcedToExitPnv(true);\n                setShowCoolDownPeriodModal(true);\n            },\n            PhoneNumberVerificationSuspended: () =>\n                setPhoneOtpErrorMessage(\n                    emailOTPErrorMessage(\n                        'PhoneNumberVerificationSuspended',\n                        getCurrentCarrier,\n                        getOtherCarrier,\n                        challenge_attempts_remaining\n                    )\n                ),\n        };\n\n        const errorCode = error.code as OTPErrorCode;\n\n        if (errorCode in errorHandlers) {\n            errorHandlers[errorCode]();\n        } else {\n            setPhoneOtpErrorMessage(error.message);\n        }\n    };\n\n    // Usage in useEffect\n    useEffect(() => {\n        if (phone_otp_error) {\n            trackPhoneVerificationEvents({\n                action: 'error',\n                subform_name: 'verify_phone_otp_screen',\n                // @ts-expect-error will remove once solved\n                error_code: phone_otp_error.code,\n            });\n            // @ts-expect-error will remove once solved\n            formatOtpError(phone_otp_error);\n        } else if (email_otp_error) {\n            // @ts-expect-error will remove once solved\n            formatOtpError(email_otp_error);\n        }\n    }, [phone_otp_error, email_otp_error]);\n\n    const sendPhoneOTPVerification = (value: string) => {\n        mutate({ payload: { otp: value } });\n    };\n\n    return {\n        data,\n        sendPhoneOTPVerification,\n        sendEmailOTPVerification,\n        requestOnSMS,\n        requestOnWhatsApp,\n        email_otp_error,\n        phone_otp_error,\n        phone_otp_error_message,\n        setPhoneOtpErrorMessage,\n        show_cool_down_period_modal,\n        setShowCoolDownPeriodModal,\n        is_phone_number_verified,\n        is_email_verified,\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useSendOTPVerificationCode;\n","import { useState } from 'react';\nimport { WS } from '@deriv/shared';\n\ntype TError = { code?: string; name?: string; message: string };\n\nconst useRemovePasskey = ({ onSuccess }: { onSuccess: () => void }) => {\n    const [passkey_removing_error, setPasskeyRemovingError] = useState<TError | null>(null);\n\n    const removePasskey = async (id: number) => {\n        try {\n            const passkeys_revoke_response = await WS.send({\n                passkeys_revoke: 1,\n                id,\n            });\n\n            if (passkeys_revoke_response.passkeys_revoke) {\n                onSuccess();\n            } else if (passkeys_revoke_response.error) {\n                setPasskeyRemovingError(passkeys_revoke_response.error);\n            }\n        } catch (e) {\n            setPasskeyRemovingError(e as TError);\n        }\n    };\n\n    return {\n        removePasskey,\n        passkey_removing_error,\n    };\n};\n\nexport default useRemovePasskey;\n","import { useState } from 'react';\nimport { WS } from '@deriv/shared';\n\ntype TError = { code?: string; name?: string; message: string };\n\nconst useRenamePasskey = ({ onSuccess }: { onSuccess: () => void }) => {\n    const [passkey_renaming_error, setPasskeyRenamingError] = useState<TError | null>(null);\n\n    const renamePasskey = async (passkey_id: number, new_passkey_name = '') => {\n        try {\n            const passkeys_rename_response = await WS.send({\n                passkeys_rename: 1,\n                id: passkey_id,\n                name: new_passkey_name,\n            });\n            if (passkeys_rename_response.passkeys_rename) {\n                onSuccess();\n            } else if (passkeys_rename_response?.error) {\n                setPasskeyRenamingError(passkeys_rename_response?.error);\n            }\n        } catch (e) {\n            setPasskeyRenamingError(e as TError);\n        }\n    };\n\n    return {\n        renamePasskey,\n        passkey_renaming_error,\n    };\n};\n\nexport default useRenamePasskey;\n","import { useStore } from '@deriv/stores';\n\n/**\n * A custom hook to check whether the current account has deposited based on statement from the client store\n * This hook should be used in the component wrapped by observer\n */\nconst useStoreHasAccountDeposited = () => {\n    const { client } = useStore();\n    const { statement } = client;\n\n    const count = statement?.count ?? 0;\n    const transactions = statement?.transactions ?? [];\n    const hasDeposited = transactions.some(tx => tx.action_type === 'deposit');\n    const hasTransferred = transactions.some(tx => tx.action_type === 'transfer' && tx.amount && tx.amount > 0);\n    const isLoaded = statement?.count !== undefined && statement?.transactions !== undefined;\n\n    return { count, transactions, hasDeposited, hasTransferred, isLoaded };\n};\n\nexport default useStoreHasAccountDeposited;\n","import { useStore } from '@deriv/stores';\nimport usePlatformAccounts from './usePlatformAccounts';\n\nconst useRealTotalAssetCurrency = () => {\n    const { client, traders_hub } = useStore();\n    const { current_fiat_currency, is_crypto, currency, default_currency } = client;\n    const { is_eu_user } = traders_hub;\n    const { real: platform_real_accounts } = usePlatformAccounts();\n\n    if (!platform_real_accounts.length) return default_currency;\n\n    const non_crypto_accounts = platform_real_accounts.find(account => !is_crypto(account.currency || 'USD'));\n\n    if (non_crypto_accounts) return non_crypto_accounts?.currency || '';\n\n    const currency_if_is_crypto = is_eu_user\n        ? current_fiat_currency || default_currency\n        : platform_real_accounts[0].currency;\n\n    return is_crypto() ? currency_if_is_crypto : currency;\n};\n\nexport default useRealTotalAssetCurrency;\n","import useRealTotalAssetCurrency from './useTotalAssetCurrency';\nimport { useExchangeRate } from './useExchangeRate';\n/**\n * we can use this hook to get the total balance of the given accounts list.\n * it loops through the accounts list and adds the balance of each account\n * to the total balance, it also converts the balance to the currency of the\n * first account in the list\n */\ntype TUseTotalAccountBalance = {\n    balance?: number;\n    currency?: string;\n    account_type?: string;\n};\n\nconst useTotalAccountBalance = (accounts: TUseTotalAccountBalance[]) => {\n    const total_assets_real_currency = useRealTotalAssetCurrency();\n    const { handleSubscription, getExchangeRate } = useExchangeRate();\n\n    if (!accounts.length) return { balance: 0, currency: total_assets_real_currency };\n\n    const balance = accounts.reduce((total, account) => {\n        const new_base = account?.account_type === 'demo' ? 'USD' : total_assets_real_currency || '';\n        const new_target = account.currency || total_assets_real_currency || '';\n\n        if (new_base !== new_target) handleSubscription(new_base, new_target);\n\n        const new_rate = getExchangeRate(new_base, new_target);\n\n        return total + (account.balance || 0) / new_rate;\n    }, 0);\n\n    return {\n        balance,\n        currency: total_assets_real_currency,\n    };\n};\n\nexport default useTotalAccountBalance;\n","import { useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\nimport { useFetch, useQuery } from '@deriv/api';\nimport useActiveWallet from './useActiveWallet';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport useExistingCFDAccounts from './useExistingCFDAccounts';\nimport useWalletsList from './useWalletsList';\n\ntype TAccount = NonNullable<\n    NonNullable<ReturnType<typeof useQuery<'transfer_between_accounts'>>['data']>['accounts']\n>[number] & { account_category: 'wallet' | 'trading' };\n\nconst useTransferBetweenAccounts = () => {\n    const { ui } = useStore();\n    const { is_dark_mode_on } = ui;\n\n    const active_wallet = useActiveWallet();\n\n    const { data: wallets } = useWalletsList();\n\n    const { getConfig } = useCurrencyConfig();\n\n    const trading_apps_icon = is_dark_mode_on ? 'IcWalletOptionsDark' : 'IcWalletOptionsLight';\n\n    const {\n        data: { dxtrade_accounts, mt5_accounts },\n        isSuccess: is_cfd_accounts_loaded,\n    } = useExistingCFDAccounts();\n\n    const { data, ...rest } = useFetch('transfer_between_accounts', {\n        payload: { accounts: 'all' },\n        options: { enabled: is_cfd_accounts_loaded },\n    });\n\n    const modified_transfer_accounts = useMemo(() => {\n        const all_linked_cfd_accounts = [...dxtrade_accounts, ...mt5_accounts];\n\n        const getAccountType = (is_demo?: number, currency?: string): 'fiat' | 'crypto' | 'demo' => {\n            if (is_demo) return 'demo';\n            return getConfig(currency || '')?.is_crypto ? 'crypto' : 'fiat';\n        };\n\n        const accounts = (data?.accounts as TAccount[])?.map(account => {\n            return {\n                ...account,\n                active_wallet_icon: active_wallet?.icon,\n                balance: parseFloat(\n                    Number(account.balance).toFixed(getConfig(account.currency || '')?.fractional_digits)\n                ),\n                display_currency_code: getConfig(account.currency || '')?.display_code,\n                is_demo: Boolean(account?.demo_account),\n                shortcode: active_wallet?.landing_company_name,\n                type: getAccountType(account.demo_account, account.currency),\n            };\n        });\n\n        return {\n            trading_accounts:\n                accounts?.reduce(\n                    (trading_accounts, account) => {\n                        if (account.account_category === 'wallet') return trading_accounts;\n                        if (!account.loginid) return trading_accounts;\n\n                        const cfd_icon = all_linked_cfd_accounts.find(\n                            cfd_account => account.loginid && cfd_account.loginid?.includes(account.loginid)\n                        )?.transfer_icon;\n\n                        trading_accounts[account.loginid] = {\n                            ...account,\n                            gradient_class: active_wallet?.gradient_card_class,\n                            icon: account.account_category === 'trading' ? trading_apps_icon : cfd_icon,\n                            ...(account.account_type === 'mt5' && {\n                                mt5_market_type: mt5_accounts?.find(\n                                    mt5_account => account.loginid && mt5_account.loginid?.includes(account.loginid)\n                                )?.market_type,\n                            }),\n                        };\n\n                        return trading_accounts;\n                    },\n                    {} as Record<\n                        string,\n                        NonNullable<\n                            typeof accounts[number] & {\n                                gradient_class?: `wallet-card__${string}`;\n                                icon?: string;\n                                mt5_market_type?: 'all' | 'financial' | 'synthetic';\n                            }\n                        >\n                    >\n                ) || {},\n            wallet_accounts:\n                accounts?.reduce(\n                    (wallet_accounts, wallet) => {\n                        if (wallet.account_category !== 'wallet') return wallet_accounts;\n                        if (!wallet.loginid) return wallet_accounts;\n\n                        const available_wallet = wallets?.find(acc => acc.loginid === wallet.loginid);\n\n                        wallet_accounts[wallet.loginid] = {\n                            ...wallet,\n                            icon: available_wallet?.icon,\n                            gradient_class: available_wallet?.gradient_card_class,\n                        };\n\n                        return wallet_accounts;\n                    },\n                    {} as Record<\n                        string,\n                        NonNullable<\n                            typeof accounts[number] & {\n                                gradient_class?: `wallet-card__${string}`;\n                                icon?: string;\n                            }\n                        >\n                    >\n                ) || {},\n        };\n    }, [\n        active_wallet?.gradient_card_class,\n        active_wallet?.icon,\n        active_wallet?.landing_company_name,\n        data?.accounts,\n        dxtrade_accounts,\n        getConfig,\n        mt5_accounts,\n        trading_apps_icon,\n        wallets,\n    ]);\n\n    const modified_active_wallet = useMemo(() => {\n        return active_wallet?.loginid\n            ? {\n                  ...modified_transfer_accounts.wallet_accounts[active_wallet?.loginid],\n              }\n            : undefined;\n    }, [active_wallet?.loginid, modified_transfer_accounts.wallet_accounts]);\n\n    return {\n        ...rest,\n        active_wallet: modified_active_wallet,\n        trading_accounts: modified_transfer_accounts.trading_accounts,\n        wallet_accounts: modified_transfer_accounts.wallet_accounts,\n    };\n};\n\nexport default useTransferBetweenAccounts;\n","import { useCallback, useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\nimport { getWalletCurrencyIcon } from '@deriv/utils';\nimport useActiveWallet from './useActiveWallet';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport usePlatformAccounts from './usePlatformAccounts';\nimport useWalletsList from './useWalletsList';\n\nconst trading_accounts_display_prefixes = {\n    standard: 'Deriv Apps',\n    mt5: 'MT5',\n    dxtrade: 'Deriv X',\n    binary: 'Binary',\n} as const;\n\nconst landing_company_display_shortcodes = {\n    svg: 'SVG',\n    malta: 'Malta',\n} as const;\n\nconst useWalletTransactions = (\n    action_type: '' | 'deposit' | 'withdrawal' | 'initial_fund' | 'reset_balance' | 'transfer'\n) => {\n    const {\n        client: { loginid, landing_company_shortcode: shortcode },\n        ui: { is_dark_mode_on },\n    } = useStore();\n    const { data: wallets } = useWalletsList();\n    const current_wallet = useActiveWallet();\n    let { demo: demo_platform_account } = usePlatformAccounts();\n    const { real: real_platform_accounts } = usePlatformAccounts();\n\n    // TODO remove these mocks when we're to switch to API data\n    demo_platform_account = {\n        account_category: 'trading',\n        account_type: 'standard',\n        currency: 'USD',\n        loginid: 'VRTCMOCK0001',\n        is_virtual: 1,\n        landing_company_shortcode: shortcode as 'svg' | 'maltainvest',\n        token: '',\n    };\n    real_platform_accounts.push({\n        account_category: 'trading',\n        account_type: 'standard',\n        currency: 'USD',\n        loginid: 'CRMOCK0001',\n        is_virtual: 0,\n        landing_company_shortcode: shortcode as 'svg' | 'maltainvest',\n        token: '',\n    });\n    if (wallets && current_wallet)\n        wallets.push({\n            account_type: 'crypto',\n            balance: 0,\n            currency: 'BTC',\n            gradient_header_class: 'wallet-header__btc-bg',\n            gradient_card_class: `wallet-card__btc-bg${is_dark_mode_on ? '--dark' : ''}`,\n            is_demo: !!current_wallet.is_virtual,\n            is_disabled: 0,\n            is_malta_wallet: false,\n            is_selected: false,\n            is_virtual: current_wallet.is_virtual,\n            landing_company_name: 'svg',\n            loginid: 'CRWMOCK00042',\n            currency_config: undefined,\n            icon: 'IcWalletCurrencyBtc',\n            wallet_currency_type: 'BTC',\n        });\n    const accounts = useMemo(\n        () => [demo_platform_account, ...real_platform_accounts],\n        [demo_platform_account, real_platform_accounts]\n    );\n    const { getConfig } = useCurrencyConfig();\n\n    const getTradingAccountName = useCallback(\n        (\n            account_type: 'standard' | 'mt5' | 'dxtrade' | 'binary',\n            is_virtual: boolean,\n            landing_company_shortcode: 'svg' | 'malta'\n        ) => {\n            return `${trading_accounts_display_prefixes[account_type]} ${\n                is_virtual ? 'Demo' : `(${landing_company_display_shortcodes[landing_company_shortcode]})`\n            } account`;\n        },\n        []\n    );\n\n    // TODO remove this mock when we're to switch to API data\n    const mock_transactions = current_wallet?.is_virtual\n        ? [\n              {\n                  action_type: 'transfer',\n                  amount: 5,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'VRTCMOCK0001',\n                  },\n                  app_id: {},\n                  balance_after: 9995,\n                  transaction_id: 17494415484,\n                  transaction_time: 1685942139,\n              },\n              {\n                  action_type: 'reset_balance',\n                  amount: 350,\n                  balance_after: 10000,\n                  transaction_id: 13693003421,\n                  transaction_time: 1685942138,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 200,\n                  from: {\n                      loginid: 'VRTCMOCK0001',\n                  },\n                  to: {\n                      loginid,\n                  },\n                  balance_after: 9650,\n                  transaction_id: 17494415483,\n                  transaction_time: 1685855740,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 550,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'VRTCMOCK0001',\n                  },\n                  app_id: {},\n                  balance_after: 9450,\n                  transaction_id: 17494415482,\n                  transaction_time: 1685855739,\n              },\n              {\n                  action_type: 'initial_fund',\n                  amount: 10000,\n                  balance_after: 10000,\n                  transaction_id: 13693011401,\n                  transaction_time: 1685855738,\n              },\n          ]\n        : [\n              {\n                  action_type: 'transfer',\n                  amount: 5,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'CRMOCK0001',\n                  },\n                  balance_after: 0,\n                  transaction_id: 17494117541,\n                  transaction_time: 1685942138,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 20,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'CRWMOCK00042',\n                  },\n                  balance_after: 5,\n                  transaction_id: 17494415489,\n                  transaction_time: 1685942137,\n              },\n              {\n                  action_type: 'deposit',\n                  amount: 25,\n                  balance_after: 25,\n                  transaction_id: 17494415481,\n                  transaction_time: 1685942136,\n              },\n              {\n                  action_type: 'withdrawal',\n                  amount: 750,\n                  balance_after: 0,\n                  transaction_id: 17494415480,\n                  transaction_time: 1685942135,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 100,\n                  from: {\n                      loginid: 'CRMOCK0001',\n                  },\n                  to: {\n                      loginid,\n                  },\n                  balance_after: 750,\n                  transaction_id: 17494415479,\n                  transaction_time: 1685855738,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 200,\n                  from: {\n                      loginid: 'CRWMOCK00042',\n                  },\n                  to: {\n                      loginid,\n                  },\n                  balance_after: 650,\n                  transaction_id: 17494117541,\n                  transaction_time: 1685855737,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 550,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'CRMOCK0001',\n                  },\n                  balance_after: 450,\n                  transaction_id: 17494117540,\n                  transaction_time: 1685855736,\n              },\n              {\n                  action_type: 'deposit',\n                  amount: 1000,\n                  balance_after: 1000,\n                  transaction_id: 17494117539,\n                  transaction_time: 1685769338,\n              },\n          ];\n\n    // const { isLoading, isSuccess } = useFetch('statement', {\n    //     options: { keepPreviousData: true },\n    //     payload: { action_type: },\n    // });\n\n    // TODO: un-comment this code when we're to switch to API data\n    // const transactions = data?.statement?.transactions?.filter(\n    //     el =>\n    //         !!el.action_type &&\n    //         ['deposit', 'withdrawal', 'initial_fund', 'reset_balance', 'transfer'].includes(el.action_type)\n    // ) as TWalletTransaction[];\n\n    const transactions = useMemo(\n        () => mock_transactions.filter(el => !action_type || el.action_type === action_type),\n        [action_type, mock_transactions]\n    );\n\n    const getTransferAccountName = useCallback(\n        (other_account: Exclude<typeof accounts[number], undefined>) => {\n            if (other_account.account_category === 'wallet') {\n                const wallet = wallets?.find(el => el.loginid === other_account.loginid);\n                return `${wallet?.is_virtual ? 'Demo ' : ''}${wallet?.currency} ${'Wallet'}`;\n            }\n            return getTradingAccountName(\n                other_account.account_type as 'standard' | 'mt5' | 'dxtrade' | 'binary',\n                !!other_account.is_virtual,\n                other_account.landing_company_shortcode as 'svg' | 'malta'\n            );\n        },\n        [getTradingAccountName, wallets]\n    );\n\n    const modified_transactions = useMemo(\n        () =>\n            wallets && current_wallet\n                ? transactions\n                      .map(transaction => {\n                          if (\n                              transaction.amount === undefined ||\n                              transaction.balance_after === undefined ||\n                              transaction.action_type === undefined\n                          )\n                              return null;\n\n                          let account_category = 'wallet';\n                          let account_type = current_wallet.account_type;\n                          let account_name = `${current_wallet.is_virtual ? 'Demo ' : ''}${\n                              current_wallet.currency\n                          } ${'Wallet'}`;\n                          let account_currency = current_wallet.currency;\n                          let gradient_class = current_wallet.gradient_card_class;\n                          let icon = getWalletCurrencyIcon(\n                              current_wallet.is_virtual ? 'demo' : current_wallet.currency || 'USD',\n                              is_dark_mode_on\n                          );\n                          if (transaction.action_type === 'transfer') {\n                              const other_loginid =\n                                  transaction.to?.loginid === loginid\n                                      ? transaction.from?.loginid\n                                      : transaction.to?.loginid;\n                              if (!other_loginid) return null;\n                              const other_account = accounts.find(el => el?.loginid === other_loginid);\n                              if (!other_account?.currency || !other_account?.account_type) return null;\n                              account_category = other_account.account_category || 'wallet';\n                              account_currency = other_account.currency;\n                              account_name = getTransferAccountName(other_account);\n                              account_type = other_account.account_type;\n                              gradient_class = `wallet-card__${\n                                  other_account.is_virtual === 1 ? 'demo' : other_account?.currency?.toLowerCase()\n                              }-bg${is_dark_mode_on ? '--dark' : ''}`;\n                              icon = getWalletCurrencyIcon(\n                                  other_account.is_virtual ? 'demo' : other_account.currency || '',\n                                  is_dark_mode_on,\n                                  false\n                              );\n                          }\n                          const currency_config = getConfig(account_currency || '');\n                          const is_crypto = currency_config?.is_crypto;\n                          const icon_type = is_crypto || current_wallet.is_virtual ? 'crypto' : 'fiat';\n\n                          return {\n                              ...transaction,\n                              account_category,\n                              account_currency,\n                              account_name,\n                              account_type,\n                              gradient_class,\n                              icon,\n                              icon_type,\n                          };\n                      })\n                      .filter(<T>(value: T | null): value is T => value !== null)\n                : [],\n        [accounts, current_wallet, getConfig, getTransferAccountName, is_dark_mode_on, loginid, transactions, wallets]\n    );\n\n    return { transactions: modified_transactions, isLoading: false, isSuccess: true };\n};\n\nexport default useWalletTransactions;\n","import { useMemo, useState, useEffect } from 'react';\nimport useTransferBetweenAccounts from './useTransferBetweenAccounts';\n\nconst useWalletTransfer = () => {\n    const {\n        active_wallet,\n        trading_accounts,\n        wallet_accounts,\n        isLoading: is_accounts_loading,\n    } = useTransferBetweenAccounts();\n\n    const [from_account, setFromAccount] = useState<typeof active_wallet>();\n    const [to_account, setToAccount] = useState<typeof active_wallet>();\n\n    const to_account_list = useMemo(() => {\n        if (!from_account?.loginid) return { trading_accounts: {}, wallet_accounts: {} };\n        if (!active_wallet?.loginid) return { trading_accounts: {}, wallet_accounts: {} };\n\n        if (from_account?.loginid === active_wallet?.loginid) {\n            return {\n                trading_accounts,\n                wallet_accounts: Object.fromEntries(\n                    Object.entries(wallet_accounts).filter(\n                        ([key]) => active_wallet?.loginid && !key.includes(active_wallet?.loginid)\n                    )\n                ),\n            };\n        }\n        return { trading_accounts: {}, wallet_accounts: { [active_wallet?.loginid]: active_wallet } };\n    }, [active_wallet, from_account?.loginid, trading_accounts, wallet_accounts]);\n\n    //this useEffect populates from/to accounts with updated values, if they were updated in the background\n    useEffect(() => {\n        setFromAccount(acc => {\n            return acc?.loginid ? { ...trading_accounts, ...wallet_accounts }[acc?.loginid] : undefined;\n        });\n        setToAccount(acc => {\n            return acc?.loginid ? { ...trading_accounts, ...wallet_accounts }[acc?.loginid] : undefined;\n        });\n    }, [setFromAccount, setToAccount, trading_accounts, wallet_accounts]);\n\n    return {\n        active_wallet,\n        is_accounts_loading,\n        from_account,\n        to_account,\n        to_account_list,\n        transfer_accounts: { trading_accounts, wallet_accounts },\n        setFromAccount,\n        setToAccount,\n    };\n};\n\nexport default useWalletTransfer;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { MT5_ACCOUNT_STATUS } from '@deriv/shared';\n\nconst getStatusBadge = (status: string) => {\n    if (status === 'proof_failed') {\n        return MT5_ACCOUNT_STATUS.FAILED;\n    } else if (status === 'verification_pending') {\n        return MT5_ACCOUNT_STATUS.PENDING;\n    } else if (status === 'needs_verification') {\n        return MT5_ACCOUNT_STATUS.NEEDS_VERIFICATION;\n    }\n};\n\n/**\n * Custom React hook to check if the selected MT5 account has been created.\n *\n * @returns {Object} An object containing the following properties:\n *\n * - `is_selected_MT5_account_created` (boolean): Indicates whether the selected MT5 account has been created.\n * - `existing_account` (Object | null): If the selected account is created, contains the MT5 account details; otherwise `null`.\n * - `existing_account_status` (string | null): Status of the created account (e.g., 'failed', 'pending', 'needs_verification'), or `null` if no account is created.\n * - `available_account_to_create` (Object | null): The account available to create for the selected product. Will be `null` if an account is already created.\n */\n\nconst useIsSelectedMT5AccountCreated = () => {\n    const {\n        client,\n        modules: { cfd },\n        traders_hub: { selected_account_type },\n    } = useStore();\n    const { mt5_login_list, trading_platform_available_accounts, updateMT5AccountDetails } = client;\n\n    React.useEffect(() => {\n        async function fetchData() {\n            await updateMT5AccountDetails();\n        }\n        fetchData();\n    }, [updateMT5AccountDetails]);\n\n    const { jurisdiction_selected_shortcode, product } = cfd;\n    const created_account = mt5_login_list.filter(\n        account =>\n            account.landing_company_short === jurisdiction_selected_shortcode &&\n            account.product === product &&\n            account.account_type === selected_account_type\n    );\n    const selected_account = trading_platform_available_accounts.filter(\n        account =>\n            account.shortcode === jurisdiction_selected_shortcode &&\n            account.product === product &&\n            account.is_default_jurisdiction === 'true'\n    );\n\n    const is_selected_MT5_account_created = created_account && Object.keys(created_account).length > 0;\n\n    const existing_account = is_selected_MT5_account_created ? created_account[0] : null;\n    const existing_account_status = existing_account?.status ? getStatusBadge(existing_account?.status) : null;\n    const available_account_to_create = !is_selected_MT5_account_created ? selected_account[0] : null;\n    return {\n        is_selected_MT5_account_created,\n        existing_account,\n        existing_account_status,\n        available_account_to_create,\n    };\n};\n\nexport default useIsSelectedMT5AccountCreated;\n","import { useStore } from '@deriv/stores';\nimport useGetMFAccountStatus from './useGetMFAccountStatus';\nimport useIsSelectedMT5AccountCreated from './useIsSelectedMT5AccountCreated';\nimport { CFD_PLATFORMS } from '@deriv/shared';\n\n/** A custom hook to fetch the status badge value and client_kyc_status for MF account and MT5 account \nMF account status is fetched from useGetMFAccountStatus\nMT5 account status is fetched from useIsSelectedMT5AccountCreated\n*/\nconst useGetStatus = () => {\n    const { common } = useStore();\n    const { mf_account_status, kyc_status } = useGetMFAccountStatus();\n    const { is_selected_MT5_account_created, existing_account_status, existing_account, available_account_to_create } =\n        useIsSelectedMT5AccountCreated();\n    const { platform } = common;\n\n    if (platform === CFD_PLATFORMS.MT5) {\n        return {\n            status_badge: existing_account_status,\n            client_kyc_status: is_selected_MT5_account_created\n                ? existing_account?.client_kyc_status\n                : available_account_to_create?.client_kyc_status,\n        };\n    }\n    return {\n        status_badge: mf_account_status,\n        client_kyc_status: kyc_status,\n    };\n};\n\nexport default useGetStatus;\n","import { useStore } from '@deriv/stores';\n\nconst useIsPhoneNumberVerified = () => {\n    const { client } = useStore();\n    const { account_settings } = client;\n    const { phone_number_verification } = account_settings;\n    const is_phone_number_verified = !!phone_number_verification?.verified;\n\n    return {\n        is_phone_number_verified,\n    };\n};\n\nexport default useIsPhoneNumberVerified;\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport { useIsMounted, WS } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport useIsPhoneNumberVerified from './useIsPhoneNumberVerified';\n\n/** A hook for calculating email verification otp and phone number otp timer */\nconst usePhoneNumberVerificationSetTimer = (is_from_request_phone_number_otp = false) => {\n    const { client, ui } = useStore();\n    const { account_settings } = client;\n    const { should_show_phone_number_otp } = ui;\n    const { phone_number_verification } = account_settings;\n    const [next_email_otp_request_timer, setNextEmailOtpRequestTimer] = React.useState<number | undefined>();\n    const [next_phone_otp_request_timer, setNextPhoneOtpRequestTimer] = React.useState<number | undefined>();\n    const [is_request_button_disabled, setIsRequestButtonDisabled] = React.useState(false);\n    const { is_phone_number_verified } = useIsPhoneNumberVerified();\n    const isMounted = useIsMounted();\n\n    React.useEffect(() => {\n        if (!is_phone_number_verified) {\n            if (isMounted()) setIsRequestButtonDisabled(true);\n            WS.send({ time: 1 }).then((response: { error?: Error; time: number }) => {\n                if (isMounted()) setIsRequestButtonDisabled(false);\n                if (response.error) return;\n\n                if (\n                    response.time &&\n                    !should_show_phone_number_otp &&\n                    !is_from_request_phone_number_otp &&\n                    phone_number_verification?.next_email_attempt\n                ) {\n                    const request_in_milliseconds = dayjs(phone_number_verification.next_email_attempt * 1000);\n                    const next_request = Math.round(request_in_milliseconds.diff(response.time * 1000) / 1000);\n\n                    if (isMounted())\n                        if (next_request > 0) {\n                            setNextEmailOtpRequestTimer(next_request);\n                        } else {\n                            setNextEmailOtpRequestTimer(0);\n                        }\n                } else if (response.time && phone_number_verification?.next_attempt) {\n                    const request_in_milliseconds = dayjs(phone_number_verification.next_attempt * 1000);\n                    const next_request = Math.round(request_in_milliseconds.diff(response.time * 1000) / 1000);\n\n                    if (isMounted())\n                        if (next_request > 0) {\n                            setNextPhoneOtpRequestTimer(next_request);\n                        } else {\n                            setNextPhoneOtpRequestTimer(0);\n                        }\n                }\n            });\n        }\n    }, [\n        is_phone_number_verified,\n        phone_number_verification?.next_email_attempt,\n        phone_number_verification?.next_attempt,\n        is_from_request_phone_number_otp,\n        should_show_phone_number_otp,\n    ]);\n\n    React.useEffect(() => {\n        let countdown: ReturnType<typeof setInterval>;\n        if (next_email_otp_request_timer && next_email_otp_request_timer > 0) {\n            countdown = setInterval(() => {\n                setNextEmailOtpRequestTimer(next_email_otp_request_timer - 1);\n            }, 1000);\n        }\n\n        return () => clearInterval(countdown);\n    }, [next_email_otp_request_timer]);\n\n    React.useEffect(() => {\n        let countdown: ReturnType<typeof setInterval>;\n        if (next_phone_otp_request_timer && next_phone_otp_request_timer > 0) {\n            countdown = setInterval(() => {\n                setNextPhoneOtpRequestTimer(next_phone_otp_request_timer - 1);\n            }, 1000);\n        }\n\n        return () => clearInterval(countdown);\n    }, [next_phone_otp_request_timer]);\n\n    return {\n        is_email_otp_timer_loading: typeof next_email_otp_request_timer !== 'number',\n        setNextEmailOtpRequestTimer,\n        setNextPhoneOtpRequestTimer,\n        is_phone_otp_timer_loading: typeof next_phone_otp_request_timer !== 'number',\n        next_email_otp_request_timer,\n        next_phone_otp_request_timer,\n        is_request_button_disabled,\n    };\n};\n\nexport default usePhoneNumberVerificationSetTimer;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useIsMounted, WS } from '@deriv/shared';\nimport dayjs from 'dayjs';\nimport useSettings from './useSettings';\n\nconst usePhoneNumberVerificationSessionTimer = () => {\n    const [session_timer, setSessionTimer] = useState<number | undefined>();\n    const [formatted_time, setFormattedTime] = useState('00:00');\n    const [should_show_session_timeout_modal, setShouldShowSessionTimeoutModal] = useState(false);\n    const { data: account_settings } = useSettings();\n    const isMounted = useIsMounted();\n\n    const formatTime = useCallback((totalSeconds: number) => {\n        if (totalSeconds <= 0) {\n            return setFormattedTime('00:00');\n        }\n\n        const minutes = Math.floor((totalSeconds % 3600) / 60);\n        const seconds = totalSeconds % 60;\n        const formatted_minutes = String(minutes).padStart(2, '0');\n        const formatted_seconds = String(seconds).padStart(2, '0');\n\n        setFormattedTime(`${formatted_minutes}:${formatted_seconds}`);\n    }, []);\n\n    useEffect(() => {\n        WS.send({ time: 1 }).then((response: { error?: Error; time: number }) => {\n            if (response.error) return;\n\n            //@ts-expect-error will remove this once GetSettings is updated\n            if (response.time && account_settings?.phone_number_verification?.session_timestamp) {\n                // request_in_miliseconds is to convert session_timestamp from get_settings * it with 1000 to make it into miliseconds and convert the time using dayjs package\n                const request_in_milliseconds = dayjs(\n                    //@ts-expect-error will remove this once GetSettings is updated\n                    account_settings?.phone_number_verification?.session_timestamp * 1000\n                );\n                // next_request is to compare request_in_miliseconds with server's response time\n                const next_request = Math.round(request_in_milliseconds.diff(response.time * 1000) / 1000);\n\n                if (isMounted()) {\n                    if (next_request >= 0) {\n                        setSessionTimer(next_request);\n                    }\n                }\n            }\n        });\n        //@ts-expect-error will remove this once GetSettings is updated\n    }, [account_settings?.phone_number_verification?.session_timestamp]);\n\n    useEffect(() => {\n        let countdown: ReturnType<typeof setInterval>;\n        if (typeof session_timer === 'number') {\n            formatTime(session_timer);\n            if (session_timer > 0) {\n                setShouldShowSessionTimeoutModal(false);\n                countdown = setInterval(() => {\n                    setSessionTimer(session_timer - 1);\n                }, 1000);\n            } else {\n                setShouldShowSessionTimeoutModal(true);\n            }\n        }\n        return () => clearInterval(countdown);\n    }, [session_timer, formatTime]);\n\n    return {\n        formatted_time,\n        should_show_session_timeout_modal,\n        setSessionTimer,\n        setShouldShowSessionTimeoutModal,\n    };\n};\n\nexport default usePhoneNumberVerificationSessionTimer;\n","import { useState, useEffect } from 'react';\nimport { WS } from '@deriv/shared';\n\nexport type TradingPlatformStatus = {\n    platform: 'mt5' | 'dxtrade' | 'ctrader';\n    status: 'active' | 'maintenance' | 'unavailable';\n};\n\n/** A custom hook that gets the list of statuses of ctrader dxtrade mt5 platform. */\nconst useTradingPlatformStatus = () => {\n    const [data, setData] = useState<TradingPlatformStatus[] | null>(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await WS.send({ trading_platform_status: 1 });\n            setData(response.trading_platform_status);\n        };\n\n        fetchData();\n    }, []);\n\n    const getPlatformStatus = (platform: TradingPlatformStatus['platform']) =>\n        data?.find(status => status.platform === platform)?.status;\n\n    return { data, getPlatformStatus };\n};\n\nexport default useTradingPlatformStatus;\n","import { getWithdrawalInfoMessage, getWithdrawalTitle } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\n\nconst useGetWithdrawalLimitsDetails = () => {\n    const { client } = useStore();\n    const { account_limits } = client;\n\n    const withdrawalTypes = [\n        'lifetime_limit',\n        'num_of_days_limit',\n        'withdrawal_since_inception_monetary',\n        'withdrawal_for_x_days_monetary',\n        'remainder',\n    ] as const;\n\n    const withdrawal_limit_details = withdrawalTypes\n        .map(type => ({\n            withdrawal_title: getWithdrawalTitle(type, account_limits.num_of_days),\n            withdrawal_info_message: getWithdrawalInfoMessage(type),\n            withdrawal_amount: account_limits[type],\n        }))\n        .filter(detail => detail.withdrawal_amount !== 99999999);\n\n    return { withdrawal_limit_details };\n};\n\nexport default useGetWithdrawalLimitsDetails;\n","import { routes } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\n\nimport useIsHubRedirectionEnabled from './useIsHubRedirectionEnabled';\n\n// Define allowed redirect destinations as a type-safe enum\nexport type RedirectDestination = 'home' | 'account-limits';\n\nexport const useAccountSettingsRedirect = (redirect_to: RedirectDestination = 'home') => {\n    const { client } = useStore();\n    const { has_wallet } = client;\n    const { isHubRedirectionEnabled } = useIsHubRedirectionEnabled();\n    const search_params = new URLSearchParams(window.location.search);\n    const account_type = search_params.get('account');\n\n    let redirect_url, mobile_redirect_url;\n\n    // Determine if we should use the new hub endpoints\n    const should_use_hub = has_wallet && isHubRedirectionEnabled;\n\n    if (should_use_hub) {\n        const base_url =\n            process.env.NODE_ENV === 'production' ? 'https://hub.deriv.com' : 'https://staging-hub.deriv.com';\n\n        redirect_url = `${base_url}/accounts/redirect?action=redirect_to&redirect_to=${redirect_to}&account=${account_type}`;\n        mobile_redirect_url = `${base_url}/accounts/redirect?action=redirect_to&redirect_to=${redirect_to}&account=${account_type}`;\n    } else {\n        // Map redirect_to values to specific routes when not using hub redirection\n        switch (redirect_to) {\n            case 'account-limits':\n                redirect_url = routes.account_limits;\n                break;\n            case 'home':\n            default:\n                redirect_url = routes.personal_details;\n                break;\n        }\n        mobile_redirect_url = routes.account;\n    }\n\n    return { redirect_url, mobile_redirect_url };\n};\n\nexport default useAccountSettingsRedirect;\n","import { useStore } from '@deriv/stores';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\n\nconst useAccountTransferVisible = () => {\n    const { client } = useStore();\n    const { landing_company_shortcode, residence } = client;\n    const has_malta_invest_account = useHasMaltaInvestAccount();\n    const is_account_transfer_visible =\n        residence !== 'im' && (landing_company_shortcode !== 'malta' || has_malta_invest_account);\n\n    return is_account_transfer_visible;\n};\n\nexport default useAccountTransferVisible;\n","import { useMemo } from 'react';\n\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\n/** A custom hook that authorize the user with the given token. If no token is given, it will use the current token. */\nconst useAuthorize = (token?: string) => {\n    const { client } = useStore();\n    const { accounts, loginid = '' } = client;\n    const current_token = accounts[loginid || '']?.token;\n\n    const { data, ...rest } = useFetch('authorize', {\n        payload: { authorize: token ?? current_token },\n        options: { enabled: Boolean(token ?? current_token), refetchOnWindowFocus: false },\n    });\n\n    // Add additional information to the authorize response.\n    const modified_authorize = useMemo(() => ({ ...data?.authorize }), [data?.authorize]);\n\n    return {\n        /** The authorize response. */\n        data: modified_authorize,\n        ...rest,\n    };\n};\n\nexport default useAuthorize;\n","import { useEffect, useState } from 'react';\n\nconst ONE_SECOND = 1000;\n\nexport type TCountdownOptions = {\n    from: number;\n    to?: number;\n    increment?: boolean;\n};\n\nconst useCountdown = ({ from, to = 0, increment = false }: TCountdownOptions) => {\n    const [count, setCount] = useState(from);\n    const [is_running, setIsRunning] = useState(false);\n\n    useEffect(() => {\n        let timer: NodeJS.Timeout;\n\n        if (is_running) {\n            timer = setTimeout(() => {\n                if (count === to) {\n                    pause();\n                } else {\n                    setCount(old => (increment ? old + 1 : old - 1));\n                }\n            }, ONE_SECOND);\n        }\n\n        return () => clearTimeout(timer);\n    }, [count, is_running, to, increment]);\n\n    const start = () => setIsRunning(true);\n\n    const pause = () => setIsRunning(false);\n\n    const reset = () => setCount(from);\n\n    const stop = () => {\n        pause();\n        reset();\n    };\n\n    return {\n        count,\n        is_running,\n        start,\n        pause,\n        reset,\n        stop,\n    };\n};\n\nexport default useCountdown;\n","import { useQuery } from '@deriv/api';\n\nconst useCryptoConfig = (currency: string) => {\n    const { data, ...rest } = useQuery('crypto_config', { payload: { currency_code: currency } });\n\n    const cryptoConfig = data?.crypto_config?.currencies_config[currency];\n\n    return {\n        /** Available cryptocurrencies config for authorized account*/\n        data: cryptoConfig,\n        ...rest,\n    };\n};\n\nexport default useCryptoConfig;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSubscription } from '@deriv/api';\n\ntype TTransaction = NonNullable<\n    NonNullable<ReturnType<typeof useSubscription<'cashier_payments'>>['data']>['cashier_payments']\n>['crypto'][number];\n\ntype TStatus = TTransaction['status_code'];\n\ntype TDepositStatus = 'PENDING' | 'CONFIRMED' | 'ERROR';\n\ntype TWithdrawalStatus = Exclude<TStatus, TDepositStatus>;\n\n// Since BE sends the `status_code` for both `deposit` and `withdrawal` in the same field,\n// Here we modify the BE type to make `status_code` type more specific to the `transaction_type` field.\nexport type TModifiedTransaction = Omit<TTransaction, 'status_code' | 'transaction_type'> &\n    (\n        | { transaction_type: 'deposit'; status_code: TDepositStatus }\n        | { transaction_type: 'withdrawal'; status_code: TWithdrawalStatus }\n    );\n\n/** A custom hook that returns the list of pending crypto transactions for the current user. */\nconst useCryptoTransactions = (allowToMakeSubscription = true) => {\n    const { subscribe, data, ...rest } = useSubscription('cashier_payments');\n    const [transactions, setTransactions] = useState<TModifiedTransaction[]>();\n\n    useEffect(() => {\n        allowToMakeSubscription && subscribe();\n    }, [subscribe, allowToMakeSubscription]);\n\n    useEffect(() => {\n        setTransactions(old_transactions => {\n            // Get the list of the crypto transactions.\n            const new_transactions = data?.cashier_payments?.crypto as TModifiedTransaction[] | undefined;\n\n            // If there are no new transactions, return the old transactions.\n            if (!new_transactions) return old_transactions;\n\n            // If there are no old transactions, return the new transactions.\n            if (!old_transactions) return new_transactions;\n\n            // Make a copy of the old transactions.\n            const updated_transactions = [...old_transactions];\n\n            // For each new transaction, check if it exists in the old transactions.\n            new_transactions.forEach(new_transaction => {\n                // Find the index of the new transaction in the old transactions if exists.\n                const index = updated_transactions.findIndex(\n                    old_transaction => old_transaction.id === new_transaction.id\n                );\n\n                // If the new transaction does not exist in the old transactions, add it, otherwise update it.\n                if (index === -1) {\n                    updated_transactions.push(new_transaction);\n                } else {\n                    updated_transactions[index] = new_transaction;\n                }\n            });\n\n            // Return the updated transactions.\n            return updated_transactions;\n        });\n    }, [data?.cashier_payments?.crypto]);\n\n    // Add additional information to each transaction.\n    const modified_transactions = useMemo(\n        () =>\n            transactions?.map(transaction => ({\n                ...transaction,\n                /** Determine if the transaction is a deposit or not. */\n                is_deposit: transaction.transaction_type === 'deposit',\n                /** Determine if the transaction is a withdrawal or not. */\n                is_withdrawal: transaction.transaction_type === 'withdrawal',\n            })),\n        [transactions]\n    );\n\n    // Sort transactions by submit time.\n    const sorted_transactions = useMemo(\n        () => modified_transactions?.sort((a, b) => b.submit_date - a.submit_date),\n        [modified_transactions]\n    );\n\n    // Determine if the user has any transactions or not.\n    const has_transactions = modified_transactions && modified_transactions.length > 0;\n\n    // Get the last transaction if exists.\n    const last_transaction = modified_transactions?.[0];\n\n    return {\n        /** List of user transactions sorted by submit time. */\n        data: sorted_transactions,\n        /** Returns the last transaction if exists. */\n        last_transaction,\n        /** Determine is the user has any transactions or not. */\n        has_transactions,\n        subscribe,\n        ...rest,\n    };\n};\n\nexport default useCryptoTransactions;\n","import { useCallback, useMemo } from 'react';\nimport { useFetch } from '@deriv/api';\n\ntype TPlatform = {\n    cashier: ('doughflow' | 'crypto')[];\n    ramp: string[] | [];\n};\n\n/** @deprecated Use `useCurrencyConfig` from `@deriv/api` package instead. */\nconst useCurrencyConfig = () => {\n    const { data: website_status_data, ...rest } = useFetch('website_status');\n\n    const currencies_config = useMemo(() => {\n        if (!website_status_data?.website_status?.currencies_config) return undefined;\n\n        const website_status_currencies_config = website_status_data.website_status.currencies_config;\n\n        const modified_currencies_config = Object.keys(website_status_currencies_config).map(currency => {\n            const currency_config = website_status_currencies_config[currency];\n\n            return {\n                ...currency_config,\n                /** determine if the currency is a `crypto` currency */\n                is_crypto: currency_config?.type === 'crypto',\n                /** determine if the currency is a `fiat` currency */\n                is_fiat: currency_config?.type === 'fiat',\n                /** determine if the currency is `Australian Dollar` */\n                is_AUD: currency === 'AUD',\n                /** determine if the currency is `US Dollar` */\n                is_USD: currency === 'USD',\n                /** determine if the currency is `Euro` */\n                is_EUR: currency === 'EUR',\n                /** determine if the currency is `Pound Sterling` */\n                is_GBP: currency === 'GBP',\n                /** determine if the currency is `Bitcoin` */\n                is_BTC: currency === 'BTC',\n                /** determine if the currency is `Ethereum` */\n                is_ETH: currency === 'ETH',\n                /** determine if the currency is `Litecoin` */\n                is_LTC: currency === 'LTC',\n                /** determine if the currency is `Multi-Collateral DAI` */\n                is_DAI: currency === 'DAI',\n                /** determine if the currency is `IDK` */\n                is_IDK: currency === 'IDK',\n                /** determine if the currency is `Paxos Standard` */\n                is_PAX: currency === 'PAX',\n                /** determine if the currency is `Binary Coin` */\n                is_USB: currency === 'USB',\n                /** determine if the currency is `Tether Omni` */\n                is_USDT: currency === 'UST',\n                /** determine if the currency is `True USD` */\n                is_TUSD: currency === 'TUSD',\n                /** determine if the currency is `Binance USD` */\n                is_BUSD: currency === 'BUSD',\n                /** determine if the currency is `STATIS Euro` */\n                is_EURS: currency === 'EURS',\n                /** determine if the currency is `Tether ERC20` */\n                is_eUSDT: currency === 'eUSDT',\n                /** determine if the currency is `Tether TRC20` */\n                is_tUSDT: currency === 'tUSDT',\n                /** determine if the currency is `USD Coin` */\n                is_USDC: currency === 'USDC',\n                /** determine if the currency is `USDK` */\n                is_USDK: currency === 'USDK',\n                /** Currency code */\n                code: currency,\n                /** Currency display code */\n                display_code: currency === 'UST' ? 'USDT' : currency,\n                /** Local asset name for the currency icon. ex: `IcCurrencyUsd` for `USD` */\n                icon: `IcCurrency${currency[0].toUpperCase() + currency.slice(1).toLowerCase()}`,\n                /** Platforms with providers */\n                //TODO: Remove `as TPlatform` after updating `@deriv/api-types` library\n                //@ts-expect-error need to update `@deriv/api-types` library to the latest version\n                platform: currency_config?.platform as TPlatform,\n            };\n        });\n\n        return modified_currencies_config.reduce<Record<string, typeof modified_currencies_config[number]>>(\n            (previous, current) => ({ ...previous, [current.code]: current }),\n            {}\n        );\n    }, [website_status_data?.website_status?.currencies_config]);\n\n    const getConfig = useCallback((currency: string) => currencies_config?.[currency], [currencies_config]);\n\n    return {\n        /** Returns the currency config object for the given currency */\n        getConfig,\n        /** Available currencies and their information */\n        currencies_config,\n        ...rest,\n    };\n};\n\nexport default useCurrencyConfig;\n","import { useStore } from '@deriv/stores';\nimport useCurrencyConfig from './useCurrencyConfig';\n\n/** A custom hook to get the currency config information for the user's current currency. */\nconst useCurrentCurrencyConfig = () => {\n    const { client } = useStore();\n    const { currency } = client;\n    const { getConfig } = useCurrencyConfig();\n    const currency_config = getConfig(currency);\n\n    // Safe to do null assertion here because the user's currency is always\n    // available in the currency config object so it can't be null.\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return currency_config!;\n};\n\nexport default useCurrentCurrencyConfig;\n","import { useCallback, useEffect } from 'react';\nimport { useRequest } from '@deriv/api';\n\nconst useDepositCryptoAddress = () => {\n    const { data, mutate, ...rest } = useRequest('cashier');\n    const deposit_address = typeof data?.cashier !== 'string' ? data?.cashier?.deposit?.address : undefined;\n\n    const send = useCallback(\n        () => mutate({ payload: { cashier: 'deposit', provider: 'crypto', type: 'api' } }),\n        [mutate]\n    );\n\n    useEffect(() => {\n        send();\n    }, [send]);\n\n    return {\n        ...rest,\n        resend: send,\n        data: deposit_address,\n    };\n};\n\nexport default useDepositCryptoAddress;\n","import { useCallback, useEffect } from 'react';\n\nimport { useRequest } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst useDepositFiatAddress = () => {\n    const { common, ui } = useStore();\n    const { current_language } = common;\n    const { is_dark_mode_on } = ui;\n    const { data, mutate, ...rest } = useRequest('cashier');\n    const dark_mode = is_dark_mode_on ? 'on' : 'off';\n\n    let deposit_iframe_url;\n    if (typeof data?.cashier === 'string') {\n        const cashierUrl = new URL(data.cashier);\n        cashierUrl.searchParams.set('DarkMode', dark_mode);\n        deposit_iframe_url = cashierUrl.toString();\n    }\n\n    const send = useCallback(() => mutate({ payload: { cashier: 'deposit', provider: 'doughflow' } }), [mutate]);\n\n    useEffect(() => {\n        send();\n    }, [send, current_language]);\n\n    return {\n        ...rest,\n        resend: send,\n        data: deposit_iframe_url,\n    };\n};\n\nexport default useDepositFiatAddress;\n","import DocumentUploader from '@binary-com/binary-document-uploader';\nimport { useMutation } from '@deriv/api';\nimport { WS, compressImageFiles, readFiles } from '@deriv/shared';\nimport { useCallback, useMemo, useState } from 'react';\n\ntype TSettingsPayload = Partial<Parameters<ReturnType<typeof useMutation<'document_upload'>>['mutate']>[0]['payload']>;\n\ntype TFile =\n    | Partial<\n          TSettingsPayload & {\n              filename: File['name'];\n              buffer: FileReader['result'];\n              documentFormat: string;\n              file_size: File['size'];\n          }\n      >\n    | {\n          message: string;\n      };\n\ntype TUploaderResponse = {\n    [key: string]: unknown;\n    message?: string;\n    warning?: string;\n};\nconst fileReadErrorMessage = (filename: string) => {\n    return `Unable to read file ${filename}`;\n};\n\n/**\n * Custom hook to handle file uploading with the binary-document-uploader package\n */\nconst useFileUploader = () => {\n    const [error, setError] = useState<unknown>(null);\n    const uploader_instance = useMemo(() => new DocumentUploader({ connection: WS.getSocket() }), []);\n\n    const upload = useCallback(\n        async (files: File[], settings?: TSettingsPayload, onError?: () => void) => {\n            if (!files?.length) return Promise.reject(new Error('No files selected'));\n\n            return new Promise<{\n                message?: string;\n                warning?: string;\n                [key: string]: unknown;\n            }>((resolve, reject) => {\n                let is_any_file_error = false;\n                let file_error: string | null = null;\n\n                (async () => {\n                    try {\n                        const compressed_files: Blob[] = await compressImageFiles(files);\n                        const processed_files: TFile[] = await readFiles(\n                            compressed_files,\n                            fileReadErrorMessage,\n                            settings ?? {}\n                        );\n                        processed_files.forEach(file => {\n                            if (file && 'message' in file) {\n                                is_any_file_error = true;\n                                file_error = file.message;\n                                reject(file.message);\n                            }\n                        });\n                        if (is_any_file_error || !processed_files.length) {\n                            onError?.();\n                            return reject(new Error(file_error ?? 'Something went wrong!')); // don't start submitting files until all front-end validation checks pass\n                        }\n\n                        // send files\n                        const response: TUploaderResponse = await uploader_instance.upload(processed_files[0]);\n                        resolve(response);\n                    } catch (error: unknown) {\n                        setError(error);\n                        reject(error);\n                    }\n                })();\n            });\n        },\n        [uploader_instance]\n    );\n\n    return {\n        /**\n         * Error message from the file uploader\n         */\n        error,\n        /**\n         * Uploads a file to the server with the binary-document-uploader package after compressing and reading the file with meta data\n         */\n        upload,\n        /**\n         * Instance of the binary-document-uploader\n         */\n        uploader_instance,\n    };\n};\n\nexport default useFileUploader;\n","import { useEffect } from 'react';\n\nimport { ACCOUNT_BADGE_STATUS, routes } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\n\nconst useGetMFAccountStatus = () => {\n    const { client } = useStore();\n    const { account_status, is_logged_in, updateAccountStatus } = client || {};\n\n    useEffect(() => {\n        async function fetchData() {\n            if (is_logged_in && (!account_status || !window.location.pathname.startsWith(routes.trade)))\n                await updateAccountStatus();\n        }\n        fetchData();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const authentication = account_status?.authentication;\n    const poi_status = authentication?.identity?.status;\n    const onfido_status = authentication?.identity?.services?.onfido?.status;\n    const manual_status = authentication?.identity?.services?.manual?.status;\n    const poa_status = authentication?.document?.status;\n\n    const STATUS = {\n        NONE: 'none',\n        VERIFIED: 'verified',\n        PENDING: 'pending',\n        REJECTED: 'rejected',\n        EXPIRED: 'expired',\n        SUSPECTED: 'suspected',\n    } as const;\n    const failed_cases = [STATUS.REJECTED, STATUS.EXPIRED, STATUS.SUSPECTED];\n\n    //@ts-expect-error we can ignore this error since we are checking the status and returning true or false\n    const need_poa_resubmission = poa_status && failed_cases.includes(poa_status);\n    const poa_pending = poa_status === STATUS.PENDING;\n    const poa_not_submitted = poa_status === STATUS.NONE;\n\n    const poi_verified_by_onfido_or_manual = [onfido_status, manual_status].includes(STATUS.VERIFIED);\n    const poi_pending_by_onfido_or_manual =\n        [onfido_status, manual_status].includes(STATUS.PENDING) && !poi_verified_by_onfido_or_manual;\n\n    const poi_not_submitted_by_onfido_or_manual = [onfido_status, manual_status].every(\n        status => status === STATUS.NONE\n    );\n    const need_poi_submission = !poi_pending_by_onfido_or_manual && !poi_verified_by_onfido_or_manual;\n\n    const need_poi_resubmission = !poi_not_submitted_by_onfido_or_manual && need_poi_submission;\n    const is_verified = poi_status === STATUS.VERIFIED && poa_status === STATUS.VERIFIED;\n\n    const getMFAccountStatus = () => {\n        if (poa_status && onfido_status && manual_status) {\n            if (need_poi_resubmission || need_poa_resubmission) {\n                return ACCOUNT_BADGE_STATUS.FAILED;\n            } else if (poi_not_submitted_by_onfido_or_manual || poa_not_submitted) {\n                return ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION;\n            } else if (poi_pending_by_onfido_or_manual || poa_pending) {\n                return ACCOUNT_BADGE_STATUS.PENDING;\n            }\n            return null;\n        }\n        return null;\n    };\n    const getVerificationStatus = () => (!is_verified ? { poi_status, poa_status, valid_tin: 1, required_tin: 1 } : {});\n\n    return {\n        mf_account_status: getMFAccountStatus(),\n        kyc_status: getVerificationStatus(),\n    };\n};\n\nexport default useGetMFAccountStatus;\n","import { useCallback, useMemo } from 'react';\n\nimport { useQuery } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst useGetPhoneNumberList = () => {\n    const { client } = useStore();\n    const {\n        account_settings,\n        website_status: { clients_country },\n        is_authorize,\n    } = client;\n    const {\n        data,\n        isLoading: isPhoneSettingLoading,\n        refetch,\n    } = useQuery('phone_settings', {\n        options: { enabled: is_authorize },\n    });\n\n    const no_of_available_carriers = data?.phone_settings?.carriers && data?.phone_settings?.carriers.length;\n\n    const is_global_sms_available = data?.phone_settings?.carriers?.includes('sms');\n\n    const is_global_whatsapp_available = data?.phone_settings?.carriers?.includes('whatsapp');\n\n    const is_carriers_supported = data?.phone_settings?.carriers && data.phone_settings.carriers.length > 0;\n\n    const countries = data?.phone_settings?.countries?.sort((a, b) => a.display_name.localeCompare(b.display_name));\n\n    const getSelectedPhoneCode = useCallback(() => {\n        const country = countries?.find(c => c.country_code.toLowerCase() === clients_country);\n        return country?.calling_country_code;\n    }, [clients_country, countries]);\n\n    const getSelectedCountryList = useCallback(() => {\n        //@ts-expect-error calling_country_code is not defined in GetSettings\n        const phone_code = account_settings?.calling_country_code;\n        const country = phone_code\n            ? countries?.find(c => c.calling_country_code === phone_code)\n            : countries?.find(c => c.country_code.toLowerCase() === clients_country);\n        return country;\n    }, [clients_country, countries, account_settings]);\n\n    const getShortCodeSelected = useCallback(() => {\n        //@ts-expect-error calling_country_code is not defined in GetSettings\n        const phone_code = account_settings?.calling_country_code;\n        // Assuming you have access to the residency_list or a similar data structure\n        const country = countries?.find(country => country.calling_country_code === phone_code);\n        return country?.country_code || '';\n    }, [account_settings, countries]);\n\n    const formatted_countries_list = countries?.map(country => ({\n        name: country.display_name,\n        short_code: country.country_code,\n        phone_code: country.calling_country_code,\n        carriers: country.carriers,\n    }));\n\n    const legacy_core_countries_list = useMemo(\n        () =>\n            countries?.map(country => ({\n                text: `${country.display_name} (${country.calling_country_code})`,\n                value: country.calling_country_code,\n                id: `${country.calling_country_code}_${country.country_code}`,\n                carriers: country.carriers,\n                disabled: false,\n            })) ?? [],\n        [countries]\n    );\n\n    //@ts-expect-error will remove this once the account_settings is updated\n    const selected_phone_code = account_settings?.calling_country_code || getSelectedPhoneCode();\n\n    const selected_country_list = getSelectedCountryList();\n\n    const short_code_selected = getShortCodeSelected() || clients_country;\n\n    return {\n        updatePhoneSettings: refetch,\n        is_global_sms_available,\n        is_global_whatsapp_available,\n        no_of_available_carriers,\n        is_carriers_supported,\n        legacy_core_countries_list,\n        formatted_countries_list,\n        short_code_selected,\n        selected_phone_code,\n        selected_country_list,\n        isLoading: isPhoneSettingLoading,\n    };\n};\n\nexport default useGetPhoneNumberList;\n","import { useStore } from '@deriv/stores';\n\nconst useHasActiveRealAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n\n    const has_active_real_account = active_accounts.some(account => account.is_virtual === 0);\n\n    return has_active_real_account;\n};\n\nexport default useHasActiveRealAccount;\n","import { useStore } from '@deriv/stores';\n\nconst useHasMaltaInvestAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n    const has_malta_invest_account = active_accounts.some(\n        account => account.landing_company_shortcode === 'maltainvest'\n    );\n\n    return has_malta_invest_account;\n};\n\nexport default useHasMaltaInvestAccount;\n","import { useStore } from '@deriv/stores';\nimport useHasActiveRealAccount from './useHasActiveRealAccount';\n\nconst useHasSetCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n    const has_active_real_account = useHasActiveRealAccount();\n\n    const has_real_account = account_list\n        .filter(account => !account.is_virtual)\n        .some(account => account.title !== 'Real' && account.title !== 'Investment');\n\n    const has_set_currency = has_real_account || !has_active_real_account;\n\n    return has_set_currency;\n};\n\nexport default useHasSetCurrency;\n","import { useStore } from '@deriv/stores';\n\nconst useHasSvgAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n    const has_svg_account = active_accounts.some(account => account.landing_company_shortcode === 'svg');\n\n    return has_svg_account;\n};\n\nexport default useHasSvgAccount;\n","import { useEffect, useState } from 'react';\n\nconst useIsLiveChatWidgetAvailable = () => {\n    const [is_livechat_available, setIsLivechatAvailable] = useState(false);\n\n    useEffect(() => {\n        window.LiveChatWidget?.on('ready', data => {\n            if (data.state.availability === 'online') setIsLivechatAvailable(true);\n        });\n    }, []);\n\n    return {\n        is_livechat_available,\n    };\n};\n\nexport default useIsLiveChatWidgetAvailable;\n","import React from 'react';\nimport Cookies from 'js-cookie';\nimport { deriv_urls } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport useP2PSettings from './useP2PSettings';\n\nconst useIsP2PEnabled = () => {\n    const {\n        p2p_settings,\n        rest: { isLoading, isSubscribed },\n    } = useP2PSettings();\n    const { client, traders_hub } = useStore();\n    // Todo: to replace it with useAuthorize hook\n    const { currency, email, is_virtual, loginid, setIsP2PEnabled } = client;\n    const { is_low_risk_cr_eu_real } = traders_hub;\n\n    const is_p2p_supported_currency = Boolean(\n        p2p_settings?.supported_currencies?.includes(currency.toLocaleLowerCase())\n    );\n    const is_p2p_enabled = is_p2p_supported_currency && !is_virtual && !is_low_risk_cr_eu_real;\n\n    // Todo: should replace with the next line instead once BE is fixed.\n    // const is_p2p_enabled = data?.disabled === 0;\n\n    React.useEffect(() => {\n        setIsP2PEnabled(is_p2p_enabled);\n\n        if (email && loginid) {\n            const domain = /deriv\\.(com|me|be)/.test(window.location.hostname)\n                ? deriv_urls.DERIV_HOST_NAME\n                : window.location.hostname;\n\n            Cookies.set('is_p2p_disabled', (!is_p2p_enabled).toString(), { domain, secure: true, sameSite: 'none' });\n        }\n    }, [email, is_p2p_enabled, loginid, setIsP2PEnabled]);\n\n    return {\n        is_p2p_enabled,\n        is_p2p_enabled_loading: isLoading,\n        is_p2p_enabled_success: isSubscribed,\n    };\n};\n\nexport default useIsP2PEnabled;\n","import { useStore } from '@deriv/stores';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\nimport useHasSvgAccount from './useHasSvgAccount';\n\nconst useIsRealAccountNeededForCashier = () => {\n    const { traders_hub } = useStore();\n    const { is_eu_user, is_real } = traders_hub;\n\n    const has_svg_account = useHasSvgAccount();\n    const has_maltainvest_account = useHasMaltaInvestAccount();\n\n    const no_real_mf_account = has_svg_account && !has_maltainvest_account && is_eu_user;\n\n    const no_real_cr_account = !has_svg_account && has_maltainvest_account && !is_eu_user;\n\n    const is_real_account_needed = no_real_mf_account || no_real_cr_account;\n\n    const is_real_account_needed_for_cashier = is_real_account_needed && is_real;\n\n    return is_real_account_needed_for_cashier;\n};\n\nexport default useIsRealAccountNeededForCashier;\n","import { ACCOUNT_BADGE_STATUS } from '@deriv/shared';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\nimport useGetMFAccountStatus from './useGetMFAccountStatus';\nimport { useStore } from '@deriv/stores';\n\nconst useMFAccountStatus = () => {\n    const {\n        client: { is_eu },\n    } = useStore();\n    const has_malta_invest_account = useHasMaltaInvestAccount();\n    const { mf_account_status } = useGetMFAccountStatus();\n\n    const should_show_status_for_multipliers_account =\n        is_eu &&\n        has_malta_invest_account &&\n        mf_account_status &&\n        [ACCOUNT_BADGE_STATUS.PENDING, ACCOUNT_BADGE_STATUS.FAILED, ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION].includes(\n            mf_account_status\n        );\n    return should_show_status_for_multipliers_account ? mf_account_status : null;\n};\n\nexport default useMFAccountStatus;\n","import React from 'react';\nimport { useMutation } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\n\ntype TNotificationEventPayload = TSocketRequestPayload<'notification_event'>['payload'];\n\n/**\n * Hook to send notification event to the server\n * @name useNotificationEvent\n * @returns response, mutation function and other properties from useRequest hook\n */\nconst useNotificationEvent = () => {\n    const { data, mutate, ...rest } = useMutation('notification_event');\n\n    /**\n     * Function to send notification event to the server\n     * @param payload - notification event payload\n     */\n    const send = React.useCallback((payload: TNotificationEventPayload) => mutate({ payload }), [mutate]);\n\n    return {\n        notification_event: data?.notification_event,\n        send,\n        ...rest,\n    };\n};\n\nexport default useNotificationEvent;\n","import { useStore } from '@deriv/stores';\n\nconst useOnrampVisible = () => {\n    const { client } = useStore();\n    const { website_status, currency, is_virtual } = client;\n\n    const is_onramp_visible =\n        !is_virtual &&\n        !!website_status?.currencies_config?.[currency] &&\n        //@ts-expect-error need to update `@deriv/api-types` library to the latest version\n        website_status?.currencies_config?.[currency].platform.ramp.length > 0;\n\n    return is_onramp_visible;\n};\n\nexport default useOnrampVisible;\n","import { useEffect, useState } from 'react';\nimport { useStore } from '@deriv/stores';\n\ntype TNotification = {\n    order_id: string;\n    is_seen: boolean;\n    is_active: boolean;\n};\n\ntype TClientData = {\n    is_cached: boolean;\n    notifications: TNotification[];\n};\n\ntype TP2PSettings = Record<string, TClientData>;\n\nconst useP2PNotificationCount = () => {\n    const [p2p_settings, setP2PSettings] = useState<TP2PSettings>(\n        JSON.parse(localStorage.getItem('p2p_settings') || '{}')\n    );\n    const { client } = useStore();\n    const { loginid } = client;\n    const notifications = loginid ? p2p_settings[loginid]?.notifications : null;\n\n    useEffect(() => {\n        const onStorageChanged = () => {\n            const data = localStorage.getItem('p2p_settings');\n\n            if (data) {\n                setP2PSettings(JSON.parse(data));\n            }\n        };\n\n        window.addEventListener('storage', onStorageChanged);\n\n        return () => {\n            window.removeEventListener('storage', onStorageChanged);\n        };\n    }, []);\n\n    const p2p_notification_count = notifications?.filter(notification => !notification.is_seen).length || 0;\n\n    return p2p_notification_count;\n};\n\nexport default useP2PNotificationCount;\n","import { useContext } from 'react';\nimport { P2PSettingsContext } from '@deriv/stores';\n\n/**\n * A custom hook to get the p2p_settings information from `p2p_settings` endpoint\n */\nconst useP2PSettings = () => {\n    const context = useContext(P2PSettingsContext);\n\n    if (!context) {\n        throw new Error('useP2PSettingsContext must be used within a P2PSettingsProvider');\n    }\n\n    return context;\n};\n\nexport default useP2PSettings;\n","import { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst usePaymentAgentList = (currency?: string) => {\n    const { client } = useStore();\n    const { residence } = client;\n\n    const { data, ...rest } = useFetch('paymentagent_list', {\n        payload: { paymentagent_list: residence, currency },\n        options: { enabled: Boolean(residence) },\n    });\n\n    return {\n        data: data?.paymentagent_list?.list,\n        ...rest,\n    };\n};\n\nexport default usePaymentAgentList;\n","import { useFetch } from '@deriv/api';\nimport { WS } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport { useEffect, useState } from 'react';\n\nconst usePaymentAgentTransferVisible = () => {\n    const { client } = useStore();\n    const { is_authorize, is_logged_in } = client;\n    const [is_websocket_authorized, setIsWebSocketAuthorized] = useState(false);\n\n    useEffect(() => {\n        const checkAuthorize = async () => {\n            try {\n                const check_websocket_authorized = await WS.wait('authorize');\n                if (check_websocket_authorized) setIsWebSocketAuthorized(is_authorize && is_logged_in);\n            } catch (error) {\n                console.error('Error while authorizing:', error); // eslint-disable-line\n            }\n        };\n\n        checkAuthorize();\n    }, [is_authorize, is_logged_in]);\n\n    const { data, ...rest } = useFetch('get_settings', {\n        options: { enabled: Boolean(is_websocket_authorized), refetchOnWindowFocus: false },\n    });\n    const is_payment_agent_transfer_visible = Boolean(data?.get_settings?.is_authenticated_payment_agent);\n\n    return {\n        data: is_payment_agent_transfer_visible,\n        ...rest,\n    };\n};\n\nexport default usePaymentAgentTransferVisible;\n","import { useQuery } from '@deriv/api';\nimport { TSocketRequestQueryOptions } from '@deriv/api/types';\n\n/** A custom hook that gets the residence list. */\nconst useResidenceList = (options?: TSocketRequestQueryOptions<'residence_list'>) => {\n    const { data, ...residence_list_rest } = useQuery('residence_list', {\n        options: {\n            staleTime: Infinity,\n            ...options,\n        },\n    });\n\n    return {\n        /** The residence list */\n        data: data?.residence_list ?? [],\n        ...residence_list_rest,\n    };\n};\n\nexport default useResidenceList;\n","import { useStore } from '@deriv/stores';\n\n/** A custom hook used for enabling residenceSelfDeclaration checkbox in terms of use section in real account signup */\nconst useResidenceSelfDeclaration = () => {\n    const { client } = useStore();\n    const { residence, residence_list } = client;\n    const is_residence_self_declaration_required = !!residence_list?.find(\n        residence_item => residence_item?.value === residence\n    )?.account_opening_self_declaration_required;\n\n    return { is_residence_self_declaration_required };\n};\n\nexport default useResidenceSelfDeclaration;\n","import { useQuery } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\n\ntype TServiceTokenPayload = TSocketRequestPayload<'service_token'>['payload'];\n\n/**\n * Hook to get the service token for using 3rd party SDK\n * @name useServiceToken\n * @param payload to be sent while making the API call\n * @returns response and its status\n */\nconst useServiceToken = (payload: TServiceTokenPayload) => {\n    const { data, ...rest } = useQuery('service_token', {\n        payload,\n        options: { retry: 3, enabled: Boolean(payload) },\n    });\n\n    return {\n        service_token: data?.service_token,\n        ...rest,\n    };\n};\n\nexport default useServiceToken;\n","import { useQuery } from '@deriv/api';\nimport { TSocketRequestQueryOptions } from '@deriv/api/types';\n/**\n * Custom hook to get states list for a particular country.\n * @returns an object with the states list and the options to manage API response.\n */\nconst useStatesList = (country: string, options?: TSocketRequestQueryOptions<'states_list'>) => {\n    const { data, ...rest } = useQuery('states_list', {\n        // @ts-expect-error The `states_list` type from `@deriv/api-types` is not correct.\n        // The type should be `string`, but it's an alias to string type.\n        payload: { states_list: country },\n        options: {\n            enabled: !!country,\n            staleTime: Infinity,\n            ...options,\n        },\n    });\n\n    return { ...rest, data: data?.states_list ?? [] };\n};\n\nexport default useStatesList;\n","import { useMemo } from 'react';\nimport useStoreWalletAccountsList from './useStoreWalletAccountsList';\n\ntype TLinkedAccount = {\n    loginid?: string;\n    platform?: Exclude<'ctrader' | 'derivez' | 'dtrade' | 'dxtrade' | 'mt5', 'dwallet'>;\n};\n\ntype TReturnObjectType = {\n    [key in Exclude<TLinkedAccount['platform'], undefined>]: TLinkedAccount[];\n};\n\n/** A custom hook to get the list of linked accounts of all wallets */\nconst useStoreLinkedWalletsAccounts = () => {\n    const { data: wallets_list } = useStoreWalletAccountsList();\n\n    // define object with accounts\n    const linked_trading_accounts = useMemo(() => {\n        const linked_accounts: TReturnObjectType = {\n            ctrader: [],\n            derivez: [],\n            dtrade: [],\n            dxtrade: [],\n            mt5: [],\n        };\n\n        wallets_list?.forEach(account => {\n            const linked = account.linked_to as TLinkedAccount[];\n\n            linked?.forEach(linked_to_account => {\n                if (linked_to_account?.platform && linked_to_account?.loginid)\n                    linked_accounts[linked_to_account.platform].push(linked_to_account);\n            });\n        });\n\n        return linked_accounts;\n    }, [wallets_list]);\n\n    /** List of wallets for current user. */\n    return linked_trading_accounts;\n};\n\nexport default useStoreLinkedWalletsAccounts;\n","import { useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst currency_to_icon_mapper: Record<string, Record<'light' | 'dark', string>> = {\n    Demo: {\n        dark: 'IcWalletDerivDemoDark',\n        light: 'IcWalletDerivDemoLight',\n    },\n    USD: {\n        dark: 'IcWalletCurrencyUsd',\n        light: 'IcWalletCurrencyUsd',\n    },\n    EUR: {\n        dark: 'IcWalletCurrencyEur',\n        light: 'IcWalletCurrencyEur',\n    },\n    AUD: {\n        dark: 'IcWalletCurrencyAud',\n        light: 'IcWalletCurrencyAud',\n    },\n    GBP: {\n        dark: 'IcWalletCurrencyGbp',\n        light: 'IcWalletCurrencyGbp',\n    },\n    BTC: {\n        dark: 'IcWalletBitcoinDark',\n        light: 'IcWalletBitcoinLight',\n    },\n    ETH: {\n        dark: 'IcWalletEthereumDark',\n        light: 'IcWalletEthereumLight',\n    },\n    USDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    eUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    tUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    UST: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    LTC: {\n        dark: 'IcWalletLiteCoinDark',\n        light: 'IcWalletLiteCoinLight',\n    },\n    USDC: {\n        dark: 'IcWalletUsdCoinDark',\n        light: 'IcWalletUsdCoinLight',\n    },\n    XRP: {\n        dark: 'IcWalletXrpDark',\n        light: 'IcWalletXrpLight',\n    },\n};\n\n/** A custom hook to get the list of wallets for the current user. */\nconst useStoreWalletAccountsList = () => {\n    const { client } = useStore();\n    const { accounts, is_crypto } = client;\n\n    // Add additional information to each wallet.\n    const wallets = useMemo(() => {\n        return Object.keys(accounts)\n            ?.filter(id => accounts?.[id].account_category === 'wallet')\n            ?.map(id => {\n                const wallet = accounts?.[id];\n\n                const loginid = id;\n                const currency = wallet.currency;\n                const is_disabled = Boolean(wallet.is_disabled);\n                const is_virtual = Boolean(wallet.is_virtual);\n\n                const fiat_or_crypto = is_crypto(currency) ? 'crypto' : 'fiat';\n                const icon_type = is_virtual ? 'demo' : fiat_or_crypto;\n                const landing_company_name = wallet.landing_company_name?.replace('maltainvest', 'malta');\n                const is_malta_wallet = landing_company_name === 'malta';\n                const dtrade_loginid = wallet?.linked_to?.find(account => account?.platform === 'dtrade')?.loginid;\n                const dtrade_balance = accounts?.[dtrade_loginid ?? '']?.balance;\n                const is_dtrader_account_disabled = Boolean(accounts?.[dtrade_loginid ?? '']?.is_disabled);\n\n                const wallet_currency_type = is_virtual ? 'Demo' : currency || '';\n                const icons = currency_to_icon_mapper[wallet_currency_type];\n\n                const gradients = {\n                    /** The gradient class name for the wallet header background. */\n                    header: {\n                        dark: `wallet-header__${wallet_currency_type.toLowerCase()}-bg--dark`,\n                        light: `wallet-header__${wallet_currency_type.toLowerCase()}-bg`,\n                    },\n                    /** The gradient class name for the wallet card background. */\n                    card: {\n                        dark: `wallet-card__${wallet_currency_type.toLowerCase()}-bg--dark`,\n                        light: `wallet-card__${wallet_currency_type.toLowerCase()}-bg`,\n                    },\n                };\n\n                return {\n                    ...wallet,\n                    dtrade_loginid,\n                    dtrade_balance,\n                    icons,\n                    icon_type,\n                    is_disabled,\n                    is_virtual,\n                    is_malta_wallet,\n                    landing_company_name,\n                    loginid,\n                    gradients,\n                    is_dtrader_account_disabled,\n                } as const;\n            });\n    }, [accounts, is_crypto]);\n\n    // Sort wallet accounts alphabetically by fiat, crypto, then virtual.\n    const sorted_wallets = useMemo(() => {\n        if (!wallets) return;\n\n        return [...wallets].sort((a, b) => {\n            if (a.is_virtual !== b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if (is_crypto(a.currency) !== is_crypto(b.currency)) {\n                return is_crypto(a.currency) ? 1 : -1;\n            }\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        });\n    }, [is_crypto, wallets]);\n\n    return {\n        /** List of wallets for current user. */\n        data: sorted_wallets,\n        /** Indicating whether the user has a wallet */\n        has_wallet: sorted_wallets && sorted_wallets.length > 0,\n    };\n};\n\nexport default useStoreWalletAccountsList;\n","import { useMutation } from '@deriv/api';\nimport { useCallback } from 'react';\n\nconst useTinValidations = () => {\n    const { data, mutate: _mutate, ...rest } = useMutation('tin_validations');\n\n    const mutate = useCallback((tax_residence: string) => _mutate({ payload: { tax_residence } }), [_mutate]);\n\n    return {\n        tin_validation_config: data?.tin_validations ?? {},\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useTinValidations;\n","import { useCallback, useState } from 'react';\nimport { useRequest } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\nimport useCountdown from './useCountdown';\n\nconst RESEND_COUNTDOWN = 60;\n\nconst useVerifyEmail = (\n    type: Parameters<ReturnType<typeof useRequest<'verify_email'>>['mutate']>[0]['payload']['type']\n) => {\n    const WS = useRequest('verify_email');\n    const counter = useCountdown({ from: RESEND_COUNTDOWN });\n    const { client } = useStore();\n    const [sent_count, setSentCount] = useState(0);\n\n    const send = useCallback(\n        (email?: Parameters<ReturnType<typeof useRequest<'verify_email'>>['mutate']>[0]['payload']['verify_email']) => {\n            const request_email = email ?? client.email;\n            if (!request_email) return;\n            if (counter.is_running) return;\n\n            counter.reset();\n            counter.start();\n\n            setSentCount(count => count + 1);\n\n            WS.mutate({ payload: { verify_email: request_email, type } });\n        },\n        [WS, client.email, counter, type]\n    );\n\n    const sendPhoneNumberVerifyEmail = useCallback(() => {\n        WS.mutate({ payload: { verify_email: client.email, type } });\n    }, [WS, client.email, type]);\n\n    return {\n        WS,\n        is_loading: WS.isLoading,\n        error: WS.error,\n        data: WS.data,\n        counter: counter.count,\n        is_counter_running: counter.is_running,\n        sent_count,\n        has_been_sent: sent_count !== 0,\n        send,\n        sendPhoneNumberVerifyEmail,\n    };\n};\n\nexport default useVerifyEmail;\n","import merge from 'lodash.merge';\n\nimport type { TCoreStores, TStores } from '../types';\n\nconst mock = (): TStores & { is_mock: boolean } => {\n    const common_store_error = {\n        app_routing_history: [],\n        header: '',\n        message: '',\n        type: '',\n        redirect_label: '',\n        redirect_to: '',\n        should_clear_error_on_click: false,\n        should_show_refresh: false,\n        redirectOnClick: jest.fn(),\n    };\n    return {\n        is_mock: true,\n        client: {\n            account_settings: {},\n            account_type: 'virtual',\n            accounts: {},\n            active_account_landing_company: '',\n            trading_platform_available_accounts: [],\n            ctrader_trading_platform_available_accounts: [],\n            account_limits: {},\n            self_exclusion: {},\n            getSelfExclusion: jest.fn(),\n            account_status: {\n                p2p_poa_required: 1,\n                authentication: {\n                    attempts: {\n                        count: 1,\n                        history: [\n                            {\n                                country_code: 'id',\n                                id: '8919',\n                                service: 'manual',\n                                status: 'verified',\n                                timestamp: 1674633681,\n                            },\n                        ],\n                        latest: {\n                            country_code: 'id',\n                            id: '8919',\n                            service: 'manual',\n                            status: 'verified',\n                            timestamp: 1674633681,\n                        },\n                    },\n                    document: {\n                        status: 'verified',\n                    },\n\n                    identity: {\n                        services: {\n                            idv: {\n                                last_rejected: [],\n                                reported_properties: {},\n                                status: 'none',\n                                submissions_left: 3,\n                            },\n                            manual: {\n                                status: 'none',\n                            },\n                            onfido: {\n                                country_code: 'IDN',\n                                documents_supported: [\n                                    'Driving Licence',\n                                    'National Identity Card',\n                                    'Passport',\n                                    'Residence Permit',\n                                ],\n                                is_country_supported: 1,\n                                last_rejected: [],\n                                reported_properties: {},\n                                status: 'none',\n                                submissions_left: 3,\n                            },\n                        },\n                        status: 'verified',\n                    },\n                    income: {\n                        status: 'none',\n                    },\n                    needs_verification: [],\n                    ownership: {\n                        requests: [],\n                        status: 'none',\n                    },\n                },\n                currency_config: {\n                    USD: {\n                        is_deposit_suspended: 0,\n                        is_withdrawal_suspended: 0,\n                    },\n                },\n                p2p_status: 'none',\n                prompt_client_to_authenticate: 0,\n                risk_classification: 'low',\n                status: [\n                    'age_verification',\n                    'allow_document_upload',\n                    'authenticated',\n                    'dxtrade_password_not_set',\n                    'financial_information_not_complete',\n                    'idv_disallowed',\n                    'mt5_password_not_set',\n                    'trading_experience_not_complete',\n                ],\n            },\n            balance: '',\n            can_change_fiat_currency: false,\n            clients_country: '',\n            currency: '',\n            currencies_list: [{ text: '', value: '', has_tool_tip: false }],\n            current_currency_type: '',\n            current_fiat_currency: '',\n            current_landing_company: { support_professional_client: '' },\n            cfd_score: 0,\n            ctrader_accounts_list: [],\n            ctrader_total_balance: 0,\n            email_address: '',\n            setCFDScore: jest.fn(),\n            getLimits: jest.fn(),\n            has_active_real_account: false,\n            getTwoFAStatus: jest.fn(),\n            has_fiat: false,\n            has_logged_out: false,\n            has_cookie_account: false,\n            has_maltainvest_account: false,\n            has_restricted_mt5_account: false,\n            has_wallet: false,\n            initialized_broadcast: false,\n            is_trading_platform_available_account_loaded: false,\n            setIsTradingPlatformAvailableAccountLoaded: jest.fn(),\n            is_account_setting_loaded: false,\n            is_authorize: false,\n            is_deposit_lock: false,\n            is_duplicate_dob_phone: false,\n            is_dxtrade_allowed: false,\n            is_dxtrade_password_not_set: false,\n            is_eu: false,\n            is_eu_country: false,\n            has_residence: false,\n            is_financial_account: false,\n            is_financial_assessment_needed: false,\n            is_financial_information_incomplete: false,\n            is_low_risk: false,\n            is_identity_verification_needed: false,\n            is_client_store_initialized: false,\n            is_landing_company_loaded: false,\n            is_logged_in: false,\n            is_logging_in: false,\n            is_mt5_password_not_set: false,\n            is_mt5_account_list_updated: false,\n            is_p2p_enabled: false,\n            is_proof_of_ownership_enabled: false,\n            is_poa_expired: false,\n            is_populating_dxtrade_account_list: false,\n            is_populating_ctrader_account_list: false,\n            is_social_signup: false,\n            is_single_currency: false,\n            is_switching: false,\n            is_high_risk: false,\n            is_trading_experience_incomplete: false,\n            is_unwelcome: false,\n            is_virtual: false,\n            is_withdrawal_lock: false,\n            is_populating_account_list: false,\n            landing_company_shortcode: '',\n            local_currency_config: {\n                currency: '',\n                decimal_places: 0,\n            },\n            loginid: '',\n            pre_switch_broadcast: false,\n            residence: '',\n            is_svg: false,\n            is_p2p_available: false,\n            responseMt5LoginList: jest.fn(),\n            responseTradingPlatformAccountsList: jest.fn(),\n            setFinancialAndTradingAssessment: jest.fn(),\n            standpoint: {\n                financial_company: '',\n                gaming_company: '',\n                maltainvest: false,\n                svg: false,\n            },\n            switchAccount: jest.fn(),\n            verification_code: {\n                payment_agent_withdraw: '',\n                payment_withdraw: '',\n                phone_number_verification: '',\n                request_email: '',\n                reset_password: '',\n                signup: '',\n                system_email_change: '',\n                trading_platform_dxtrade_password_reset: '',\n                trading_platform_mt5_password_reset: '',\n            },\n            prevent_redirect_to_hub: false,\n            setPreventRedirectToHub: jest.fn(),\n            email: '',\n            fetchStatesList: jest.fn(),\n            setVerificationCode: jest.fn(),\n            updateAccountStatus: jest.fn(),\n            updateMT5AccountDetails: jest.fn(),\n            is_authentication_needed: false,\n            authentication_status: {\n                document_status: '',\n                identity_status: '',\n            },\n            getToken: jest.fn(),\n            phone_settings: {\n                carriers: [],\n                countries: [\n                    {\n                        calling_country_code: '',\n                        carriers: [],\n                        country_code: '',\n                        display_name: '',\n                    },\n                ],\n            },\n            setPhoneSettings: jest.fn(),\n            mt5_login_list: [],\n            logout: jest.fn(),\n            should_allow_authentication: false,\n            should_allow_poinc_authentication: false,\n            active_accounts: [],\n            account_list: [],\n            available_crypto_currencies: [],\n            selectCurrency: jest.fn(),\n            setAccountStatus: jest.fn(),\n            setBalanceOtherAccounts: jest.fn(),\n            setInitialized: jest.fn(),\n            setIsClientStoreInitialized: jest.fn(),\n            setLogout: jest.fn(),\n            setP2pAdvertiserInfo: jest.fn(),\n            setPreSwitchAccount: jest.fn(),\n            social_identity_provider: '',\n            switched: false,\n            switch_broadcast: false,\n            switchEndSignal: jest.fn(),\n            isEligibleForMoreRealMt5: jest.fn(),\n            isEligibleForMoreDemoMt5Svg: jest.fn(),\n            updateMT5Status: jest.fn(),\n            fetchResidenceList: jest.fn(),\n            residence_list: [],\n            should_restrict_bvi_account_creation: false,\n            should_restrict_vanuatu_account_creation: false,\n            fetchAccountSettings: jest.fn(),\n            setAccountSettings: jest.fn(),\n            upgradeable_landing_companies: [],\n            is_populating_mt5_account_list: false,\n            landing_companies: {},\n            landing_company: {},\n            upgradeable_currencies: [],\n            getChangeableFields: jest.fn(),\n            is_mt5_allowed: false,\n            mt5_disabled_signup_types: {\n                real: false,\n                demo: false,\n            },\n            dxtrade_disabled_signup_types: {\n                real: false,\n                demo: false,\n            },\n            dxtrade_accounts_list_error: null,\n            //@ts-expect-error we only need partial values\n            website_status: {\n                dxtrade_status: {\n                    all: 0,\n                    demo: 0,\n                    real: 0,\n                },\n                mt5_status: {\n                    real: [],\n                    demo: [],\n                },\n            },\n            is_fully_authenticated: false,\n            states_list: [],\n            is_crypto: jest.fn(),\n            dxtrade_accounts_list: [],\n            default_currency: 'USD',\n            resetVirtualBalance: jest.fn(),\n            has_enabled_two_fa: false,\n            setTwoFAStatus: jest.fn(),\n            has_changed_two_fa: false,\n            setTwoFAChangedStatus: jest.fn(),\n            real_account_creation_unlock_date: '',\n            has_any_real_account: false,\n            setPrevAccountType: jest.fn(),\n            prev_account_type: 'demo',\n            setLoginInformation: jest.fn(),\n            init: jest.fn(),\n            setLoginId: jest.fn(),\n            resetLocalStorageValues: jest.fn(),\n            setIsAlreadyAttempted: jest.fn(),\n            is_already_attempted: false,\n            is_bot_allowed: false,\n            account_open_date: undefined,\n            setAccounts: jest.fn(),\n            updateMt5LoginList: jest.fn(),\n            should_show_eu_error: false,\n            is_options_blocked: false,\n            setIsP2PEnabled: jest.fn(),\n            real_account_signup_form_data: [],\n            real_account_signup_form_step: 0,\n            setRealAccountSignupFormData: jest.fn(),\n            setRealAccountSignupFormStep: jest.fn(),\n            wallet_migration_state: 'ineligible',\n            startWalletMigration: jest.fn(),\n            resetWalletMigration: jest.fn(),\n            is_wallet_migration_request_is_in_progress: false,\n            is_passkey_supported: false,\n            is_phone_number_verification_enabled: false,\n            passkeys_list: [],\n            should_show_passkey_notification: false,\n            setIsPasskeySupported: jest.fn(),\n            setIsPhoneNumberVerificationEnabled: jest.fn(),\n            setPasskeysStatusToCookie: jest.fn(),\n            setShouldShowPasskeyNotification: jest.fn(),\n            fetchShouldShowPasskeyNotification: jest.fn(),\n            fetchPasskeysList: jest.fn(),\n            exchange_rates: {},\n            getExchangeRate: jest.fn(),\n            subscribeToExchangeRate: jest.fn(),\n            unsubscribeFromExchangeRate: jest.fn(),\n            unsubscribeFromAllExchangeRates: jest.fn(),\n            virtual_account_loginid: '',\n            is_cr_account: false,\n            is_mf_account: false,\n            is_tradershub_tracking: false,\n            setTradersHubTracking: jest.fn(),\n            account_time_of_closure: undefined,\n            is_account_to_be_closed_by_residence: false,\n            statement: {},\n            should_show_trustpilot_notification: false,\n        },\n        common: {\n            error: common_store_error,\n            current_language: 'EN',\n            isCurrentLanguage: jest.fn(),\n            is_from_derivgo: false,\n            is_from_outside_cashier: false,\n            is_from_derivp2p: false,\n            is_from_tradershub_os: false,\n            is_socket_opened: false,\n            has_error: false,\n            platform: '',\n            routeBackInApp: jest.fn(),\n            routeTo: jest.fn(),\n            changeCurrentLanguage: jest.fn(),\n            changeSelectedLanguage: jest.fn(),\n            resetServicesError: jest.fn(),\n            is_network_online: false,\n            network_status: {},\n            services_error: {},\n            server_time: new Date() as unknown as TCoreStores['common']['server_time'],\n            setError: jest.fn(),\n            setSelectedContractType: jest.fn(),\n            setServicesError: jest.fn(),\n            showError: jest.fn(),\n            is_language_changing: false,\n            setAppstorePlatform: jest.fn(),\n            app_routing_history: [],\n            getExchangeRate: jest.fn(),\n        },\n        ui: {\n            advanced_duration_unit: 't',\n            advanced_expiry_type: 'duration',\n            account_switcher_disabled_message: '',\n            app_contents_scroll_ref: {\n                current: null,\n            },\n            current_focus: null,\n            duration_t: 5,\n            getDurationFromUnit: jest.fn(),\n            is_account_settings_visible: false,\n            is_account_switcher_disabled: false,\n            is_advanced_duration: false,\n            is_history_tab_active: false,\n            is_loading: false,\n            is_cashier_visible: false,\n            is_redirected_from_email: false,\n            is_wallet_modal_visible: false,\n            is_chart_layout_default: false,\n            is_chart_countdown_visible: false,\n            is_closing_create_real_account_modal: false,\n            is_forced_to_exit_pnv: false,\n            is_phone_verification_completed: false,\n            is_dark_mode_on: false,\n            is_from_signup_account: false,\n            is_from_success_deposit_modal: false,\n            is_language_settings_modal_on: false,\n            is_desktop: false,\n            is_app_disabled: false,\n            has_only_forward_starting_contracts: false,\n            header_extension: null,\n            is_link_expired_modal_visible: false,\n            is_mobile: false,\n            is_tablet: false,\n            is_mobile_language_menu_open: false,\n            is_positions_drawer_on: false,\n            is_reports_visible: false,\n            is_verification_submitted: false,\n            is_reset_email_modal_visible: false,\n            is_reset_password_modal_visible: false,\n            is_route_modal_on: false,\n            is_services_error_visible: false,\n            should_show_phone_number_otp: false,\n            is_trading_assessment_for_existing_user_enabled: false,\n            is_wallets_onboarding_tour_guide_visible: false,\n            setIsForcedToExitPnv: jest.fn(),\n            setIsPhoneVerificationCompleted: jest.fn(),\n            setRedirectFromEmail: jest.fn(),\n            setShouldShowPhoneNumberOTP: jest.fn(),\n            disableApp: jest.fn(),\n            enableApp: jest.fn(),\n            setCurrentFocus: jest.fn(),\n            toggleAccountsDialog: jest.fn(),\n            toggleAccountSettings: jest.fn(),\n            toggleCashier: jest.fn(),\n            setDarkMode: jest.fn(),\n            setReportsTabIndex: jest.fn(),\n            has_real_account_signup_ended: false,\n            real_account_signup_target: '',\n            real_account_signup: {\n                active_modal_index: -1,\n                previous_currency: '',\n                current_currency: '',\n                success_message: '',\n                error_message: '',\n            },\n            resetRealAccountSignupParams: jest.fn(),\n            notification_messages_ui: jest.fn(),\n            onChangeUiStore: jest.fn(),\n            openPositionsDrawer: jest.fn(),\n            openRealAccountSignup: jest.fn(),\n            setChartCountdown: jest.fn(),\n            setIsWalletModalVisible: jest.fn(),\n            setHasOnlyForwardingContracts: jest.fn(),\n            setIsClosingCreateRealAccountModal: jest.fn(),\n            setIsFromSuccessDepositModal: jest.fn(),\n            setIsFromSignupAccount: jest.fn(),\n            setMobileLanguageMenuOpen: jest.fn(),\n            setRealAccountSignupEnd: jest.fn(),\n            setPromptHandler: jest.fn(),\n            setPurchaseState: jest.fn(),\n            setAppContentsScrollRef: jest.fn(),\n            shouldNavigateAfterChooseCrypto: jest.fn(),\n            simple_duration_unit: 't',\n            toggleHistoryTab: jest.fn(),\n            toggleLanguageSettingsModal: jest.fn(),\n            togglePositionsDrawer: jest.fn(),\n            toggleResetEmailModal: jest.fn(),\n            toggleResetPasswordModal: jest.fn(),\n            toggleLinkExpiredModal: jest.fn(),\n            toggleServicesErrorModal: jest.fn(),\n            toggleSetCurrencyModal: jest.fn(),\n            addToast: jest.fn(),\n            removeToast: jest.fn(),\n            resetPurchaseStates: jest.fn(),\n            reports_route_tab_index: 1,\n            should_show_cancellation_warning: false,\n            should_show_one_time_deposit_modal: false,\n            should_show_account_success_modal: false,\n            should_trigger_tour_guide: false,\n            toggleCancellationWarning: jest.fn(),\n            setShouldShowOneTimeDepositModal: jest.fn(),\n            toggleAccountSuccessModal: jest.fn(),\n            toggleReports: jest.fn(),\n            setSubSectionIndex: jest.fn(),\n            sub_section_index: 0,\n            toggleReadyToDepositModal: jest.fn(),\n            is_ready_to_deposit_modal_visible: false,\n            is_real_acc_signup_on: false,\n            is_need_real_account_for_cashier_modal_visible: false,\n            is_verification_modal_visible: false,\n            is_mf_verification_pending_modal_visible: false,\n            is_mt5_migration_modal_enabled: false,\n            is_mt5_migration_modal_open: false,\n            toggleNeedRealAccountForCashierModal: jest.fn(),\n            is_switch_to_deriv_account_modal_visible: false,\n            openSwitchToRealAccountModal: jest.fn(),\n            is_top_up_virtual_open: false,\n            is_top_up_virtual_in_progress: false,\n            is_top_up_virtual_success: false,\n            closeTopUpModal: jest.fn(),\n            closeSuccessTopUpModal: jest.fn(),\n            is_cfd_reset_password_modal_enabled: false,\n            setCFDPasswordResetModal: jest.fn(),\n            openDerivRealAccountNeededModal: jest.fn(),\n            populateHeaderExtensions: jest.fn(),\n            populateSettingsExtensions: jest.fn(),\n            purchase_states: [],\n            setShouldShowCooldownModal: jest.fn(),\n            setIsVerificationModalVisible: jest.fn(),\n            setIsVerificationSubmitted: jest.fn(),\n            setShouldTriggerTourGuide: jest.fn(),\n            populateFooterExtensions: jest.fn(),\n            openAccountNeededModal: jest.fn(),\n            is_accounts_switcher_on: false,\n            openTopUpModal: jest.fn(),\n            toggleShouldShowRealAccountsList: jest.fn(),\n            is_reset_trading_password_modal_visible: false,\n            setResetTradingPasswordModalOpen: jest.fn(),\n            setIsMFVericationPendingModal: jest.fn(),\n            setMT5MigrationModalEnabled: jest.fn(),\n            toggleMT5MigrationModal: jest.fn(),\n            vanilla_trade_type: 'VANILLALONGCALL',\n            is_additional_kyc_info_modal_open: false,\n            isUrlUnavailableModalVisible: false,\n            setAccountSwitcherDisabledMessage: jest.fn(),\n            toggleUrlUnavailableModal: jest.fn(),\n            is_set_currency_modal_visible: false,\n            should_show_deposit_now_or_later_modal: false,\n            setShouldShowDepositNowOrLaterModal: jest.fn(),\n            should_show_crypto_transaction_processing_modal: false,\n            setShouldShowCryptoTransactionProcessingModal: jest.fn(),\n            is_trading_disabled_by_residence_modal_visible: false,\n            setIsTradingDisabledByResidenceModal: jest.fn(),\n            should_show_same_dob_phone_modal: false,\n            setShouldShowSameDOBPhoneModal: jest.fn(),\n            field_ref_to_focus: null,\n            setFieldRefToFocus: jest.fn(),\n            setHashedValue: jest.fn(),\n            url_hashed_values: '',\n            is_tnc_update_modal_open: false,\n            toggleTncUpdateModal: jest.fn(),\n            setIsWalletsOnboardingTourGuideVisible: jest.fn(),\n        },\n        traders_hub: {\n            getAccount: jest.fn(),\n            closeModal: jest.fn(),\n            combined_cfd_mt5_accounts: [],\n            available_cfd_accounts: [],\n            content_flag: '',\n            CFDs_restricted_countries: false,\n            openModal: jest.fn(),\n            selected_account: {\n                login: '',\n                account_id: '',\n            },\n            is_eu_user: false,\n            is_demo: false,\n            is_onboarding_visited: false,\n            is_first_time_visit: true,\n            setIsOnboardingVisited: jest.fn(),\n            setIsFirstTimeVisit: jest.fn(),\n            is_real: false,\n            selectRegion: jest.fn(),\n            setSelectedAccount: jest.fn(),\n            is_low_risk_cr_eu_real: false,\n            is_real_wallets_upgrade_on: false,\n            is_verification_docs_list_modal_visible: false,\n            toggleWalletsUpgrade: jest.fn(),\n            show_eu_related_content: false,\n            platform_real_balance: {\n                currency: '',\n                balance: 0,\n            },\n            cfd_demo_balance: {\n                currency: '',\n                balance: 0,\n            },\n            platform_demo_balance: {\n                currency: '',\n                balance: 0,\n            },\n            cfd_real_balance: {\n                currency: '',\n                balance: 0,\n            },\n            closeAccountTransferModal: jest.fn(),\n            toggleRegulatorsCompareModal: jest.fn(),\n            is_demo_low_risk: false,\n            financial_restricted_countries: false,\n            selected_account_type: 'real',\n            no_CR_account: false,\n            no_MF_account: false,\n            modal_data: {\n                active_modal: '',\n                data: {},\n            },\n            setTogglePlatformType: jest.fn(),\n            toggleAccountTransferModal: jest.fn(),\n            selectAccountType: jest.fn(),\n            is_wallet_migration_failed: false,\n            setWalletsMigrationFailedPopup: jest.fn(),\n            selected_platform_type: '',\n            available_platforms: [],\n            selected_region: 'All',\n            getExistingAccounts: jest.fn(),\n            available_dxtrade_accounts: [],\n            active_modal_tab: 'Deposit',\n            setWalletModalActiveTab: jest.fn(),\n            active_modal_wallet_id: '',\n            setWalletModalActiveWalletID: jest.fn(),\n            available_ctrader_accounts: [],\n            has_any_real_account: false,\n            startTrade: jest.fn(),\n            showTopUpModal: jest.fn(),\n            is_regulators_compare_modal_visible: false,\n            is_cfd_restricted_country: false,\n            setIsCFDRestrictedCountry: jest.fn(),\n            is_financial_restricted_country: false,\n            setIsFinancialRestrictedCountry: jest.fn(),\n            is_setup_real_account_or_go_to_demo_modal_visible: false,\n            setIsSetupRealAccountOrGoToDemoModalVisible: jest.fn(),\n            setVerificationModalOpen: jest.fn(),\n            selected_jurisdiction_kyc_status: {},\n            setSelectedJurisdictionKYCStatus: jest.fn(),\n            getDefaultJurisdiction: jest.fn(),\n            getMT5AccountKYCStatus: jest.fn(),\n        },\n        notifications: {\n            addNotificationMessage: jest.fn(),\n            addNotificationMessageByKey: jest.fn(),\n            addTradeNotification: jest.fn(),\n            client_notifications: {},\n            is_notifications_empty: true,\n            is_notifications_visible: false,\n            filterNotificationMessages: jest.fn(),\n            handleCurrencyRemovalNotification: jest.fn(),\n            notifications: [],\n            p2p_advertiser_info: undefined,\n            p2p_completed_orders: [],\n            refreshNotifications: jest.fn(),\n            removeAllNotificationMessages: jest.fn(),\n            removeNotifications: jest.fn(),\n            removeNotificationByKey: jest.fn(),\n            removeNotificationMessage: jest.fn(),\n            removeNotificationMessageByKey: jest.fn(),\n            removeTradeNotifications: jest.fn(),\n            setP2POrderProps: jest.fn(),\n            showAccountSwitchToRealNotification: jest.fn(),\n            showPOAAddressMismatchSuccessNotification: jest.fn(),\n            showPOAAddressMismatchFailureNotification: jest.fn(),\n            setP2PRedirectTo: jest.fn(),\n            setShouldShowPopups: jest.fn(),\n            toggleNotificationsModal: jest.fn(),\n            trade_notifications: [],\n        },\n        portfolio: {\n            active_positions: [],\n            active_positions_count: 0,\n            all_positions: [],\n            barriers: [],\n            error: '',\n            getPositionById: jest.fn(),\n            is_active_empty: false,\n            is_loading: false,\n            is_accumulator: false,\n            is_multiplier: false,\n            is_turbos: false,\n            onBuyResponse: jest.fn(),\n            onHoverPosition: jest.fn(),\n            onClickCancel: jest.fn(),\n            onClickSell: jest.fn(),\n            onMount: jest.fn(),\n            onUnmount: jest.fn(),\n            open_accu_contract: null,\n            positions: [],\n            removePositionById: jest.fn(),\n            setContractType: jest.fn(),\n            setAddNotificationBannerCallback: jest.fn(),\n        },\n        contract_trade: {\n            accountSwitchListener: jest.fn(),\n            accu_barriers_timeout_id: null,\n            accumulator_barriers_data: {},\n            accumulator_contract_barriers_data: {},\n            addContract: jest.fn(),\n            chart_type: '',\n            clearAccumulatorBarriersData: jest.fn(),\n            clearError: jest.fn(),\n            contracts: [],\n            error_message: '',\n            filtered_contracts: [],\n            getContractById: jest.fn(),\n            granularity: 0,\n            has_crossed_accu_barriers: false,\n            has_error: false,\n            last_contract: {},\n            markers_array: [],\n            onUnmount: jest.fn(),\n            prev_chart_type: '',\n            prev_contract: {},\n            prev_granularity: null,\n            removeContract: jest.fn(),\n            savePreviousChartMode: jest.fn(),\n            setNewAccumulatorBarriersData: jest.fn(),\n            updateAccumulatorBarriersData: jest.fn(),\n            updateChartType: jest.fn(),\n            updateGranularity: jest.fn(),\n            updateProposal: jest.fn(),\n            previous_accumulator_barriers_data: {},\n            is_barriers_loading: false,\n            setBarriersLoadingState(is_loading: boolean): void {\n                throw new Error('Function not implemented.');\n            },\n            restorePreviousBarriersIfNeeded(): void {\n                throw new Error('Function not implemented.');\n            },\n        },\n        modules: {\n            cfd: {\n                setMT5MigrationError: jest.fn(),\n                migrated_mt5_accounts: [],\n                mt5_migration_error: '',\n                enableCFDPasswordModal: jest.fn(),\n                is_sent_email_modal_enabled: false,\n                setSentEmailModalStatus: jest.fn(),\n                submitMt5Password: jest.fn(() => Promise.resolve()),\n                setJurisdictionSelectedShortcode: jest.fn(),\n                setAccountType: jest.fn(),\n                setMigratedMT5Accounts: jest.fn(),\n            },\n            positions: {\n                openContractTypeFilter: [],\n                closedContractTypeFilter: [],\n                timeFilter: '',\n                customTimeRangeFilter: '',\n                setClosedContractTypeFilter: jest.fn(),\n                setOpenContractTypeFilter: jest.fn(),\n                setTimeFilter: jest.fn(),\n                setCustomTimeRangeFilter: jest.fn(),\n            },\n            markets: {\n                favoriteIndicators: [],\n                favoriteSymbols: [],\n                removeFavoriteIndicator: jest.fn(),\n                removeFavoriteSymbol: jest.fn(),\n                setFavoriteIndicators: jest.fn(),\n                setFavoriteSymbols: jest.fn(),\n            },\n            trade: {\n                accumulator_range_list: [],\n                active_symbols: [],\n                amount: 0,\n                barrier_1: '',\n                barrier_2: '',\n                barrier_choices: [],\n                barrier_count: 1,\n                barrier_pipsize: 1,\n                basis: '',\n                basis_list: [],\n                cached_multiplier_cancellation_list: [],\n                cancellation_duration: '',\n                cancellation_range_list: [],\n                clearContractPurchaseToastBox: jest.fn(),\n                clearPurchaseInfo: jest.fn(),\n                clearV2ParamsInitialValues: jest.fn(),\n                contract_expiry_type: '',\n                contract_purchase_toast_box: {},\n                contract_start_type: '',\n                contract_type: '',\n                contract_types_list: {},\n                contract_types_list_v2: {},\n                currency: '',\n                duration: 0,\n                duration_min_max: {},\n                duration_unit: '',\n                duration_units_list: [],\n                expiry_date: null,\n                expiry_epoch: '',\n                expiry_time: null,\n                expiry_type: '',\n                form_components: [],\n                growth_rate: 0.01,\n                has_cancellation: false,\n                has_equals_only: false,\n                has_open_accu_contract: false,\n                has_stop_loss: false,\n                has_take_profit: false,\n                is_accumulator: false,\n                is_dtrader_v2: false,\n                is_dtrader_v2_mobile: false,\n                is_dtrader_v2_desktop: false,\n                is_equal: 0,\n                is_mobile_digit_view_selected: false,\n                is_multiplier: false,\n                is_purchase_enabled: false,\n                is_trade_enabled: true,\n                is_trade_enabled_v2: true,\n                is_trade_params_expanded: false,\n                is_touch: false,\n                is_turbos: false,\n                is_vanilla: false,\n                is_vanilla_fx: false,\n                last_digit: 5,\n                market_close_times: [],\n                market_open_times: [],\n                maximum_payout: 0,\n                maximum_ticks: 0,\n                multiplier: 0,\n                multiplier_range_list: [],\n                non_available_contract_types_list: {},\n                onChange: jest.fn(),\n                onChangeMultiple: jest.fn(),\n                onHoverPurchase: jest.fn(),\n                onPurchase: jest.fn(),\n                onPurchaseV2: jest.fn(),\n                onMount: jest.fn(),\n                onUnmount: jest.fn(),\n                previous_symbol: '',\n                proposal_info: {},\n                purchase_info: {},\n                payout_choices: [],\n                requestProposal: jest.fn(),\n                resetPreviousSymbol: jest.fn(),\n                setIsTradeParamsExpanded: jest.fn(),\n                setTradeTypeTab: jest.fn(),\n                setV2ParamsInitialValues: jest.fn(),\n                setPayoutPerPoint: jest.fn(),\n                setDefaultStake: jest.fn(),\n                stake_boundary: {},\n                start_date: 0,\n                stop_loss: 0,\n                symbol: '',\n                take_profit: 0,\n                tick_size_barrier_percentage: '',\n                ticks_history_stats: {\n                    ticks_stayed_in: [],\n                    last_tick_epoch: 0,\n                },\n                trade_type_tab: '',\n                trade_types: {},\n                validation_errors: {},\n                validation_params: {},\n                vanilla_trade_type: '',\n                v2_params_initial_values: {},\n            },\n        },\n        feature_flags: {\n            data: undefined,\n            update: jest.fn(),\n            unmount: jest.fn(),\n            cleanup: jest.fn(),\n        },\n        gtm: {\n            is_gtm_applicable: false,\n            visitorId: 'visitorId',\n            common_variables: {\n                language: 'en',\n                theme: 'dark',\n                platform: 'DBot',\n                loggedIn: false,\n            },\n            accountSwitcherListener: jest.fn(),\n            pushDataLayer: jest.fn(),\n            pushTransactionData: jest.fn(),\n            eventHandler: jest.fn(),\n            setLoginFlag: jest.fn(),\n        },\n        pushwoosh: {},\n        contract_replay: {\n            contract_store: {\n                accumulator_previous_spot_time: null,\n                barriers_array: [],\n                contract_config: {},\n                contract_info: {},\n                contract_update: {},\n                contract_update_history: [],\n                digits_info: {},\n                display_status: '',\n                getContractsArray: jest.fn(),\n                is_digit_contract: false,\n                is_ended: false,\n                marker: {\n                    contract_info: {},\n                    epoch_array: [],\n                    key: '',\n                    price_array: [],\n                    type: '',\n                },\n                markers_array: [],\n            },\n            chart_state: '',\n            chartStateChange: jest.fn(),\n            has_error: false,\n            is_chart_loading: true,\n            is_forward_starting: false,\n            is_market_closed: false,\n            is_sell_requested: false,\n            onClickCancel: jest.fn(),\n            onClickSell: jest.fn(),\n            onMount: jest.fn(),\n            onUnmount: jest.fn(),\n            removeErrorMessage: jest.fn(),\n            removeAccountSwitcherListener: jest.fn(),\n            setAccountSwitcherListener: jest.fn(),\n        },\n        chart_barrier_store: {} as TCoreStores['chart_barrier_store'],\n        active_symbols: {\n            active_symbols: [],\n            setActiveSymbols: jest.fn(),\n        },\n    };\n};\n\nconst mockStore = (override: DeepPartial<TStores>): TStores => merge(mock(), override);\n\nexport default mockStore;\n"],"names":["useAuthorize","current_token","getActiveAuthTokenIDFromLocalStorage","invalidate","useInvalidateQuery","switchEnvironment","queryClient","useAPIContext","currentLoginID","setCurrentLoginID","useState","getActiveLoginIDFromLocalStorage","_useQuery","useQuery","payload","authorize","options","enabled","Boolean","refetchOnWindowFocus","refetchOnReconnect","data","rest","_objectWithoutProperties","_excluded","modified_authorize","useMemo","_objectSpread","switchAccount","useCallback","loginid","active_loginid","sessionStorage","setItem","localStorage","cancelQueries","useGetAccountStatus","get_account_status_data","modified_account_status","get_account_status","prompt_client_to_authenticate","p2p_status","should_prompt_client_to_authenticate","is_p2p_user","useResidenceList","residence_list_rest","modified_residence_list","residence_list","map","residence","useSettings","isSuccess","_useMutation","useMutation","onSuccess","mutate","mutate_rest","_excluded2","update","modified_settings","_data$get_settings$ci","_data$get_settings","_data$get_settings$ac","_data$get_settings2","_data$get_settings$pl","_data$get_settings3","_data$get_settings$ta","_data$get_settings4","_data$get_settings$ta2","_data$get_settings5","citizenship","get_settings","citizen","account","account_opening_reason","placeofbirth","place_of_birth","taxResidence","tax_residence","taxIdentificationnumber","tax_identification_number","has_submitted_personal_details","mutation","name","_payload$payload","_payload$payload2","_len","arguments","length","props","Array","_key","prop","undefined","limit","offset","setOffset","keepPreviousData","remove","loadMore","prev","reset","useAccountLimits","get_limits","useAccountStatus","_useGetAccountStatus","status","Set","is_address_verified","has","is_allow_document_upload","is_age_verification","is_authenticated","is_cashier_locked","is_crs_tin_information","is_deposit_locked","is_disabled","is_document_expired","is_document_expiring_soon","is_dxtrade_password_not_set","is_financial_assessment_not_complete","is_financial_information_not_complete","is_financial_risk_approval","is_max_turnover_limit_not_set","is_mt5_password_not_set","is_mt5_withdrawal_locked","is_needs_affiliate_coc_approval","is_no_trading","is_no_withdrawal_or_trading","is_p2p_blocked_for_pa","is_pa_withdrawal_explicitly_allowed","is_password_reset_required","is_professional","is_professional_requested","is_professional_rejected","is_social_signup","is_trading_experience_not_complete","is_unwelcome","is_withdrawal_locked","is_deposit_attempt","is_poi_name_mismatch","is_allow_poa_resubmission","is_allow_poi_resubmission","is_shared_payment_method","is_personal_details_locked","is_transfers_blocked","is_df_deposit_requires_poi","is_authenticated_with_idv_photoid","is_idv_revoked","landing_company","company","modified_account_types","get_account_types","useBalance","balance_data","modified_balance","balance","useCurrencyConfig","_website_status_data$2","_crypto_config_data$c2","website_status_data","crypto_config_data","modified_currencies_config","_website_status_data$","website_status","currencies_config","website_status_currencies_config","Object","keys","currency","currency_config","is_crypto","type","is_fiat","is_AUD","is_USD","is_EUR","is_GBP","is_BTC","is_ETH","is_LTC","is_DAI","is_IDK","is_PAX","is_USB","is_USDT","is_TUSD","is_BUSD","is_EURS","is_eUSDT","is_tUSDT","is_USDC","is_USDK","code","display_code","modified_crypto_config","_crypto_config_data$c","crypto_config","transformed_currencies_config","reduce","previous","current","getConfig","displayMoney","amount","Intl","NumberFormat","preferred_language","minimumFractionDigits","fractional_digits","maximumFractionDigits","minimumIntegerDigits","format","error","useDerivAccountsList","_useAuthorize","authorize_data","modified_accounts","_authorize_data$accou","account_list","_account$loginid","created_at","Date","excluded_until","is_active","is_trading","account_category","is_virtual","is_wallet","platform","is_mf","startsWith","modified_accounts_with_balance","_balance_data$account","_account$currency_con","_account$currency_con2","accounts","display_balance","useActiveAccount","_useDerivAccountsList","find","useWalletAccountsList","account_list_data","filtered_accounts","filter","wallet","_wallet$linked_to","_wallet$landing_compa","_wallet$currency_conf","wallet_currency_type","dtrade_loginid","linked_to","landing_company_name","replace","is_malta_wallet","sort","a","b","_a$currency_config","_b$currency_config","_a$currency_config2","localeCompare","useActiveWalletAccount","_useWalletAccountsLis","useActiveLinkedToTradingAccount","_wallet_account_data$","wallet_account_data","linkedDtradeLoginId","linked","matchingTradingAccount","useTradingAccountsList","_modified_accounts$fi","_modified_accounts$fi2","trading","_filtered_accounts$fi","_filtered_accounts$fi2","first_real_loginid","account_type","demo_loginid","fiat_account","_getConfig","_account$currency","useActiveTradingAccount","_useTradingAccountsLi","useActiveWalletBalance","_balanceData$balance","_balanceData$balance2","_activeWallet$currenc","activeWallet","_useSubscription","useSubscription","subscribe","balanceData","unsubscribe","currencyCode","useEffect","displayBalance","useExchangeRates","_subscribe","_unsubscribe","exchangeRatesSubscriptions","useRef","setData","async","base_currency","target_currencies","_ref","Promise","all","id","subscription","target_currency","c","includes","push","response","_response$exchange_ra","rates","exchange_rates","currentData","hashObject","s","currData","forEach","getExchangeRate","base","target","_data$base$target","_data$base","useCtraderAccountsList","ctrader_accounts","modified_ctrader_accounts","_ctrader_accounts$tra","trading_platform_accounts","_account$balance","account_id","landing_company_short","formatted_balance","converted_balance","useDxtradeAccountsList","dxtrade_accounts","modified_dxtrade_accounts","_dxtrade_accounts$tra","useMT5AccountsList","mt5_accounts","mt5_accounts_rest","modified_mt5_accounts","_mt5_accounts$mt5_log","mt5_login_list","_account$login","display_login","login","useCFDAccountsList","isError","isMT5AccountsListError","isLoading","isMT5AccountsListLoading","isMT5AccountsListSuccess","isDxtradeAccountsListError","isDxtradeAccountsListLoading","isDxtradeAccountsListSuccess","isCtraderAccountsListError","CtraderAccountsListLoading","isCtraderAccountsListSuccess","mt5","dxtrade","ctrader","useAllAccountsList","accountsList","isAccountsListError","isAccountsListLoading","cfdsList","isCFDAccountsListError","isCFDAccountsListLoading","wallets","dtrade","useAvailableWallets","categories","_data$available_accou","available_accounts","useAllWalletAccounts","_useAvailableWallets","nonAddedWallets","addedWallets","modifiedWallets","nonVirtualWallets","is_added","sortWalletsByCurrency","useAuthentication","_get_account_status_d","_get_account_status_d2","_get_account_status_d3","_get_account_status_d4","_get_account_status_d5","needs_verification","authentication","account_status","is_poa_needed","is_poi_needed","is_age_verified","is_idv_disallowed","is_poi_resubmission_allowed","is_poa_resubmission_allowed","is_poa_address_mismatch","has_poa_been_attempted","document","has_poi_been_attempted","identity","poi_status","poa_status","risk_classification","useLandingCompany","settings_data","country_code","modified_landing_company","useAccesiblePlatforms","_useLandingCompany","_landing_company$ctra","is_ctrader_available","standard","is_dxtrade_available","dxtrade_all_company","is_mt5_available","mt_financial_company","mt_gaming_company","mt_all_company","market_type_to_leverage_mapper","gaming","financial","useAvailableMT5Accounts","mt5_available_accounts","modified_mt5_available_accounts","_mt5_available_accoun","trading_platform_available_accounts","market_type","leverage","useCashierValidation","cashier_validation","transfer_blocked","no_residence","unwelcome_status","self_exclusion","no_withdrawal_or_trading_status","only_pa_withdrawals_allowed_status","withdraw_service_unavailable_for_pa","withdrawal_locked_status","documents_expired","cashier_locked_status","disabled_status","financial_assessment_required","ask_currency","ask_authenticate","ask_financial_risk_approval","ask_tin_information","ask_self_exclusion_max_turnover_set","ask_fix_details","pa_commision_withdrawal_limit","useCloseDerivAccount","MARKET_TYPE","JURISDICTION","dxtradeAccount","requirements","after_first_deposit","financial_assessment","compliance","tax_information","signup","shortcode","ctraderAccount","useCFDCompareAccounts","_landingCompany$ctrad","isDemo","allAvailableMt5Accounts","_useMT5AccountsList","addedAccounts","modifiedMt5Data","availableAccount","createdAccount","sortedMt5Accounts","acc","marketType","landingCompany","hasDxtradeAccountAvailable","hasCTraderAccountAvailable","demoAvailableAccounts","mt5Accounts","useCancelCryptoTransaction","cashier_withdrawal_cancel","useCashierFiatAddress","_mutate","iframe_url","cashier","provider","useCryptoEstimations","_crypto_estimations_f2","_crypto_estimations_f3","_crypto_estimations_f4","subscription_error","crypto_estimations_fee_details","setCryptoEstimationsFeeDetails","crypto_estimations_fee_details_latest","setCryptoEstimationsFeeDetailsLatest","currency_code","setCurrencyCode","setError","count_down","setCountDown","server_time","setServerTime","timer","_data$crypto_estimati","_data$crypto_estimati2","_data$crypto_estimati3","crypto_estimations","withdrawal_fee","expiry_time","_crypto_estimations_f","currentTime","toMoment","utc","expiryTime","epochToMoment","diff","setTimeout","clearTimeout","prevTime","clearInterval","crypto_estimations_fee","value","crypto_estimations_fee_unique_id","unique_id","crypto_estimations_fee_expiry_time","getCryptoEstimations","unsubscribeCryptoEstimations","useCountryConfig","residence_list_data","_residence_list_data$","country_config","_country_config$ident","_country_config$ident2","disabled","toUpperCase","text","is_idv_supported","services","idv","is_country_supported","is_onfido_supported","onfido","transformed_residence_list","useCreateNewRealAccount","modified_data","new_account_real","useCreateWallet","new_account_wallet","currencyConfig","params","getFormattedConfirmations","transaction","_transaction$confirma","status_code","confirmations","getStatusName","getStatusDescription","transaction_type","useCryptoTransactions","_data$cashier_payment2","transactions","setTransactions","resetData","old_transactions","_data$cashier_payment","new_transactions","cashier_payments","crypto","updated_transactions","new_transaction","index","findIndex","old_transaction","modified_transactions","description","formatted_amount","formatted_transaction_hash","transaction_hash","getTruncatedString","formatted_address_hash","address_hash","formatted_confirmations","is_deposit","is_withdrawal","status_name","submit_date","last_transaction","useCryptoWithdrawal","mutateAsync","_mutateAsync","useCtraderServiceToken","_ctrader_token$servic","service","server","ctrader_token","service_token","token","useDepositCryptoAddress","_data$cashier","deposit_address","deposit","address","DEFAULT_IMAGE_WIDTH","DEFAULT_IMAGE_QUALITY","compressImageFile","file","resolve","filename","test","reader","FileReader","readAsDataURL","onloadend","_reader$result","src","result","toString","convertToBase64","then","img","maxWidth","quality","reject","image","Image","onload","canvas","createElement","canvas_context","getContext","CanvasRenderingContext2D","Error","naturalWidth","width","scaleFactor","height","naturalHeight","fillStyle","fillRect","save","drawImage","toBlob","blob","modified_filename","Blob","lastModifiedDate","now","compressImage","numToUint8Array","num","typedArray","Uint8Array","DataView","buffer","setUint32","useDocumentUpload","_isLoading","_isSuccess","isDocumentUploaded","setIsDocumentUploaded","activeWebSocket","getActiveWebsocket","upload","fileBlob","modifiedFile","fr","fileMetadata","fileSize","size","onerror","message","readAsArrayBuffer","readFile","fileBuffer","checksum","md5","from","updatedPayload","document_format","split","toLocaleUpperCase","expected_checksum","file_size","passthrough","document_upload","_res$document_upload","_res$document_upload2","chunks","generateChunks","binary","_ref2","chunkSize","i","item","concat","res","upload_id","call_type","chunk","send","modified_response","useDxtradeServiceToken","_dxtrade_token$servic","dxtrade_token","trading_platform_leverage","useExchangeRateSubscription","useIdentityDocumentVerificationAdd","submitIDVDocuments","useIsEuRegion","_mt_gaming_company$fi","_mt_all_company$swap_","eu_shortcode_regex","gaming_company","financial_company","financial_shortcode","gaming_shortcode","mt_gaming_shortcode","swap_free","is_financial_maltainvest","shortcodes","is_financial_eu_and_not_gaming_svg","is_gaming_eu","is_residence_eu","isEUCountry","usePOI","_authentication_data$2","_authentication_data$4","_authentication_data$6","_useAuthentication","authentication_data","isAuthenticationSuccess","isResidenceListSuccess","get_settings_data","isGetSettingsSuccess","previous_service","_authentication_data$","latest_poi_attempt","attempts","latest","previous_poi","_authentication_data$3","manual","current_service","reported_properties","last_rejected","submissions_left","current_poi","_matching_residence_d","_matching_residence_d2","_authentication_data$5","_services$idv$submiss","_services$idv","_services$onfido$subm","_services$onfido","_services$manual","user_country_code","matching_residence_data","r","idv_submission_left","onfido_submission_left","_services$idv2","_matching_residence_d3","_services$onfido2","_matching_residence_d4","submission_left","document_supported","documents_supported","modified_verification_data","_authentication_data$7","_authentication_data$8","_authentication_data$9","_authentication_data$10","_authentication_data$11","is_pending","is_rejected","is_expired","is_suspected","is_verified","useJurisdictionStatus","authenticationStatus","isSuccessAuthenticationStatus","poiStatus","_poiStatus$current","getVerificationStatus","jurisdiction","mt5_account_status","isPOIServiceStatus","_poiStatus$current2","_poiStatus$services","statuses","isStatusPending","is_failed","is_not_applicable","useMT5Deposit","ALPHA_2_TO_ALPHA_3","AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CW","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SX","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","XK","ALPHA_3_TO_ALPHA_2","AFG","ALA","ALB","DZA","ASM","AND","AGO","AIA","ATA","ATG","ARG","ARM","ABW","AUS","AUT","AZE","BHS","BHR","BGD","BRB","BLR","BEL","BLZ","BEN","BMU","BTN","BOL","BES","BIH","BWA","BVT","BRA","VGB","IOT","BRN","BGR","BFA","BDI","KHM","CMR","CAN","CPV","CYM","CAF","TCD","CHL","CHN","HKG","MAC","CXR","CCK","COL","COM","COG","COD","COK","CRI","CIV","HRV","CUB","CUW","CYP","CZE","DNK","DJI","DMA","DOM","ECU","EGY","SLV","GNQ","ERI","EST","ETH","FLK","FRO","FJI","FIN","FRA","GUF","PYF","ATF","GAB","GMB","GEO","DEU","GHA","GIB","GRC","GRL","GRD","GLP","GUM","GTM","GGY","GIN","GNB","GUY","HTI","HMD","VAT","HND","HUN","ISL","IND","IDN","IRN","IRQ","IRL","IMN","ISR","ITA","JAM","JPN","JEY","JOR","KAZ","KEN","KIR","PRK","KOR","KWT","KGZ","LAO","LVA","LBN","LSO","LBR","LBY","LIE","LTU","LUX","MKD","MDG","MWI","MYS","MDV","MLI","MLT","MHL","MTQ","MRT","MUS","MYT","MEX","FSM","MDA","MCO","MNG","MNE","MSR","MAR","MOZ","MMR","NAM","NRU","NPL","NLD","ANT","NCL","NZL","NIC","NER","NGA","NIU","NFK","MNP","NOR","OMN","PAK","PLW","PSE","PAN","PNG","PRY","PER","PHL","PCN","POL","PRT","PRI","QAT","REU","ROU","RUS","RWA","BLM","SHN","KNA","LCA","MAF","SPM","VCT","WSM","SMR","STP","SAU","SEN","SRB","SYC","SLE","SGP","SXM","SVK","SVN","SLB","SOM","ZAF","SGS","SSD","ESP","LKA","SDN","SUR","SJM","SWZ","SWE","CHE","SYR","TWN","TJK","TZA","THA","TLS","TGO","TKL","TON","TTO","TUN","TUR","TKM","TCA","TUV","UGA","UKR","ARE","GBR","USA","UMI","URY","UZB","VUT","VEN","VNM","VIR","WLF","ESH","YEM","ZMB","ZWE","XKX","country","_onfido_token_data$se","settings","countryCode","retry","onfido_token_data","ONFIDO_PHRASES","country_select","alert_dropdown","country_not_found","alert","another_doc","button_primary","search","accessibility","input_placeholder","label","title","cross_device_checklist","info","list_item_doc_multiple","list_item_doc_one","list_item_selfie","subtitle","cross_device_error_desktop","cross_device_error_restart","cross_device_intro","list_accessibility","list_item_finish","list_item_open_link","list_item_send_phone","cross_device_return","body","doc_confirmation","blur_detail","blur_title","crop_detail","crop_title","glare_detail","glare_title","no_doc_detail","no_doc_title","body_id","body_image_medium","body_image_poor","body_license","body_passport","body_permit","body_tax_letter","button_close","button_primary_redo","button_primary_upload","button_primary_upload_anyway","button_secondary_redo","button_zoom","image_accessibility","doc_select","button_id","button_id_detail","button_license","button_license_detail","button_passport","button_passport_detail","button_permit","button_permit_detail","extra_no_mobile","subtitle_poa","title_poa","doc_submit","button_link_upload","title_id_back","title_id_front","title_license_back","title_license_front","title_passport","title_permit_back","title_permit_front","error_unsupported_browser","subtitle_android","subtitle_ios","title_android","title_ios","generic","close_sdk_screen","dismiss_alert","back","close","errors","interrupted_flow_error","instruction","invalid_size","invalid_type","lazy_loading","multiple_faces","no_face","request_error","sms_failed","sms_overuse","unsupported_file","lazy_load_placeholder","loading","get_link","alert_wrong_number","button_copied","button_copy","button_submit","info_qr_how","info_qr_how_list_item_camera","info_qr_how_list_item_download","link_divider","link_qr","link_sms","link_url","loader_sending","number_field_input_placeholder","number_field_label","subtitle_qr","subtitle_sms","subtitle_url","url_field_label","linked_computer","list_item_desktop_open","list_item_sent_by_you","mobilePhrases","photo_upload","body_id_back","body_id_front","body_license_back","body_license_front","body_selfie","selfie_capture","camera_inactive","detail","camera_not_working","upload_guide","outro","permission_recovery","list_header_cam","list_item_action_cam","list_item_how_to_cam","subtitle_cam","title_cam","permission","body_cam","button_primary_cam","body_bank_statement","body_benefits_letter","body_bill","body_government_letter","button_take_photo","button_upload","title_selfie","detail_no_fallback","timeout","button_accessibility","frame_accessibility","selfie_confirmation","selfie_intro","list_item_face_forward","list_item_no_glasses","sms_sent","info_link_expire","info_link_window","link","subtitle_minutes","switch_phone","info_link_refresh","image_detail_blur_alt","image_detail_blur_label","image_detail_cutoff_alt","image_detail_cutoff_label","image_detail_glare_alt","image_detail_glare_label","image_detail_good_alt","image_detail_good_label","useOnfidoNotificationEvent","documentIds","category","event","args","documents","useOnfido","selectedDocument","isOnfidoLoading","setIsOnfidoLoading","isOnfidoInitialized","setIsOnfidoInitialized","onfidoInitializationError","setOnfidoInitializationError","hasSubmitted","setHasSubmitted","onfidoRef","onfidoContainerId","uuidv4","residenceList","serviceTokenError","isServiceTokenLoading","useOnfidoServiceToken","submitDocuments","supportedDocuments","_residenceList$find","onfidoResidence","_onfidoResidence$docu","_onfidoResidence$docu2","display_name","_onfidoResidence$docu3","onComplete","document_ids","key","_data$id","_data","initOnfido","i18NLanguage","LocalStorageUtils","getValue","onfidoCountryCode","window","Onfido","init","containerId","language","locale","toLowerCase","phrases","useModal","useMemoryHistory","steps","documentTypes","passport","some","doc","driving_licence","national_identity_card","hideCountrySelection","loadOnfidoSdkScript","getElementById","scriptNode","linkNode","href","rel","appendChild","addEventListener","useOtherCFDPlatformsDeposit","usePOA","modified_authentication_data","has_attempted_poa","is_need_submission","useSendbirdServiceToken","_sendbird_token_data$","staleTime","sendbird_token_data","sendbird","useServerTime","React","server_time_moment","time","server_time_utc","valueOf","regulation","all_available_mt5_accounts","activeAccount","isEU","filtered_available_accounts","filtered_mt5_accounts","available_account","created_account","filtered_data","added_accounts","filtered_non_added_accounts","existing_account","acc_account","added_account","sorted_data","areAllAccountsCreated","useMobileCarouselWalletsList","walletAccountsList","isCurrencyConfigLoading","staleWalletAccountsList","setStaleWalletAccountslist","staleIsLoading","setStaleIsLoading","useStatesList","states_list","_data$states_list","useTradingPlatformInvestorPasswordChange","useCreateMT5Account","mt5_new_account","useCreateOtherCFDAccount","useTradingPlatformInvestorPasswordReset","useTradingPlatformPasswordChange","useTransactions","_data$statement3","isFetching","setFilter","getNextPageParam","lastPage","pages","_lastPage$statement","statement","count","action_type","_data$statement","_data$statement2","display_amount","display_balance_after","balance_after","useInfiniteTransactions","_useInfiniteQuery","useInfiniteQuery","fetchNextPage","flatten_data","_data$pages","_data$pages2","flatMap","page","_page$statement","useTransferBetweenAccounts","useVerifyEmail","useTradingPlatformPasswordReset","useResetVirtualBalance","useIsDIELEnabled","kyc_auth_status_rest","kyc_auth_status","useClientCountry","website_status_rest","_data$website_status","clients_country","useAPI","initial_offset","getQueryKeys","pageParam","_lastPage","currency_to_icon_mapper","Demo","dark","light","USD","EUR","AUD","GBP","BTC","USDT","eUSDT","tUSDT","UST","LTC","USDC","useWalletsList","_balance_data$balance2","ui","client","useStore","is_dark_mode_on","is_authorize","useFetch","wallets_with_balance","_balance_data$balance","modified_wallets","wallet_gradient_class_name","wallet_icon","is_selected","is_demo","gradient_header_class","gradient_card_class","icon","sorted_wallets","has_wallet","useActiveWallet","_useFetch","account_type_data","added_wallets","sortedWallets","_account_type_data$ge","doughflow","crypto_currencies","currencies","fiat_currencies","available_currencies","non_virtual_wallets","available_wallets","isArray","useCFDAllAccounts","dxtrade_accounts_list","ctrader_accounts_list","cfd_accounts","useCFDDemoAccounts","useCFDRealAccounts","traders_hub","is_eu_user","is_maltainvest","useCFDAccounts","demo","real","useCashierLocked","_account_status$statu","useContentFlag","content_flag","is_low_risk_cr_non_eu","ContentFlag","LOW_RISK_CR_NON_EU","is_low_risk_cr_eu","LOW_RISK_CR_EU","is_high_risk_cr","HIGH_RISK_CR","is_cr_demo","CR_DEMO","is_eu_demo","EU_DEMO","is_eu_real","EU_REAL","useCurrentAccountDetails","useNeedAuthentication","is_authentication_needed","is_low_risk_cr_eu_real","useNeedFinancialAssessment","is_financial_account","is_financial_information_incomplete","is_trading_experience_incomplete","useDepositLocked","is_deposit_lock","landing_company_shortcode","is_account_to_be_closed_by_residence","is_need_authentication","is_tnc_needed","useIsTNCNeeded","is_need_financial_assessment","useDuplicateDOBPhone","is_duplicate_dob_phone","useExchangeRate","subscribeToExchangeRate","unsubscribeFromExchangeRate","unsubscribeFromAllExchangeRates","handleSubscription","unsubscribeAll","getAccountIcon","cfd_type","useExistingCFDAccounts","combined_cfd_mt5_accounts","mt5_rest","_useFetch2","dxtrade_rest","_mt5$mt5_login_list","_combined_cfd_mt5_acc","cfd","_combined_cfd_mt5_acc2","_combined_cfd_mt5_acc3","sub_title","_combined_cfd_mt5_acc4","transfer_icon","_dxtrade$trading_plat","every","useFeatureFlags","feature_flags","_feature_flags$data","flags","useFiatAccountList","useGetPasskeysList","passkeys_list","fetchPasskeysList","is_passkeys_list_loading","setIsPasskeysListLoading","passkeys_list_error","setPasskeysListError","refetchPasskeysList","e","usePhoneVerificationAnalytics","trackPhoneVerificationEvents","Analytics","trackEvent","form_name","useRequestPhoneNumberOTP","email_otp_error","is_email_verified","error_message","setErrorMessage","is_disabled_request_button","setIsDisabledRequestButton","carrier","setCarrier","verification_code","phone_number_verification","phone_number_verification_code","updateSettings","formatError","getOtherCarrier","VERIFICATION_SERVICES","SMS","getCarriers","WHATSAPP","getCurrentCarrier","errorCases","PhoneNumberTaken","PhoneNumberVerificationSuspended","InvalidPhone","getUseRequestPhoneNumberOTPErrorMessage","phone_number_challenge","requestOnWhatsApp","email_code","requestOnSMS","setUsersPhoneNumber","err","action","subform_name","error_code","sendEmailOTPVerification","useHasCryptoCurrency","useHasFiatCurrency","useHasP2PSupportedCurrencies","_p2p_settings$support","active_accounts","_useP2PSettings","useP2PSettings","p2p_settings","real_account_currencies_list","has_p2p_supported_currencies","supported_currencies","useHasUSDCurrency","status_list","_status_list$includes","useIsClientHighRiskForMT5","financial_available_accounts","synthetic_available_accounts","useIsSystemMaintenance","_account_status$cashi","validation","landing_company_details","modified_landing_company_details","useLocalStorageData","fallback_value","_getLocalStorage","getLocalStorage","JSON","stringify","clearData","removeItem","useMT5SVGEligibleToMigrate","show_eu_related_content","svg_accounts_to_migrate","Jurisdiction","SVG","eligible_to_migrate","has_svg_accounts_to_migrate","no_of_svg_accounts_to_migrate","is_eligible_for_svg_to_bvi_migration","_account$eligible_to_","values","BVI","is_eligible_for_svg_to_vanuatu_migration","_account$eligible_to_2","VANUATU","getEligibleAccountToMigrate","eligible_account_to_migrate_label","getFormattedJurisdictionCode","eligible_svg_to_bvi_derived_accounts","_account$eligible_to_3","synthetic","eligible_svg_to_bvi_financial_accounts","_account$eligible_to_4","eligible_svg_to_vanuatu_derived_accounts","_account$eligible_to_5","eligible_svg_to_vanuatu_financial_accounts","_account$eligible_to_6","has_derived_mt5_to_migrate","has_derived_and_financial_mt5","useNeedPOI","_client$account_statu","p2p_advert_info","is_buy","is_sell","useP2PAdvertList","config","_lastPage$p2p_advert_","p2p_advert_list","list","_page$p2p_advert_list","advert","is_floating","rate_type","created_time","loadMoreAdverts","type_to_icon_mapper","bank","other","ewallet","useP2PAdvertiserPaymentMethods","_useRequest","useRequest","p2p_advertiser_payment_methods","advertiser_payment_method","create","delete","useP2POrderList","useP2PCompletedOrdersNotification","isSubscribed","getAccountStatusData","notifications","active","_data$p2p_order_list","_data$p2p_order_list2","_notifications$p2p_co","p2p_order_list","p2p_completed_orders","p2p_order_info","order","splice","unshift","completion_time","p2p_country_list","local_currency","_exchange_rates$USD","useP2PPaymentMethods","p2p_payment_methods","payment_method","fields","field_key","usePlatformDemoAccount","usePlatformRealAccounts","usePlatformAccounts","useRealSTPAccount","sub_account_type","passkey_registration_error","setPasskeyRegistrationError","public_key","setPublicKey","createPasskey","_passkeys_register_re","authenticator_response","startRegistration","passkeys_register_response","passkeys_register","publicKeyCredential","properties","startPasskeyRegistration","_passkeys_register_op","passkeys_register_options_response","passkeys_register_options","publicKey","useSendOTPVerificationCode","_account_settings$pho","_account_settings$pho2","phone_otp_error_message","setPhoneOtpErrorMessage","show_cool_down_period_modal","setShowCoolDownPeriodModal","setIsForcedToExitPnv","phone_otp_error","is_phone_number_verified","account_settings","refetch","challenge_attempts_remaining","verify_attempts_remaining","formatOtpError","errorHandlers","PhoneCodeExpired","phoneOTPErrorMessage","InvalidOTP","EmailCodeExpired","emailOTPErrorMessage","InvalidToken","NoAttemptsLeft","errorCode","sendPhoneOTPVerification","otp","passkey_removing_error","setPasskeyRemovingError","removePasskey","passkeys_revoke_response","passkeys_revoke","passkey_renaming_error","setPasskeyRenamingError","renamePasskey","passkey_id","new_passkey_name","passkeys_rename_response","passkeys_rename","useStoreHasAccountDeposited","_statement$count","_statement$transactio","hasDeposited","tx","hasTransferred","isLoaded","useRealTotalAssetCurrency","current_fiat_currency","default_currency","platform_real_accounts","non_crypto_accounts","currency_if_is_crypto","total_assets_real_currency","total","new_base","new_target","new_rate","active_wallet","trading_apps_icon","is_cfd_accounts_loaded","modified_transfer_accounts","_data$accounts","all_linked_cfd_accounts","_getConfig2","_getConfig3","active_wallet_icon","parseFloat","Number","toFixed","display_currency_code","demo_account","trading_accounts","_all_linked_cfd_accou","_mt5_accounts$find","cfd_icon","cfd_account","_cfd_account$loginid","gradient_class","mt5_market_type","mt5_account","_mt5_account$loginid","wallet_accounts","available_wallet","modified_active_wallet","trading_accounts_display_prefixes","landing_company_display_shortcodes","svg","malta","current_wallet","demo_platform_account","real_platform_accounts","getTradingAccountName","mock_transactions","to","app_id","transaction_id","transaction_time","el","getTransferAccountName","other_account","account_name","account_currency","getWalletCurrencyIcon","_transaction$to","_transaction$from","_transaction$to2","_other_account$curren","other_loginid","icon_type","useWalletTransfer","is_accounts_loading","from_account","setFromAccount","to_account","setToAccount","to_account_list","fromEntries","entries","transfer_accounts","useIsSelectedMT5AccountCreated","modules","selected_account_type","updateMT5AccountDetails","fetchData","jurisdiction_selected_shortcode","product","selected_account","is_default_jurisdiction","is_selected_MT5_account_created","existing_account_status","MT5_ACCOUNT_STATUS","FAILED","PENDING","NEEDS_VERIFICATION","available_account_to_create","useGetStatus","common","mf_account_status","kyc_status","useGetMFAccountStatus","CFD_PLATFORMS","MT5","status_badge","client_kyc_status","useIsPhoneNumberVerified","verified","is_from_request_phone_number_otp","should_show_phone_number_otp","next_email_otp_request_timer","setNextEmailOtpRequestTimer","next_phone_otp_request_timer","setNextPhoneOtpRequestTimer","is_request_button_disabled","setIsRequestButtonDisabled","isMounted","useIsMounted","next_email_attempt","request_in_milliseconds","dayjs","next_request","Math","round","next_attempt","countdown","setInterval","is_email_otp_timer_loading","is_phone_otp_timer_loading","usePhoneNumberVerificationSessionTimer","_account_settings$pho3","session_timer","setSessionTimer","formatted_time","setFormattedTime","should_show_session_timeout_modal","setShouldShowSessionTimeoutModal","formatTime","totalSeconds","minutes","floor","seconds","formatted_minutes","String","padStart","formatted_seconds","session_timestamp","useTradingPlatformStatus","trading_platform_status","getPlatformStatus","_data$find","useGetWithdrawalLimitsDetails","account_limits","withdrawal_limit_details","withdrawal_title","getWithdrawalTitle","num_of_days","withdrawal_info_message","getWithdrawalInfoMessage","withdrawal_amount","redirect_to","isHubRedirectionEnabled","useIsHubRedirectionEnabled","URLSearchParams","location","get","redirect_url","mobile_redirect_url","base_url","routes","personal_details","useAccountTransferVisible","has_malta_invest_account","useHasMaltaInvestAccount","_accounts","increment","setCount","is_running","setIsRunning","pause","old","start","stop","_data$crypto_config","allowToMakeSubscription","sorted_transactions","has_transactions","slice","useCurrentCurrencyConfig","resend","useDepositFiatAddress","current_language","dark_mode","deposit_iframe_url","cashierUrl","URL","searchParams","set","fileReadErrorMessage","useFileUploader","uploader_instance","DocumentUploader","connection","getSocket","files","onError","is_any_file_error","file_error","compressed_files","compressImageFiles","processed_files","readFiles","_authentication$ident","_authentication$ident2","_authentication$ident3","_authentication$docum","is_logged_in","updateAccountStatus","pathname","trade","onfido_status","manual_status","STATUS","need_poa_resubmission","poa_pending","poa_not_submitted","poi_verified_by_onfido_or_manual","poi_pending_by_onfido_or_manual","poi_not_submitted_by_onfido_or_manual","ACCOUNT_BADGE_STATUS","valid_tin","required_tin","useGetPhoneNumberList","_data$phone_settings","_data$phone_settings2","_data$phone_settings3","_data$phone_settings4","_data$phone_settings5","_data$phone_settings6","isPhoneSettingLoading","no_of_available_carriers","phone_settings","carriers","is_global_sms_available","is_global_whatsapp_available","is_carriers_supported","countries","getSelectedPhoneCode","calling_country_code","getSelectedCountryList","phone_code","getShortCodeSelected","formatted_countries_list","short_code","legacy_core_countries_list","_countries$map","selected_phone_code","selected_country_list","updatePhoneSettings","short_code_selected","useHasActiveRealAccount","useHasSetCurrency","has_active_real_account","useHasSvgAccount","useIsLiveChatWidgetAvailable","is_livechat_available","setIsLivechatAvailable","_window$LiveChatWidge","LiveChatWidget","on","state","availability","useIsP2PEnabled","email","setIsP2PEnabled","is_p2p_enabled","toLocaleLowerCase","domain","hostname","deriv_urls","DERIV_HOST_NAME","Cookies","secure","sameSite","is_p2p_enabled_loading","is_p2p_enabled_success","useIsRealAccountNeededForCashier","is_real","has_svg_account","has_maltainvest_account","useMFAccountStatus","is_eu","useNotificationEvent","notification_event","useOnrampVisible","_website_status$curre","_website_status$curre2","ramp","useP2PNotificationCount","_p2p_settings$loginid","setP2PSettings","parse","getItem","onStorageChanged","removeEventListener","notification","is_seen","context","useContext","P2PSettingsContext","_data$paymentagent_li","paymentagent_list","usePaymentAgentTransferVisible","is_websocket_authorized","setIsWebSocketAuthorized","wait","console","checkAuthorize","is_authenticated_payment_agent","_data$residence_list","Infinity","useResidenceSelfDeclaration","_residence_list$find","is_residence_self_declaration_required","residence_item","account_opening_self_declaration_required","useStoreLinkedWalletsAccounts","wallets_list","useStoreWalletAccountsList","linked_accounts","derivez","linked_to_account","XRP","_Object$keys","_accounts2","fiat_or_crypto","dtrade_balance","is_dtrader_account_disabled","icons","gradients","header","card","useTinValidations","_data$tin_validations","tin_validation_config","tin_validations","counter","useCountdown","sent_count","setSentCount","request_email","verify_email","sendPhoneNumberVerifyEmail","is_loading","is_counter_running","has_been_sent","override","merge","mock","common_store_error","app_routing_history","redirect_label","should_clear_error_on_click","should_show_refresh","redirectOnClick","jest","fn","is_mock","active_account_landing_company","ctrader_trading_platform_available_accounts","getSelfExclusion","p2p_poa_required","history","timestamp","income","ownership","requests","is_deposit_suspended","is_withdrawal_suspended","can_change_fiat_currency","currencies_list","has_tool_tip","current_currency_type","current_landing_company","support_professional_client","cfd_score","ctrader_total_balance","email_address","setCFDScore","getLimits","getTwoFAStatus","has_fiat","has_logged_out","has_cookie_account","has_restricted_mt5_account","initialized_broadcast","is_trading_platform_available_account_loaded","setIsTradingPlatformAvailableAccountLoaded","is_account_setting_loaded","is_dxtrade_allowed","is_eu_country","has_residence","is_financial_assessment_needed","is_low_risk","is_identity_verification_needed","is_client_store_initialized","is_landing_company_loaded","is_logging_in","is_mt5_account_list_updated","is_proof_of_ownership_enabled","is_poa_expired","is_populating_dxtrade_account_list","is_populating_ctrader_account_list","is_single_currency","is_switching","is_high_risk","is_withdrawal_lock","is_populating_account_list","local_currency_config","decimal_places","pre_switch_broadcast","is_svg","is_p2p_available","responseMt5LoginList","responseTradingPlatformAccountsList","setFinancialAndTradingAssessment","standpoint","maltainvest","payment_agent_withdraw","payment_withdraw","reset_password","system_email_change","trading_platform_dxtrade_password_reset","trading_platform_mt5_password_reset","prevent_redirect_to_hub","setPreventRedirectToHub","fetchStatesList","setVerificationCode","authentication_status","document_status","identity_status","getToken","setPhoneSettings","logout","should_allow_authentication","should_allow_poinc_authentication","available_crypto_currencies","selectCurrency","setAccountStatus","setBalanceOtherAccounts","setInitialized","setIsClientStoreInitialized","setLogout","setP2pAdvertiserInfo","setPreSwitchAccount","social_identity_provider","switched","switch_broadcast","switchEndSignal","isEligibleForMoreRealMt5","isEligibleForMoreDemoMt5Svg","updateMT5Status","fetchResidenceList","should_restrict_bvi_account_creation","should_restrict_vanuatu_account_creation","fetchAccountSettings","setAccountSettings","upgradeable_landing_companies","is_populating_mt5_account_list","landing_companies","upgradeable_currencies","getChangeableFields","is_mt5_allowed","mt5_disabled_signup_types","dxtrade_disabled_signup_types","dxtrade_accounts_list_error","dxtrade_status","mt5_status","is_fully_authenticated","resetVirtualBalance","has_enabled_two_fa","setTwoFAStatus","has_changed_two_fa","setTwoFAChangedStatus","real_account_creation_unlock_date","has_any_real_account","setPrevAccountType","prev_account_type","setLoginInformation","setLoginId","resetLocalStorageValues","setIsAlreadyAttempted","is_already_attempted","is_bot_allowed","account_open_date","setAccounts","updateMt5LoginList","should_show_eu_error","is_options_blocked","real_account_signup_form_data","real_account_signup_form_step","setRealAccountSignupFormData","setRealAccountSignupFormStep","wallet_migration_state","startWalletMigration","resetWalletMigration","is_wallet_migration_request_is_in_progress","is_passkey_supported","is_phone_number_verification_enabled","should_show_passkey_notification","setIsPasskeySupported","setIsPhoneNumberVerificationEnabled","setPasskeysStatusToCookie","setShouldShowPasskeyNotification","fetchShouldShowPasskeyNotification","virtual_account_loginid","is_cr_account","is_mf_account","is_tradershub_tracking","setTradersHubTracking","account_time_of_closure","should_show_trustpilot_notification","isCurrentLanguage","is_from_derivgo","is_from_outside_cashier","is_from_derivp2p","is_from_tradershub_os","is_socket_opened","has_error","routeBackInApp","routeTo","changeCurrentLanguage","changeSelectedLanguage","resetServicesError","is_network_online","network_status","services_error","setSelectedContractType","setServicesError","showError","is_language_changing","setAppstorePlatform","advanced_duration_unit","advanced_expiry_type","account_switcher_disabled_message","app_contents_scroll_ref","current_focus","duration_t","getDurationFromUnit","is_account_settings_visible","is_account_switcher_disabled","is_advanced_duration","is_history_tab_active","is_cashier_visible","is_redirected_from_email","is_wallet_modal_visible","is_chart_layout_default","is_chart_countdown_visible","is_closing_create_real_account_modal","is_forced_to_exit_pnv","is_phone_verification_completed","is_from_signup_account","is_from_success_deposit_modal","is_language_settings_modal_on","is_desktop","is_app_disabled","has_only_forward_starting_contracts","header_extension","is_link_expired_modal_visible","is_mobile","is_tablet","is_mobile_language_menu_open","is_positions_drawer_on","is_reports_visible","is_verification_submitted","is_reset_email_modal_visible","is_reset_password_modal_visible","is_route_modal_on","is_services_error_visible","is_trading_assessment_for_existing_user_enabled","is_wallets_onboarding_tour_guide_visible","setIsPhoneVerificationCompleted","setRedirectFromEmail","setShouldShowPhoneNumberOTP","disableApp","enableApp","setCurrentFocus","toggleAccountsDialog","toggleAccountSettings","toggleCashier","setDarkMode","setReportsTabIndex","has_real_account_signup_ended","real_account_signup_target","real_account_signup","active_modal_index","previous_currency","current_currency","success_message","resetRealAccountSignupParams","notification_messages_ui","onChangeUiStore","openPositionsDrawer","openRealAccountSignup","setChartCountdown","setIsWalletModalVisible","setHasOnlyForwardingContracts","setIsClosingCreateRealAccountModal","setIsFromSuccessDepositModal","setIsFromSignupAccount","setMobileLanguageMenuOpen","setRealAccountSignupEnd","setPromptHandler","setPurchaseState","setAppContentsScrollRef","shouldNavigateAfterChooseCrypto","simple_duration_unit","toggleHistoryTab","toggleLanguageSettingsModal","togglePositionsDrawer","toggleResetEmailModal","toggleResetPasswordModal","toggleLinkExpiredModal","toggleServicesErrorModal","toggleSetCurrencyModal","addToast","removeToast","resetPurchaseStates","reports_route_tab_index","should_show_cancellation_warning","should_show_one_time_deposit_modal","should_show_account_success_modal","should_trigger_tour_guide","toggleCancellationWarning","setShouldShowOneTimeDepositModal","toggleAccountSuccessModal","toggleReports","setSubSectionIndex","sub_section_index","toggleReadyToDepositModal","is_ready_to_deposit_modal_visible","is_real_acc_signup_on","is_need_real_account_for_cashier_modal_visible","is_verification_modal_visible","is_mf_verification_pending_modal_visible","is_mt5_migration_modal_enabled","is_mt5_migration_modal_open","toggleNeedRealAccountForCashierModal","is_switch_to_deriv_account_modal_visible","openSwitchToRealAccountModal","is_top_up_virtual_open","is_top_up_virtual_in_progress","is_top_up_virtual_success","closeTopUpModal","closeSuccessTopUpModal","is_cfd_reset_password_modal_enabled","setCFDPasswordResetModal","openDerivRealAccountNeededModal","populateHeaderExtensions","populateSettingsExtensions","purchase_states","setShouldShowCooldownModal","setIsVerificationModalVisible","setIsVerificationSubmitted","setShouldTriggerTourGuide","populateFooterExtensions","openAccountNeededModal","is_accounts_switcher_on","openTopUpModal","toggleShouldShowRealAccountsList","is_reset_trading_password_modal_visible","setResetTradingPasswordModalOpen","setIsMFVericationPendingModal","setMT5MigrationModalEnabled","toggleMT5MigrationModal","vanilla_trade_type","is_additional_kyc_info_modal_open","isUrlUnavailableModalVisible","setAccountSwitcherDisabledMessage","toggleUrlUnavailableModal","is_set_currency_modal_visible","should_show_deposit_now_or_later_modal","setShouldShowDepositNowOrLaterModal","should_show_crypto_transaction_processing_modal","setShouldShowCryptoTransactionProcessingModal","is_trading_disabled_by_residence_modal_visible","setIsTradingDisabledByResidenceModal","should_show_same_dob_phone_modal","setShouldShowSameDOBPhoneModal","field_ref_to_focus","setFieldRefToFocus","setHashedValue","url_hashed_values","is_tnc_update_modal_open","toggleTncUpdateModal","setIsWalletsOnboardingTourGuideVisible","getAccount","closeModal","available_cfd_accounts","CFDs_restricted_countries","openModal","is_onboarding_visited","is_first_time_visit","setIsOnboardingVisited","setIsFirstTimeVisit","selectRegion","setSelectedAccount","is_real_wallets_upgrade_on","is_verification_docs_list_modal_visible","toggleWalletsUpgrade","platform_real_balance","cfd_demo_balance","platform_demo_balance","cfd_real_balance","closeAccountTransferModal","toggleRegulatorsCompareModal","is_demo_low_risk","financial_restricted_countries","no_CR_account","no_MF_account","modal_data","active_modal","setTogglePlatformType","toggleAccountTransferModal","selectAccountType","is_wallet_migration_failed","setWalletsMigrationFailedPopup","selected_platform_type","available_platforms","selected_region","getExistingAccounts","available_dxtrade_accounts","active_modal_tab","setWalletModalActiveTab","active_modal_wallet_id","setWalletModalActiveWalletID","available_ctrader_accounts","startTrade","showTopUpModal","is_regulators_compare_modal_visible","is_cfd_restricted_country","setIsCFDRestrictedCountry","is_financial_restricted_country","setIsFinancialRestrictedCountry","is_setup_real_account_or_go_to_demo_modal_visible","setIsSetupRealAccountOrGoToDemoModalVisible","setVerificationModalOpen","selected_jurisdiction_kyc_status","setSelectedJurisdictionKYCStatus","getDefaultJurisdiction","getMT5AccountKYCStatus","addNotificationMessage","addNotificationMessageByKey","addTradeNotification","client_notifications","is_notifications_empty","is_notifications_visible","filterNotificationMessages","handleCurrencyRemovalNotification","p2p_advertiser_info","refreshNotifications","removeAllNotificationMessages","removeNotifications","removeNotificationByKey","removeNotificationMessage","removeNotificationMessageByKey","removeTradeNotifications","setP2POrderProps","showAccountSwitchToRealNotification","showPOAAddressMismatchSuccessNotification","showPOAAddressMismatchFailureNotification","setP2PRedirectTo","setShouldShowPopups","toggleNotificationsModal","trade_notifications","portfolio","active_positions","active_positions_count","all_positions","barriers","getPositionById","is_active_empty","is_accumulator","is_multiplier","is_turbos","onBuyResponse","onHoverPosition","onClickCancel","onClickSell","onMount","onUnmount","open_accu_contract","positions","removePositionById","setContractType","setAddNotificationBannerCallback","contract_trade","accountSwitchListener","accu_barriers_timeout_id","accumulator_barriers_data","accumulator_contract_barriers_data","addContract","chart_type","clearAccumulatorBarriersData","clearError","contracts","filtered_contracts","getContractById","granularity","has_crossed_accu_barriers","last_contract","markers_array","prev_chart_type","prev_contract","prev_granularity","removeContract","savePreviousChartMode","setNewAccumulatorBarriersData","updateAccumulatorBarriersData","updateChartType","updateGranularity","updateProposal","previous_accumulator_barriers_data","is_barriers_loading","setBarriersLoadingState","restorePreviousBarriersIfNeeded","setMT5MigrationError","migrated_mt5_accounts","mt5_migration_error","enableCFDPasswordModal","is_sent_email_modal_enabled","setSentEmailModalStatus","submitMt5Password","setJurisdictionSelectedShortcode","setAccountType","setMigratedMT5Accounts","openContractTypeFilter","closedContractTypeFilter","timeFilter","customTimeRangeFilter","setClosedContractTypeFilter","setOpenContractTypeFilter","setTimeFilter","setCustomTimeRangeFilter","markets","favoriteIndicators","favoriteSymbols","removeFavoriteIndicator","removeFavoriteSymbol","setFavoriteIndicators","setFavoriteSymbols","accumulator_range_list","active_symbols","barrier_1","barrier_2","barrier_choices","barrier_count","barrier_pipsize","basis","basis_list","cached_multiplier_cancellation_list","cancellation_duration","cancellation_range_list","clearContractPurchaseToastBox","clearPurchaseInfo","clearV2ParamsInitialValues","contract_expiry_type","contract_purchase_toast_box","contract_start_type","contract_type","contract_types_list","contract_types_list_v2","duration","duration_min_max","duration_unit","duration_units_list","expiry_date","expiry_epoch","expiry_type","form_components","growth_rate","has_cancellation","has_equals_only","has_open_accu_contract","has_stop_loss","has_take_profit","is_dtrader_v2","is_dtrader_v2_mobile","is_dtrader_v2_desktop","is_equal","is_mobile_digit_view_selected","is_purchase_enabled","is_trade_enabled","is_trade_enabled_v2","is_trade_params_expanded","is_touch","is_vanilla","is_vanilla_fx","last_digit","market_close_times","market_open_times","maximum_payout","maximum_ticks","multiplier","multiplier_range_list","non_available_contract_types_list","onChange","onChangeMultiple","onHoverPurchase","onPurchase","onPurchaseV2","previous_symbol","proposal_info","purchase_info","payout_choices","requestProposal","resetPreviousSymbol","setIsTradeParamsExpanded","setTradeTypeTab","setV2ParamsInitialValues","setPayoutPerPoint","setDefaultStake","stake_boundary","start_date","stop_loss","symbol","take_profit","tick_size_barrier_percentage","ticks_history_stats","ticks_stayed_in","last_tick_epoch","trade_type_tab","trade_types","validation_errors","validation_params","v2_params_initial_values","unmount","cleanup","gtm","is_gtm_applicable","visitorId","common_variables","theme","loggedIn","accountSwitcherListener","pushDataLayer","pushTransactionData","eventHandler","setLoginFlag","pushwoosh","contract_replay","contract_store","accumulator_previous_spot_time","barriers_array","contract_config","contract_info","contract_update","contract_update_history","digits_info","display_status","getContractsArray","is_digit_contract","is_ended","marker","epoch_array","price_array","chart_state","chartStateChange","is_chart_loading","is_forward_starting","is_market_closed","is_sell_requested","removeErrorMessage","removeAccountSwitcherListener","setAccountSwitcherListener","chart_barrier_store","setActiveSymbols"],"sourceRoot":""}