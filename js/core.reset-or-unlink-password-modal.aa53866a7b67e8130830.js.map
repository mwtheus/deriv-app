{"version":3,"file":"js/core.reset-or-unlink-password-modal.aa53866a7b67e8130830.js","mappings":"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","sources":["webpack:///./App/Containers/LinkExpiredModal/email-resent.tsx","webpack:///./App/Containers/LinkExpiredModal/link-expired-modal.tsx","webpack:///./App/Containers/ResetPasswordModal/reset-password-modal.tsx","webpack:///./App/Containers/ResetPasswordModal/index.ts","webpack:///./App/Containers/ResetOrUnlinkPasswordModal/reset-or-unlink-password-modal.jsx","webpack:///./App/Containers/ResetOrUnlinkPasswordModal/index.js","webpack:///./App/Containers/UnlinkPasswordModal/unlink-password-modal.jsx","webpack:///./App/Containers/UnlinkPasswordModal/index.js","webpack:///../../hooks/src/useCountdown.ts","webpack:///../../hooks/src/useVerifyEmail.ts"],"sourcesContent":["import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\nconst EmailResent = () => {\n    return (\n        <div className='link-expired__spaced-container__content link-expired__spaced-container__email_sent'>\n            <Icon data_testid='dt_email-resent' icon='IcEmailVerificationResent' size={128} />\n            <Text as='p' size='s' align='center'>\n                <Localize i18n_default_text=\"<0>We've sent you an email.</0>\" components={[<strong key={0} />]} />\n            </Text>\n            <Text as='p' size='s' align='center'>\n                <Localize i18n_default_text='Please click on the link in the email to reset your password.' />\n            </Text>\n        </div>\n    );\n};\n\nexport default EmailResent;\n","import classNames from 'classnames';\nimport { useFormik } from 'formik';\nimport React from 'react';\nimport { Dialog, FormSubmitButton, Input, Text } from '@deriv/components';\nimport { useVerifyEmail } from '@deriv/hooks';\nimport { getErrorMessages, validEmail } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport EmailResent from './email-resent';\n\nconst LinkExpiredModal = observer(() => {\n    const { ui, client } = useStore();\n    const { setPreventRedirectToHub } = client;\n    const { enableApp, disableApp, is_link_expired_modal_visible: is_visible, toggleLinkExpiredModal } = ui;\n\n    const { send, error: verify_error, data: verify_data } = useVerifyEmail('reset_password');\n    const [is_email_sent, setIsEmailSent] = React.useState(false);\n\n    const formik = useFormik({\n        initialValues: { email: '' },\n        initialStatus: { error_msg: '' },\n        validate: values => (!validEmail(values.email) ? { email: getErrorMessages().email() } : {}),\n        onSubmit: values => send(values.email),\n    });\n    const {\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        resetForm,\n        setStatus,\n        setSubmitting,\n        status,\n        touched,\n        values,\n    } = formik;\n\n    React.useEffect(() => {\n        if (verify_data) {\n            setSubmitting(false);\n            setIsEmailSent(true);\n        }\n    }, [verify_data, setSubmitting]);\n\n    React.useEffect(() => {\n        if (verify_error && typeof verify_error === 'object' && 'message' in verify_error) {\n            resetForm();\n            setStatus({ error_msg: verify_error?.message });\n        }\n    }, [verify_error, resetForm, setStatus]);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <Dialog\n                className={classNames('link-expired__spaced-container', {\n                    'link-expired__spaced-container__fullscreen': is_email_sent,\n                })}\n                is_visible={is_visible}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                title={is_email_sent ? '' : localize('Link expired')}\n                has_close_icon\n                onConfirm={() => {\n                    toggleLinkExpiredModal(false);\n                    setPreventRedirectToHub(false);\n                }}\n            >\n                <div className='link-expired'>\n                    {is_email_sent ? (\n                        <EmailResent />\n                    ) : (\n                        <div className='link-expired__spaced-container__content'>\n                            <Text as='p' size='xs' align='left'>\n                                <Localize\n                                    i18n_default_text='The link you clicked has expired. Ensure to click the link in the latest email in your inbox. Alternatively, enter your email below and click <0>Resend email</0> for a new link.'\n                                    components={[<strong key={0} />]}\n                                />\n                            </Text>\n                            <fieldset className='email-platform__content__fieldset'>\n                                <Input\n                                    className='email-input'\n                                    data-lpignore='true'\n                                    type='text'\n                                    name='email'\n                                    id='email'\n                                    onChange={e => {\n                                        setStatus({ error_msg: '' });\n                                        handleChange(e);\n                                    }}\n                                    disabled={isSubmitting}\n                                    onBlur={handleBlur}\n                                    error={(touched.email && errors.email) || status.error_msg}\n                                    label={localize('Email address')}\n                                    value={values.email}\n                                />\n                            </fieldset>\n                            <FormSubmitButton\n                                has_cancel\n                                cancel_label={localize('Close')}\n                                onCancel={() => {\n                                    toggleLinkExpiredModal(false);\n                                    setPreventRedirectToHub(false);\n                                }}\n                                is_disabled={!values.email || !!errors.email || isSubmitting}\n                                is_loading={isSubmitting}\n                                label={localize('Resend email')}\n                            />\n                        </div>\n                    )}\n                </div>\n            </Dialog>\n        </form>\n    );\n});\n\nexport default LinkExpiredModal;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Formik, Form, FormikHelpers, FormikErrors } from 'formik';\nimport { Button, Dialog, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport { redirectToLogin, validPassword, validLength, getErrorMessages, WS, removeActionParam } from '@deriv/shared';\nimport { requestOidcAuthentication } from '@deriv-com/auth-client';\nimport { getLanguage, localize, Localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { TSocketError, TSocketRequest, TSocketResponse } from '@deriv/api/types';\nimport { useDevice } from '@deriv-com/ui';\nimport { useTMB } from '@deriv/hooks';\n\ntype TResetPasswordModalValues = {\n    password: string;\n};\n\nconst ResetPasswordModal = observer(() => {\n    const { ui, client } = useStore();\n    const { logout: logoutClient, verification_code, setVerificationCode, setPreventRedirectToHub } = client;\n    const is_deriv_com = /deriv\\.(com)/.test(window.location.hostname) || /localhost:8443/.test(window.location.host);\n    const {\n        disableApp,\n        enableApp,\n        is_loading,\n        is_reset_password_modal_visible: is_visible,\n        toggleResetPasswordModal,\n        toggleLinkExpiredModal,\n    } = ui;\n    const { isTmbEnabled } = useTMB();\n\n    const { isDesktop } = useDevice();\n\n    const onResetComplete = async (\n        error: TSocketError<'reset_password'>['error'] | null,\n        actions: FormikHelpers<TResetPasswordModalValues>\n    ) => {\n        const is_tmb_enabled = await isTmbEnabled();\n        actions.setSubmitting(false);\n        const error_code = error?.code;\n        // Error would be returned on invalid token (and the like) cases.\n        if (error_code) {\n            if (error_code === 'InvalidToken') {\n                toggleResetPasswordModal(false);\n                toggleLinkExpiredModal(true);\n            } else {\n                actions.resetForm({\n                    values: {\n                        password: '',\n                    },\n                });\n                actions.setStatus({ error_msg: error?.message });\n            }\n            return;\n        }\n        setPreventRedirectToHub(false);\n        actions.setStatus({ reset_complete: true });\n        logoutClient().then(() => {\n            if (is_deriv_com && !is_tmb_enabled) {\n                try {\n                    requestOidcAuthentication({\n                        redirectCallbackUri: `${window.location.origin}/callback`,\n                    }).catch(err => {\n                        // eslint-disable-next-line no-console\n                        console.error(err);\n                    });\n                } catch (err) {\n                    // eslint-disable-next-line no-console\n                    console.error(err);\n                }\n            } else {\n                redirectToLogin(false, getLanguage());\n            }\n        });\n    };\n\n    const handleSubmit = (values: TResetPasswordModalValues, actions: FormikHelpers<TResetPasswordModalValues>) => {\n        const api_request: TSocketRequest<'reset_password'> = {\n            reset_password: 1,\n            new_password: values.password,\n            verification_code: verification_code.reset_password,\n        };\n        WS.resetPassword(api_request).then(\n            async (response: TSocketResponse<'reset_password'> & TSocketError<'reset_password'>) => {\n                if (response.error) {\n                    onResetComplete(response?.error, actions);\n                } else {\n                    onResetComplete(null, actions);\n                }\n                setVerificationCode('', 'reset_password');\n            }\n        );\n    };\n\n    const validateReset = (values: TResetPasswordModalValues) => {\n        const errors: FormikErrors<TResetPasswordModalValues> = {};\n\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        }\n        return errors;\n    };\n\n    const reset_initial_values: TResetPasswordModalValues = { password: '' };\n\n    const closeResetPasswordModal = () => {\n        setPreventRedirectToHub(false);\n        toggleResetPasswordModal(false);\n        removeActionParam('reset_password');\n    };\n\n    return (\n        <Formik\n            initialValues={reset_initial_values}\n            initialStatus={{ reset_complete: false, error_msg: '' }}\n            validate={validateReset}\n            onSubmit={handleSubmit}\n        >\n            {({ handleBlur, errors, values, touched, isSubmitting, handleChange, status }) => (\n                <Dialog\n                    className='reset-password__spaced-container'\n                    is_visible={is_visible}\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    is_loading={is_loading}\n                    dismissable={status.error_msg}\n                    onConfirm={closeResetPasswordModal}\n                    title={localize('Reset your password')}\n                    has_close_icon\n                    is_closed_on_cancel={false}\n                >\n                    <div className='reset-password'>\n                        <Form>\n                            {status.reset_complete ? (\n                                <div className='reset-password__password-set'>\n                                    <Text align='center' as='p' weight='bold' className='reset-password__heading'>\n                                        <Localize i18n_default_text='Your password has been changed' />\n                                    </Text>\n                                    <Text align='center' as='p' size='xxs' className='reset-password__subtext'>\n                                        <Localize i18n_default_text='We will now redirect you to the login page.' />\n                                    </Text>\n                                </div>\n                            ) : (\n                                <div className='reset-password__password-selection'>\n                                    <fieldset className='reset-password__fieldset'>\n                                        <PasswordMeter\n                                            input={values.password}\n                                            has_error={!!((touched.password && errors.password) || status.error_msg)}\n                                            custom_feedback_messages={\n                                                getErrorMessages().password_warnings as unknown as Record<\n                                                    string,\n                                                    string\n                                                >\n                                            }\n                                        >\n                                            <PasswordInput\n                                                autoComplete='new-password'\n                                                className='reset-password__password-field'\n                                                name='password'\n                                                label={localize('Create a password')}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                error={(touched.password && errors.password) || status.error_msg}\n                                                value={values.password}\n                                                data-lpignore='true'\n                                                required\n                                            />\n                                        </PasswordMeter>\n                                    </fieldset>\n                                    <Text align='center' as='p' size='xxs' className='reset-password__subtext'>\n                                        {status.error_msg ? (\n                                            <Localize\n                                                i18n_default_text='{{error_msg}}'\n                                                values={{ error_msg: status.error_msg }}\n                                            />\n                                        ) : (\n                                            <Localize i18n_default_text='Strong passwords contain at least 8 characters. combine uppercase and lowercase letters, numbers, and symbols.' />\n                                        )}\n                                    </Text>\n                                    {isDesktop && <div className='reset-password__divider' />}\n                                    <Button\n                                        className={classNames('reset-password__btn', {\n                                            'reset-password__btn--disabled':\n                                                !values.password || errors.password || isSubmitting,\n                                        })}\n                                        type='submit'\n                                        is_disabled={!values.password || !!errors.password || isSubmitting}\n                                        primary\n                                    >\n                                        <Localize i18n_default_text='Reset my password' />\n                                    </Button>\n                                </div>\n                            )}\n                        </Form>\n                    </div>\n                </Dialog>\n            )}\n        </Formik>\n    );\n});\n\nexport default ResetPasswordModal;\n","import ResetPasswordModal from './reset-password-modal';\n\nexport default ResetPasswordModal;\n","import React from 'react';\nimport { Loading } from '@deriv/components';\nimport { WS } from 'Services';\nimport { observer, useStore } from '@deriv/stores';\nimport LinkExpiredModal from '../LinkExpiredModal';\nimport ResetPasswordModal from '../ResetPasswordModal';\nimport UnlinkPasswordModal from '../UnlinkPasswordModal';\n\nconst ResetOrUnlinkPasswordModal = observer(() => {\n    const { client, ui } = useStore();\n    const { is_logged_in } = client;\n    const { is_link_expired_modal_visible } = ui;\n    const [state, dispatch] = React.useReducer(\n        (old_state, updated_state) => {\n            return {\n                ...old_state,\n                ...updated_state,\n            };\n        },\n        {\n            is_loading: true,\n            is_unlinking: false,\n        }\n    );\n\n    React.useEffect(() => {\n        async function waitForAccountStatus() {\n            if (is_logged_in) {\n                const data = await WS.wait('get_account_status');\n                if (data?.get_account_status?.social_identity_provider) {\n                    dispatch({ is_unlinking: true, is_loading: false });\n                } else {\n                    dispatch({ is_unlinking: false, is_loading: false });\n                }\n            } else {\n                dispatch({ is_unlinking: false, is_loading: false });\n            }\n        }\n\n        waitForAccountStatus();\n    }, [is_logged_in]);\n\n    if (state.is_loading) {\n        return <Loading is_fullscreen={false} />;\n    }\n\n    if (state.is_unlinking) {\n        return <UnlinkPasswordModal />;\n    } else if (is_link_expired_modal_visible) {\n        return <LinkExpiredModal />;\n    }\n    return <ResetPasswordModal />;\n});\n\nexport default ResetOrUnlinkPasswordModal;\n","import ResetOrUnlinkPasswordModal from './reset-or-unlink-password-modal.jsx';\n\nexport default ResetOrUnlinkPasswordModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Formik, Form } from 'formik';\nimport { Button, Dialog, Icon, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport {\n    getErrorMessages,\n    redirectToLogin,\n    toTitleCase,\n    validPassword,\n    validLength,\n    getActionFromUrl,\n    removeActionParam,\n} from '@deriv/shared';\nimport { getLanguage, localize, Localize } from '@deriv/translations';\nimport { WS } from 'Services';\nimport { observer, useStore } from '@deriv/stores';\n\nconst UnlinkPassword = ({\n    logoutClient,\n    social_identity_provider,\n    toggleResetPasswordModal,\n    verification_code,\n    new_email,\n}) => {\n    const url_action = getActionFromUrl();\n    const onResetComplete = (error_msg, actions) => {\n        actions.setSubmitting(false);\n        actions.resetForm({ password: '' });\n        // Error would be returned on invalid token (and the like) cases.\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error_msg) {\n            // eslint-disable-next-line no-console\n            console.error(error_msg);\n            actions.setStatus({ error_msg });\n            return;\n        }\n        actions.setStatus({ reset_complete: true });\n    };\n\n    const onGetPasswordResponse = (response, actions) => {\n        if (response.error) {\n            onResetComplete(response.error.message, actions);\n        } else {\n            onResetComplete(null, actions);\n        }\n    };\n\n    const handleSubmit = (values, actions) => {\n        if (url_action === 'social_email_change') {\n            const api_request = {\n                change_email: 'update',\n                new_email,\n                new_password: values.password,\n                verification_code,\n            };\n\n            WS.changeEmail(api_request).then(async response => {\n                onGetPasswordResponse(response, actions);\n            });\n        } else {\n            const api_request = {\n                reset_password: 1,\n                new_password: values.password,\n                verification_code,\n            };\n            WS.resetPassword(api_request).then(async response => {\n                onGetPasswordResponse(response, actions);\n            });\n        }\n        removeActionParam('social_email_change');\n    };\n\n    const validateReset = values => {\n        const errors = {};\n\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        }\n\n        return errors;\n    };\n\n    const reset_initial_values = { password: '' };\n\n    return (\n        <div className='unlink-password'>\n            <Formik\n                initialValues={reset_initial_values}\n                initialStatus={{ reset_complete: false, error_msg: '' }}\n                validate={validateReset}\n                onSubmit={handleSubmit}\n            >\n                {({ handleBlur, errors, values, touched, isSubmitting, handleChange, status }) => (\n                    <Form>\n                        <React.Fragment>\n                            {status.reset_complete ? (\n                                <div className='unlink-password__password-success'>\n                                    <Icon\n                                        className='unlink-password__icon'\n                                        icon={`IcUnlink${toTitleCase(social_identity_provider)}`}\n                                        size={128}\n                                    />\n                                    <Text as='p' weight='bold' className='unlink-password__heading'>\n                                        <Localize i18n_default_text='Success!' />\n                                    </Text>\n                                    <Text align='center' as='p' size='xs' className='unlink-password__subtext'>\n                                        <Localize\n                                            i18n_default_text={\n                                                'Your Deriv account has been unlinked from your {{social_identity_provider}} account. You can now log in to Deriv using your new email address and password.'\n                                            }\n                                            values={{\n                                                social_identity_provider: toTitleCase(social_identity_provider),\n                                            }}\n                                        />\n                                    </Text>\n                                    <Button\n                                        type='button'\n                                        onClick={() => {\n                                            toggleResetPasswordModal(false);\n                                            logoutClient().then(() => {\n                                                redirectToLogin(false, getLanguage(), false);\n                                            });\n                                        }}\n                                        primary\n                                        large\n                                    >\n                                        <Localize i18n_default_text='Login now' />\n                                    </Button>\n                                </div>\n                            ) : (\n                                <div className='unlink-password__set-password'>\n                                    <Text as='p' weight='bold' className='unlink-password__heading'>\n                                        <Localize i18n_default_text='Deriv password' />\n                                    </Text>\n                                    <Text as='p' size='xs' className='unlink-password__subtext'>\n                                        <Localize i18n_default_text='Enter a new password for your Deriv account.' />\n                                    </Text>\n                                    <fieldset className='unlink-password__input-field'>\n                                        <PasswordMeter\n                                            input={values.password}\n                                            has_error={!!(touched.password && errors.password)}\n                                            custom_feedback_messages={getErrorMessages().password_warnings}\n                                        >\n                                            <PasswordInput\n                                                autoComplete='new-password'\n                                                className='unlink-password__password-field'\n                                                name='password'\n                                                label={localize('Deriv password')}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                error={touched.password && errors.password}\n                                                value={values.password}\n                                                data-lpignore='true'\n                                                required\n                                            />\n                                        </PasswordMeter>\n                                    </fieldset>\n                                    <Text as='p' size='xs' className='unlink-password__hint'>\n                                        {status.error_msg ? (\n                                            localize(status.error_msg)\n                                        ) : (\n                                            <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                                        )}\n                                    </Text>\n                                    <Button\n                                        className={classNames('unlink-password__btn', {\n                                            'unlink-password__btn--disabled':\n                                                !values.password || errors.password || isSubmitting,\n                                        })}\n                                        type='submit'\n                                        is_disabled={!values.password || !!errors.password || isSubmitting}\n                                        primary\n                                        large\n                                    >\n                                        <Localize i18n_default_text='Confirm' />\n                                    </Button>\n                                </div>\n                            )}\n                        </React.Fragment>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nUnlinkPassword.propTypes = {\n    logoutClient: PropTypes.func,\n    toggleResetPasswordModal: PropTypes.func,\n    verification_code: PropTypes.string,\n    social_identity_provider: PropTypes.string,\n};\n\nconst UnlinkPasswordModal = observer(() => {\n    const { ui, client } = useStore();\n    const { logout: logoutClient, social_identity_provider, verification_code } = client;\n    const {\n        disableApp,\n        enableApp,\n        is_loading,\n        is_reset_password_modal_visible: is_visible,\n        toggleResetPasswordModal,\n    } = ui;\n    const reset_verification_code = verification_code.reset_password;\n    const unlink_verification_code = verification_code.social_email_change;\n    const new_email = client.new_email.social_email_change;\n    return (\n        <Dialog\n            className='unlink-password__dialog'\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading}\n        >\n            <UnlinkPassword\n                logoutClient={logoutClient}\n                social_identity_provider={social_identity_provider}\n                toggleResetPasswordModal={toggleResetPasswordModal}\n                verification_code={unlink_verification_code || reset_verification_code}\n                new_email={new_email}\n            />\n        </Dialog>\n    );\n});\n\nexport default UnlinkPasswordModal;\n","import UnlinkPasswordModal from './unlink-password-modal.jsx';\n\nexport default UnlinkPasswordModal;\n","import { useEffect, useState } from 'react';\n\nconst ONE_SECOND = 1000;\n\nexport type TCountdownOptions = {\n    from: number;\n    to?: number;\n    increment?: boolean;\n};\n\nconst useCountdown = ({ from, to = 0, increment = false }: TCountdownOptions) => {\n    const [count, setCount] = useState(from);\n    const [is_running, setIsRunning] = useState(false);\n\n    useEffect(() => {\n        let timer: NodeJS.Timeout;\n\n        if (is_running) {\n            timer = setTimeout(() => {\n                if (count === to) {\n                    pause();\n                } else {\n                    setCount(old => (increment ? old + 1 : old - 1));\n                }\n            }, ONE_SECOND);\n        }\n\n        return () => clearTimeout(timer);\n    }, [count, is_running, to, increment]);\n\n    const start = () => setIsRunning(true);\n\n    const pause = () => setIsRunning(false);\n\n    const reset = () => setCount(from);\n\n    const stop = () => {\n        pause();\n        reset();\n    };\n\n    return {\n        count,\n        is_running,\n        start,\n        pause,\n        reset,\n        stop,\n    };\n};\n\nexport default useCountdown;\n","import { useCallback, useState } from 'react';\nimport { useRequest } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\nimport useCountdown from './useCountdown';\n\nconst RESEND_COUNTDOWN = 60;\n\nconst useVerifyEmail = (\n    type: Parameters<ReturnType<typeof useRequest<'verify_email'>>['mutate']>[0]['payload']['type']\n) => {\n    const WS = useRequest('verify_email');\n    const counter = useCountdown({ from: RESEND_COUNTDOWN });\n    const { client } = useStore();\n    const [sent_count, setSentCount] = useState(0);\n\n    const send = useCallback(\n        (email?: Parameters<ReturnType<typeof useRequest<'verify_email'>>['mutate']>[0]['payload']['verify_email']) => {\n            const request_email = email ?? client.email;\n            if (!request_email) return;\n            if (counter.is_running) return;\n\n            counter.reset();\n            counter.start();\n\n            setSentCount(count => count + 1);\n\n            WS.mutate({ payload: { verify_email: request_email, type } });\n        },\n        [WS, client.email, counter, type]\n    );\n\n    const sendPhoneNumberVerifyEmail = useCallback(() => {\n        WS.mutate({ payload: { verify_email: client.email, type } });\n    }, [WS, client.email, type]);\n\n    return {\n        WS,\n        is_loading: WS.isLoading,\n        error: WS.error,\n        data: WS.data,\n        counter: counter.count,\n        is_counter_running: counter.is_running,\n        sent_count,\n        has_been_sent: sent_count !== 0,\n        send,\n        sendPhoneNumberVerifyEmail,\n    };\n};\n\nexport default useVerifyEmail;\n"],"names":["EmailResent","_jsxs","className","children","_jsx","Icon","data_testid","icon","size","Text","as","align","Localize","i18n_default_text","components","observer","ui","client","useStore","setPreventRedirectToHub","enableApp","disableApp","is_link_expired_modal_visible","is_visible","toggleLinkExpiredModal","send","error","verify_error","data","verify_data","useVerifyEmail","is_email_sent","setIsEmailSent","React","formik","useFormik","initialValues","email","initialStatus","error_msg","validate","values","validEmail","getErrorMessages","onSubmit","errors","handleBlur","handleChange","handleSubmit","isSubmitting","resetForm","setStatus","setSubmitting","status","touched","message","Dialog","classNames","title","localize","has_close_icon","onConfirm","Input","type","name","id","onChange","e","disabled","onBlur","label","value","FormSubmitButton","has_cancel","cancel_label","onCancel","is_disabled","is_loading","logout","logoutClient","verification_code","setVerificationCode","is_deriv_com","test","window","location","hostname","host","is_reset_password_modal_visible","toggleResetPasswordModal","isTmbEnabled","useTMB","isDesktop","useDevice","onResetComplete","async","actions","is_tmb_enabled","error_code","code","password","reset_complete","then","requestOidcAuthentication","redirectCallbackUri","origin","catch","err","console","redirectToLogin","getLanguage","closeResetPasswordModal","removeActionParam","Formik","validLength","min","max","validPassword","min_number","max_number","api_request","reset_password","new_password","WS","resetPassword","response","_ref","dismissable","is_closed_on_cancel","Form","weight","PasswordMeter","input","has_error","custom_feedback_messages","password_warnings","PasswordInput","autoComplete","required","Button","primary","is_logged_in","state","dispatch","old_state","updated_state","_objectSpread","is_unlinking","_data$get_account_sta","wait","get_account_status","social_identity_provider","waitForAccountStatus","Loading","is_fullscreen","UnlinkPasswordModal","LinkExpiredModal","ResetPasswordModal","UnlinkPassword","new_email","url_action","getActionFromUrl","onGetPasswordResponse","change_email","changeEmail","_ref2","toTitleCase","onClick","large","propTypes","PropTypes","reset_verification_code","unlink_verification_code","social_email_change","from","to","increment","count","setCount","useState","is_running","setIsRunning","useEffect","timer","setTimeout","pause","old","clearTimeout","reset","start","stop","useRequest","counter","useCountdown","sent_count","setSentCount","useCallback","request_email","mutate","payload","verify_email","sendPhoneNumberVerifyEmail","isLoading","is_counter_running","has_been_sent"],"sourceRoot":""}