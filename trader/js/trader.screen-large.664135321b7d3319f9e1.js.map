{"version":3,"file":"trader/js/trader.screen-large.664135321b7d3319f9e1.js","mappings":"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","sources":["webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/allow-equals.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Multiplier/multiplier.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/amount.tsx","webpack://@deriv/trader/./src/App/Components/Form/RangeSlider/tick-steps.tsx","webpack://@deriv/trader/./src/App/Components/Form/RangeSlider/range-slider.tsx","webpack://@deriv/trader/./src/App/Components/Form/RangeSlider/index.ts","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/duration-toggle.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/DatePicker/trading-date-picker.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/DatePicker/index.ts","webpack://@deriv/trader/./src/App/Components/Form/TimePicker/dialog.tsx","webpack://@deriv/trader/./src/App/Components/Form/TimePicker/time-picker.tsx","webpack://@deriv/trader/./src/App/Components/Form/TimePicker/index.ts","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TimePicker/trading-time-picker.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TimePicker/index.ts","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/advanced-duration.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/simple-duration.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/duration.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/duration-wrapper.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/index.ts","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Multiplier/cancel-deal.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Accumulator/accumulator.tsx","webpack://@deriv/trader/./src/Modules/Trading/Containers/trade-params.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/screen-large.tsx","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/end-time.ts"],"sourcesContent":["import React from 'react';\nimport { Popover, Checkbox } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport {\n    hasCallPutEqual,\n    hasDurationForCallPutEqual,\n    isRiseFallEqual,\n} from 'Stores/Modules/Trading/Helpers/allow-equals';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\ntype TTradeStore = Pick<\n    ReturnType<typeof useTraderStore>,\n    | 'contract_start_type'\n    | 'contract_type'\n    | 'contract_types_list'\n    | 'duration_unit'\n    | 'expiry_type'\n    | 'has_equals_only'\n>;\n\ntype TAllowEquals = TTradeStore & {\n    onChange: (e: { target: { name: string; value: number } }) => Promise<void> | void;\n    value: number;\n};\n\nconst AllowEquals = ({\n    contract_start_type,\n    contract_type,\n    contract_types_list,\n    duration_unit,\n    expiry_type,\n    onChange,\n    value,\n    has_equals_only,\n}: TAllowEquals) => {\n    const has_callputequal_duration = hasDurationForCallPutEqual(\n        contract_types_list,\n        duration_unit,\n        contract_start_type\n    );\n    const has_callputequal = hasCallPutEqual(contract_types_list);\n\n    const has_allow_equals =\n        isRiseFallEqual(contract_type) && (has_callputequal_duration || expiry_type === 'endtime') && has_callputequal;\n\n    const changeValue: React.ComponentProps<typeof Checkbox>['onChange'] = e => {\n        e.persist();\n        if ('checked' in e.target) {\n            const { name, checked } = e.target;\n            onChange({ target: { name, value: Number(checked) } });\n        }\n    };\n\n    return (\n        has_allow_equals && (\n            <div className='allow-equals'>\n                <Checkbox\n                    className='allow-equals__input-field'\n                    id='dt_allow_equals_input'\n                    onChange={changeValue}\n                    defaultChecked={!!value}\n                    name='is_equal'\n                    label={localize('Allow equals')}\n                    classNameLabel='allow-equals__label'\n                    disabled={has_equals_only}\n                />\n                <Popover\n                    alignment='left'\n                    classNameTarget='allow-equals__tooltip'\n                    icon='info'\n                    id='dt_allow_equals_info'\n                    message={localize('Win payout if exit spot is also equal to entry spot.')}\n                    margin={130}\n                    relative_render\n                />\n            </div>\n        )\n    );\n};\n\nexport default AllowEquals;\n","import React from 'react';\nimport { Dropdown } from '@deriv/components';\nimport { TRADE_TYPES } from '@deriv/shared';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer } from '@deriv/stores';\n\nconst Multiplier = observer(() => {\n    const { multiplier, multiplier_range_list, onChange } = useTraderStore();\n    return (\n        <Dropdown\n            test_id={TRADE_TYPES.MULTIPLIER}\n            className='trade-container__multiplier-dropdown'\n            is_alignment_left\n            list={multiplier_range_list as unknown as React.ComponentProps<typeof Dropdown>['list']}\n            name={TRADE_TYPES.MULTIPLIER}\n            no_border\n            value={multiplier}\n            onChange={onChange}\n        />\n    );\n});\n\nexport default Multiplier;\n","import { AMOUNT_MAX_LENGTH, addComma, getDecimalPlaces, TRADE_TYPES } from '@deriv/shared';\nimport { ButtonToggle, Dropdown, InputField } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport AllowEquals from './allow-equals';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport Multiplier from './Multiplier/multiplier';\nimport MultipliersInfo from './Multiplier/info';\nimport MinMaxStakeInfo from './min-max-stake-info';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TInput = {\n    amount: string | number;\n    currency: string;\n    current_focus: string | null;\n    error_messages?: string[];\n    is_disabled?: boolean;\n    is_single_currency?: boolean;\n    onChange: (e: { target: { name: string; value: number | string } }) => void;\n    setCurrentFocus: (name: string | null) => void;\n};\n\nexport const Input = ({\n    amount,\n    currency,\n    current_focus,\n    error_messages,\n    is_single_currency,\n    is_disabled,\n    onChange,\n    setCurrentFocus,\n}: TInput) => (\n    <InputField\n        className='trade-container__amount'\n        classNameInlinePrefix='trade-container__currency'\n        classNameInput='trade-container__input'\n        currency={currency}\n        current_focus={current_focus}\n        error_messages={error_messages}\n        fractional_digits={getDecimalPlaces(currency)}\n        id='dt_amount_input'\n        inline_prefix={is_single_currency ? currency : undefined}\n        is_autocomplete_disabled\n        is_float\n        is_hj_whitelisted\n        is_incrementable\n        is_negative_disabled\n        is_disabled={is_disabled}\n        max_length={AMOUNT_MAX_LENGTH}\n        name='amount'\n        onChange={onChange}\n        type='tel'\n        value={amount}\n        ariaLabel={localize('Amount')}\n        setCurrentFocus={setCurrentFocus}\n    />\n);\n\nconst Amount = observer(({ is_minimized = false }: { is_minimized?: boolean }) => {\n    const { ui, client } = useStore();\n    const { currencies_list, is_single_currency } = client;\n    const { setCurrentFocus, current_focus } = ui;\n    const {\n        amount,\n        basis,\n        basis_list,\n        contract_start_type,\n        contract_type,\n        contract_types_list,\n        currency,\n        duration_unit,\n        expiry_type,\n        is_accumulator,\n        is_equal,\n        is_multiplier,\n        is_turbos,\n        is_vanilla,\n        has_equals_only,\n        has_open_accu_contract,\n        stake_boundary,\n        onChange,\n        validation_errors,\n    } = useTraderStore();\n\n    const { min_stake, max_stake } = stake_boundary[contract_type.toUpperCase()] || {};\n\n    if (is_minimized) {\n        return (\n            <div className='fieldset-minimized fieldset-minimized__amount'>\n                <span className='fieldset-minimized__basis'>{basis_list.find(o => o.value === basis)?.text}</span>\n                &nbsp;\n                <i>\n                    <span\n                        className={classNames('fieldset-minimized__currency', 'symbols', {\n                            [`symbols--${(currency || '').toLowerCase()}`]: currency,\n                        })}\n                    />\n                </i>\n                {addComma(amount, 2)}\n            </div>\n        );\n    }\n\n    const error_messages = validation_errors?.amount;\n\n    const getBasisList = () => basis_list.map(item => ({ text: item.text, value: item.value }));\n\n    const changeAmount = ({ target }: { target: { name: string; value: string | number; type?: string } }) => {\n        onChange({ target });\n    };\n\n    const changeAllowEquals = ({ target }: { target: { name: string; value: number } }) => {\n        onChange({ target });\n    };\n\n    return (\n        <React.Fragment>\n            {is_multiplier && (\n                <Fieldset className='trade-container__fieldset center-text' header={localize('Multiplier')}>\n                    <Multiplier />\n                </Fieldset>\n            )}\n            <Fieldset\n                className='trade-container__fieldset center-text'\n                header={\n                    contract_type === TRADE_TYPES.HIGH_LOW || is_multiplier || is_accumulator || is_vanilla || is_turbos\n                        ? localize('Stake')\n                        : undefined\n                }\n            >\n                {basis_list.length > 1 && (\n                    <ButtonToggle\n                        id='dt_amount_toggle'\n                        buttons_arr={getBasisList()}\n                        className='dropdown--no-margin'\n                        is_animated\n                        name='basis'\n                        onChange={onChange}\n                        value={basis}\n                    />\n                )}\n                {!is_single_currency ? (\n                    <div className='trade-container__currency-options'>\n                        <Input\n                            amount={amount}\n                            currency={currency}\n                            current_focus={current_focus}\n                            error_messages={error_messages}\n                            is_single_currency={is_single_currency}\n                            onChange={changeAmount}\n                            setCurrentFocus={setCurrentFocus}\n                        />\n                        <Dropdown\n                            className={classNames({ 'dc-dropdown-container__currency': !is_single_currency })}\n                            is_alignment_left\n                            is_nativepicker={false}\n                            list={currencies_list}\n                            name='currency'\n                            initial_offset={256}\n                            no_border={true}\n                            value={currency}\n                            onChange={onChange}\n                        />\n                    </div>\n                ) : (\n                    <Input\n                        amount={amount}\n                        currency={currency}\n                        current_focus={current_focus}\n                        error_messages={error_messages}\n                        is_single_currency={is_single_currency}\n                        is_disabled={has_open_accu_contract}\n                        onChange={changeAmount}\n                        setCurrentFocus={setCurrentFocus}\n                    />\n                )}\n                <AllowEquals\n                    contract_start_type={contract_start_type}\n                    contract_type={contract_type}\n                    contract_types_list={contract_types_list}\n                    duration_unit={duration_unit}\n                    expiry_type={expiry_type}\n                    onChange={changeAllowEquals}\n                    value={Number(is_equal)}\n                    has_equals_only={has_equals_only}\n                />\n                {is_multiplier && (\n                    <React.Fragment>\n                        <MultipliersInfo\n                            className='trade-container__multipliers-trade-info'\n                            should_show_tooltip\n                            is_tooltip_relative\n                        />\n                    </React.Fragment>\n                )}\n                {(is_turbos || is_vanilla) && (\n                    <MinMaxStakeInfo currency={currency} max_stake={max_stake} min_stake={min_stake} />\n                )}\n            </Fieldset>\n        </React.Fragment>\n    );\n});\n\nexport default Amount;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype TTickSteps = {\n    hover_value: number;\n    max_value: number;\n    min_value: number;\n    onClick: (index: number) => void;\n    onMouseEnter: (index: number) => void;\n    onMouseLeave: (e: React.MouseEvent<HTMLSpanElement>) => void;\n    value: number;\n};\n\nconst TickSteps = ({ hover_value, max_value, min_value, onClick, onMouseEnter, onMouseLeave, value }: TTickSteps) => {\n    if (!max_value || !min_value) return null;\n\n    const arr_ticks = [...Array(max_value - min_value + 1).keys()];\n\n    const isActive = (idx: number) => idx + min_value === value;\n    const isMarked = (idx: number) => idx + min_value < value;\n    const isMarkedOnHover = (idx: number) => (isMarked(idx) ? false : idx + min_value <= hover_value);\n\n    return (\n        <React.Fragment>\n            {arr_ticks.map(idx => (\n                <span\n                    data-testid={`tick_step_${idx + min_value}`}\n                    key={idx}\n                    data-value={idx + min_value}\n                    className={classNames('range-slider__ticks-step', {\n                        'range-slider__ticks-step--active': isActive(idx),\n                        'range-slider__ticks-step--marked': isMarked(idx),\n                        'range-slider__ticks-step--marked-hover': isMarkedOnHover(idx),\n                    })}\n                    onClick={() => onClick(idx + min_value)}\n                    onKeyDown={() => onClick(idx + min_value)}\n                    onMouseEnter={() => onMouseEnter(idx + min_value)}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </React.Fragment>\n    );\n};\n\nexport default TickSteps;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport { Text } from '@deriv/components';\nimport TickSteps from './tick-steps';\n\ntype TRangeSlider = {\n    className?: string;\n    max_value: number;\n    min_value: number;\n    name: string;\n    onChange: ({ target }: { target: { name: string; value: string | number } }) => void;\n    value: number;\n};\n\nconst RangeSlider = ({ className, name, value, min_value, max_value, onChange }: TRangeSlider) => {\n    const [hover_value, setHoverValue] = React.useState(0);\n    const range_slider_ref = React.useRef<HTMLSpanElement>(null);\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const target_value = +e.target.value;\n        if (target_value !== value) {\n            resetOnHover();\n            onChange({ target: { name, value: target_value } });\n        }\n    };\n\n    const handleClick = (index: number) => {\n        if (index !== value) {\n            resetOnHover();\n            onChange({ target: { name, value: index } });\n        }\n    };\n\n    const onMouseEnter = (index: number) => {\n        if (index && range_slider_ref.current) {\n            setHoverValue(index);\n            range_slider_ref.current.style.width = getRangeSliderTrackWidth(index, true);\n        }\n    };\n\n    const onMouseLeave = (e: React.MouseEvent<HTMLSpanElement>) => {\n        const { offsetX, offsetY } = e.nativeEvent;\n        if (offsetY <= -3 || offsetY >= 3 || offsetX < -3 || offsetX > 3) {\n            resetOnHover();\n        }\n    };\n\n    const getRangeSliderTrackWidth = (slider_value: number, is_hover?: boolean) => {\n        const width = (slider_value - min_value) * (10 / (max_value - min_value));\n        return `${width * 2 + (is_hover ? 0.8 : 1.4)}em`;\n    };\n\n    const resetOnHover = () => {\n        if (hover_value && range_slider_ref.current) {\n            setHoverValue(0);\n            range_slider_ref.current.style.width = '0';\n        }\n    };\n\n    const display_value = hover_value || value;\n    return (\n        <div\n            className={classNames('range-slider', className, {\n                'range-slider__error': value < min_value || value > max_value,\n            })}\n        >\n            <label className='range-slider__label' htmlFor='range'>\n                <input\n                    className='input trade-container__input range-slider__track'\n                    id='dt_duration_range_input'\n                    max={max_value || undefined}\n                    min={min_value || undefined}\n                    name={name}\n                    onChange={handleChange}\n                    tabIndex={0}\n                    type='range'\n                    value={value}\n                    aria-label='range-input'\n                />\n                {/* this element to be placed before <TickSteps /> to prevent overlapping colors */}\n                <span\n                    ref={range_slider_ref}\n                    className='range-slider__line range-slider__line--fill'\n                    onMouseLeave={onMouseLeave}\n                />\n                <div className='range-slider__ticks'>\n                    <TickSteps\n                        hover_value={hover_value}\n                        max_value={max_value}\n                        min_value={min_value}\n                        onClick={handleClick}\n                        onMouseLeave={onMouseLeave}\n                        onMouseEnter={onMouseEnter}\n                        value={value}\n                    />\n                </div>\n                {/* Calculate line width based on active value and size of range thumb */}\n                <div className='range-slider__line' style={{ width: `${getRangeSliderTrackWidth(value)}` }} />\n            </label>\n            <div className='range-slider__caption'>\n                {!!display_value && (\n                    <Text align='center' weight='bold' size='xs' color='prominent' id='dt_range_slider_label'>\n                        {display_value === 1 && localize('{{display_value}} Tick', { display_value })}\n                        {display_value > 1 && localize('{{display_value}} Ticks', { display_value })}\n                    </Text>\n                )}\n            </div>\n        </div>\n    );\n};\n// Keypress events do not trigger on Safari due to the way it handles input type='range' elements, using focus on the input element also doesn't work for Safari.\n\nexport default RangeSlider;\n","import RangeSlider from './range-slider';\n\nexport default RangeSlider;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\ntype TDurationToggle = {\n    name: string;\n    onChange: ({ target }: { target: { name: string; value: boolean } }) => void;\n    value: boolean;\n};\n\nconst DurationToggle = ({ name, onChange, value }: TDurationToggle) => {\n    const toggle = () => {\n        onChange({ target: { value: !value, name } });\n    };\n    const icon_className = classNames('advanced-simple-toggle__icon', 'select-arrow', {\n        'advanced-simple-toggle__icon--active': value,\n    });\n    return (\n        <button\n            id={value ? 'dt_advanced_toggle' : 'dt_simple_toggle'}\n            className='advanced-simple-toggle'\n            onClick={toggle}\n            aria-label={localize('Toggle between advanced and simple duration settings')}\n        >\n            <Icon icon='IcChevronDown' className={icon_className} />\n        </button>\n    );\n};\n\nexport default DurationToggle;\n","import classNames from 'classnames';\nimport moment from 'moment';\nimport React from 'react';\nimport { DatePicker, Tooltip } from '@deriv/components';\nimport { isTimeValid, setTime, toMoment, useIsMounted, hasIntradayDurationUnit, getTomorrowDate } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\ntype TDatePickerOnChange = React.ComponentProps<typeof DatePicker>['onChange'];\ntype TMarketEvent = {\n    dates: string[];\n    descrip: string;\n};\ntype TTradingDatePickerProps = {\n    id: string;\n    is_24_hours_contract?: boolean;\n    mode?: string;\n    name: string;\n};\n\nconst TradingDatePicker = observer(({ id, is_24_hours_contract, mode, name }: TTradingDatePickerProps) => {\n    const { common } = useStore();\n    const { server_time } = common;\n    const {\n        duration: current_duration,\n        duration_min_max,\n        duration_units_list,\n        expiry_type,\n        onChange,\n        start_date,\n        start_time,\n        symbol,\n        validation_errors,\n    } = useTraderStore();\n\n    const isMounted = useIsMounted();\n\n    const hasRangeSelection = () => mode === 'duration';\n\n    const [disabled_days, setDisabledDays] = React.useState<number[]>([]);\n    const [market_events, setMarketEvents] = React.useState<TMarketEvent[]>([]);\n    const [duration, setDuration] = React.useState(current_duration);\n    const [selected_date, setSelectedDate] = React.useState<moment.Moment | undefined>(() => {\n        if (!hasRangeSelection() && expiry_type === 'endtime') {\n            return toMoment(getTomorrowDate(server_time));\n        }\n    });\n\n    React.useEffect(() => {\n        onChangeCalendarMonth();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        if (duration !== current_duration) {\n            setDuration(current_duration);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [current_duration]);\n\n    const getMinDuration = () => {\n        return hasIntradayDurationUnit(duration_units_list)\n            ? toMoment(server_time).clone()\n            : toMoment(server_time).clone().add(duration_min_max?.daily?.min, 'second');\n    };\n\n    const getMomentContractStartDateTime = () => {\n        return setTime(\n            toMoment(getMinDuration()),\n            isTimeValid(start_time ?? '') ? start_time : (server_time?.format('HH:mm:ss') ?? '')\n        );\n    };\n\n    const getMaxDailyDuration = () => {\n        return duration_min_max.daily ? duration_min_max.daily.max : 365 * 24 * 3600;\n    };\n\n    const getMinDateExpiry = () => {\n        const is_duration_contract = expiry_type === 'duration';\n        const min_date = getMomentContractStartDateTime().clone().startOf('day');\n\n        return is_duration_contract && hasIntradayDurationUnit(duration_units_list) ? min_date.add(1, 'day') : min_date;\n    };\n\n    const getMaxDateDuration = () => {\n        const max_daily_duration = start_date ? 24 * 3600 : getMaxDailyDuration();\n        return is_24_hours_contract\n            ? getMomentContractStartDateTime().clone().add(max_daily_duration, 'second')\n            : toMoment(server_time).clone().add(getMaxDailyDuration(), 'second');\n    };\n\n    const getFooter = () => {\n        if (!hasRangeSelection()) return '';\n\n        if (!duration) return localize('Minimum duration is 1 day');\n        if (+duration === 1) return localize('Duration: {{duration}} day', { duration });\n        return localize('Duration: {{duration}} days', { duration });\n    };\n\n    const getDatepickerValue = () => {\n        return hasRangeSelection()\n            ? toMoment().add(duration, 'days').format('YYYY-MM-DD')\n            : selected_date || getMinDateExpiry();\n    };\n\n    const onChangeDate: TDatePickerOnChange = e => {\n        if (isMounted()) {\n            if (hasRangeSelection()) {\n                setDuration(Number(e.duration));\n            } else if (e.target?.value) {\n                setSelectedDate(toMoment(e.target?.value));\n            }\n        }\n\n        if (typeof onChange === 'function' && e.target) {\n            const value = hasRangeSelection() ? e.target.value : toMoment(e.target.value).format('YYYY-MM-DD');\n            onChange({\n                target: {\n                    name: e.target.name || '',\n                    value,\n                },\n            });\n        }\n    };\n\n    const onChangeCalendarMonth = React.useCallback(\n        // Do not move this callback up. It will cause infinite loop.\n        async (e = toMoment().format('YYYY-MM-DD')) => {\n            const new_market_events: TMarketEvent[] = [];\n            let new_disabled_days: number[] = [];\n\n            const [events, trading_days] = await Promise.all([\n                ContractType.getTradingEvents(e, symbol),\n                ContractType.getTradingDays(e, symbol),\n            ]);\n\n            if (trading_days) {\n                const all_days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'] as const;\n                new_disabled_days = all_days.reduce<number[]>((disabled, day, index) => {\n                    return trading_days.includes(day) ? disabled : [...disabled, index];\n                }, []);\n            }\n\n            events?.forEach(evt => {\n                const dates = evt.dates.split(', '); // convert dates str into array\n                new_market_events.push({\n                    dates,\n                    descrip: evt.descrip,\n                });\n            });\n\n            if (isMounted()) {\n                setDisabledDays(new_disabled_days);\n                setMarketEvents(new_market_events);\n            }\n        },\n        [isMounted, symbol]\n    );\n\n    const has_error = !!validation_errors?.[name]?.length;\n\n    return (\n        <div\n            className={classNames('dc-input-field', {\n                'dc-input-field--has-error': has_error,\n            })}\n        >\n            <Tooltip\n                className='trade-container__tooltip'\n                alignment='left'\n                message={has_error ? validation_errors[name][0] : undefined}\n                has_error={has_error}\n            >\n                <DatePicker\n                    id={id}\n                    alignment='left'\n                    display_format='DD MMM YYYY'\n                    show_leading_icon\n                    error={validation_errors?.[name]?.length ? '' : undefined}\n                    mode={mode}\n                    max_date={getMaxDateDuration()}\n                    min_date={getMinDateExpiry()}\n                    name={name}\n                    onChange={onChangeDate}\n                    onChangeCalendarMonth={onChangeCalendarMonth}\n                    has_range_selection={hasRangeSelection()}\n                    has_today_btn={!hasRangeSelection()}\n                    footer={getFooter()}\n                    events={market_events}\n                    disabled_days={disabled_days}\n                    keep_open\n                    readOnly={!hasRangeSelection()}\n                    value={getDatepickerValue() as string}\n                />\n            </Tooltip>\n        </div>\n    );\n});\n\nexport default TradingDatePicker;\n","import TradingDatePicker from './trading-date-picker';\n\nexport default TradingDatePicker;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport { toMoment } from '@deriv/shared';\n\ntype TDialogProps = {\n    className: string;\n    end_times: moment.Moment[];\n    onChange: (arg: string | React.ChangeEvent<HTMLInputElement>) => void;\n    preClass: string;\n    selected_time: string;\n    start_times: moment.Moment[];\n};\n\nfunction isBetween(\n    to_compare_moment: moment.Moment,\n    start_times_moment: moment.Moment[],\n    end_times_moment: moment.Moment[],\n    duration?: string\n) {\n    for (let i = 0; i < start_times_moment.length; i++) {\n        if (\n            to_compare_moment.isBetween(\n                start_times_moment[i],\n                end_times_moment[i],\n                duration as moment.unitOfTime.StartOf\n            )\n        ) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst Dialog = ({ preClass, selected_time, end_times, start_times, onChange, className }: TDialogProps) => {\n    const start_times_moment = start_times ? start_times.map(start_time => toMoment(start_time)) : [toMoment()];\n    const end_times_moment = end_times\n        ? end_times.map(end_time => toMoment(end_time))\n        : [toMoment().hour(23).minute(59).seconds(59).milliseconds(999)];\n    const to_compare_moment = toMoment();\n    const [hour, minute] = selected_time.split(':');\n    const hours = [...Array(24).keys()].map(a => `0${a}`.slice(-2));\n    const minutes = [...Array(12).keys()].map(a => `0${a * 5}`.slice(-2));\n\n    const selectOption = (type: string, current_value: string, prev_value: string, is_enabled = true) => {\n        if (is_enabled && prev_value) {\n            const [prev_hour, prev_minute] = prev_value.split(':');\n            if ((type === 'h' && current_value !== prev_hour) || (type === 'm' && current_value !== prev_minute)) {\n                const selected_hour = type === 'h' ? current_value : prev_hour;\n                const selected_minute = type === 'm' ? current_value : prev_minute;\n                onChange(`${selected_hour}:${selected_minute}`);\n            }\n        }\n    };\n\n    return (\n        <div className={classNames(`${preClass}__dialog`, `${className}`)}>\n            <div className={`${preClass}__selector`}>\n                <div className={`${preClass}__selector--hours`}>\n                    <div className={classNames(`${preClass}__selector-list-title`, 'center-text')}>\n                        <strong>{localize('Hour')}</strong>\n                    </div>\n                    <div>\n                        {hours.map(h => {\n                            to_compare_moment.hour(Number(h));\n                            const start_times_reset_minute = start_times_moment.map(start_time =>\n                                start_time.clone().minute(0)\n                            );\n                            const is_hour_enabled = isBetween(\n                                to_compare_moment,\n                                start_times_reset_minute,\n                                end_times_moment\n                            );\n                            const is_minute_enabled = isBetween(\n                                to_compare_moment,\n                                start_times_moment,\n                                end_times_moment,\n                                'minute'\n                            );\n                            // The minute number after which the last block/interval of `Minutes` selection will be disabled\n                            const last_interval_of_hour = 52;\n                            const is_enabled =\n                                to_compare_moment.minutes() > last_interval_of_hour\n                                    ? is_hour_enabled && is_minute_enabled\n                                    : is_hour_enabled;\n                            return (\n                                <div\n                                    className={classNames(\n                                        `${preClass}__selector-list-item`,\n                                        { [`${preClass}__selector-list-item--selected`]: hour === h },\n                                        { [`${preClass}__selector-list-item--disabled`]: !is_enabled }\n                                    )}\n                                    key={h}\n                                    onClick={() => {\n                                        selectOption('h', h, selected_time, is_enabled);\n                                    }}\n                                >\n                                    {h}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n                <div className={`${preClass}__selector--minutes`}>\n                    <div className={classNames(`${preClass}__selector-list-title`, 'center-text')}>\n                        <strong>{localize('Minute')}</strong>\n                    </div>\n                    <div>\n                        {minutes.map(mm => {\n                            to_compare_moment.hour(Number(hour)).minute(Number(mm));\n                            const is_enabled = isBetween(\n                                to_compare_moment,\n                                start_times_moment,\n                                end_times_moment,\n                                'minute'\n                            );\n                            return (\n                                <div\n                                    className={classNames(\n                                        `${preClass}__selector-list-item`,\n                                        { [`${preClass}__selector-list-item--selected`]: minute === mm },\n                                        { [`${preClass}__selector-list-item--disabled`]: !is_enabled }\n                                    )}\n                                    key={mm}\n                                    onClick={() => {\n                                        selectOption('m', mm, selected_time, is_enabled);\n                                    }}\n                                >\n                                    {mm}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Dialog;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon, InputField } from '@deriv/components';\nimport Dialog from './dialog';\nimport { observer, useStore } from '@deriv/stores';\nimport moment from 'moment';\n\ntype TTimePickerProps = {\n    end_times: moment.Moment[];\n    is_nativepicker?: boolean;\n    name: string;\n    onChange: (e: { target: { name: string; value: string } }) => Promise<void>;\n    padding?: string;\n    placeholder: string;\n    selected_time: string;\n    start_times: moment.Moment[];\n    validation_errors?: string[];\n};\n\nconst class_prefix = 'time-picker';\n\nconst TimePicker = observer(\n    ({\n        end_times,\n        is_nativepicker,\n        name,\n        onChange,\n        padding,\n        placeholder,\n        selected_time,\n        start_times,\n        validation_errors,\n    }: TTimePickerProps) => {\n        const { ui } = useStore();\n        const { current_focus, setCurrentFocus } = ui;\n        const [is_open, setIsOpen] = React.useState(false);\n        const [wrapper_ref, setWrapperRef] = React.useState<HTMLDivElement | null>(null);\n\n        React.useEffect(() => {\n            document.addEventListener('mousedown', handleClickOutside);\n            return () => document.removeEventListener('mousedown', handleClickOutside);\n        });\n\n        const toggleDropDown = () => {\n            setIsOpen(!is_open);\n        };\n\n        const handleChange = (arg: string | React.ChangeEvent<HTMLInputElement>) => {\n            // To handle nativepicker;\n            const value = typeof arg === 'object' ? arg.target.value : arg;\n\n            if (value !== selected_time) {\n                onChange({ target: { name, value } });\n            }\n        };\n\n        const saveRef: React.RefCallback<HTMLDivElement> = node => {\n            if (!node) return;\n            setWrapperRef(node);\n        };\n\n        const handleClickOutside = (event: Event) => {\n            if (!wrapper_ref?.contains(event.target as Node) && is_open) {\n                setIsOpen(false);\n            }\n        };\n\n        return (\n            <div ref={saveRef} className={classNames(class_prefix, { [`${class_prefix}--padding`]: padding })}>\n                {is_nativepicker ? (\n                    <input\n                        type='time'\n                        data-testid={`dt_${name}_input`}\n                        id={`dt_${name}_input`}\n                        value={selected_time}\n                        onChange={handleChange}\n                        name={name}\n                        min={start_times[0]?.format('HH:mm')}\n                        max={end_times[end_times.length - 1]?.format('HH:mm')}\n                    />\n                ) : (\n                    <React.Fragment>\n                        <InputField\n                            error_messages={validation_errors}\n                            type='text'\n                            is_hj_whitelisted\n                            is_read_only\n                            id={`dt_${name}_input`}\n                            className={classNames(`${class_prefix}-input`)}\n                            current_focus={current_focus}\n                            value={`${selected_time} GMT`}\n                            onClick={toggleDropDown}\n                            name={name}\n                            placeholder={placeholder}\n                            setCurrentFocus={setCurrentFocus}\n                        />\n                        <Icon icon='IcClockOutline' className={`${class_prefix}__icon`} />\n                        <CSSTransition\n                            in={is_open}\n                            classNames={{\n                                enter: 'time-picker__dialog--enter',\n                                enterDone: 'time-picker__dialog--enter-done',\n                                exit: 'time-picker__dialog--exit',\n                            }}\n                            timeout={100}\n                            unmountOnExit\n                        >\n                            <Dialog\n                                end_times={end_times}\n                                start_times={start_times}\n                                className={'from-left'}\n                                onChange={handleChange}\n                                preClass={class_prefix}\n                                selected_time={selected_time}\n                            />\n                        </CSSTransition>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n);\n\nexport default TimePicker;\n","import TimePicker from './time-picker';\n\nexport default TimePicker;\n","import React from 'react';\nimport { setTime, toMoment } from '@deriv/shared';\nimport TimePicker from 'App/Components/Form/TimePicker';\nimport { getSelectedTime, getBoundaries } from 'Stores/Modules/Trading/Helpers/end-time';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst TradingTimePicker = observer(() => {\n    const { common } = useStore();\n    const { server_time } = common;\n    const { expiry_date, expiry_time, market_open_times, market_close_times, onChange, is_market_closed } =\n        useTraderStore();\n    const moment_expiry_date = toMoment(expiry_date);\n    const market_open_datetimes = market_open_times.map(open_time => setTime(moment_expiry_date.clone(), open_time));\n    const market_close_datetimes = market_close_times.map(close_time =>\n        setTime(moment_expiry_date.clone(), close_time)\n    );\n    const expiry_datetime = setTime(moment_expiry_date.clone(), expiry_time);\n    const server_datetime = toMoment(server_time);\n\n    const boundaries = getBoundaries(server_datetime.clone(), market_open_datetimes, market_close_datetimes);\n    const selected_time = getSelectedTime(\n        server_datetime.clone(),\n        expiry_datetime,\n        market_open_datetimes,\n        market_close_datetimes\n    );\n\n    React.useEffect(() => {\n        if (expiry_time !== selected_time && !is_market_closed) {\n            onChange({\n                target: { name: 'expiry_time', value: selected_time },\n            });\n        }\n    }, [expiry_time, selected_time, onChange, is_market_closed]);\n\n    return (\n        <TimePicker\n            end_times={boundaries.end}\n            onChange={onChange}\n            name='expiry_time'\n            placeholder='12:00'\n            start_times={boundaries.start}\n            selected_time={selected_time}\n        />\n    );\n});\n\nexport default TradingTimePicker;\n","import TradingTimePicker from './trading-time-picker';\n\nexport default TradingTimePicker;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Dropdown, ButtonToggle, InputField } from '@deriv/components';\nimport { getDurationMinMaxValues, getUnitMap, hasIntradayDurationUnit, toMoment, getTomorrowDate } from '@deriv/shared';\nimport RangeSlider from 'App/Components/Form/RangeSlider';\nimport TradingDatePicker from '../../DatePicker';\nimport TradingTimePicker from '../../TimePicker';\nimport ExpiryText from './expiry-text';\nimport DurationRangeText from './duration-range-text';\nimport type { TDuration } from './duration';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\ntype TAdvancedDuration = Pick<\n    TDuration,\n    | 'advanced_duration_unit'\n    | 'advanced_expiry_type'\n    | 'duration_t'\n    | 'duration_units_list'\n    | 'expiry_date'\n    | 'expiry_epoch'\n    | 'expiry_type'\n    | 'getDurationFromUnit'\n    | 'onChange'\n    | 'onChangeUiStore'\n    | 'server_time'\n    | 'start_date'\n> & {\n    changeDurationUnit: ({ target }: { target: { name: string; value: string } }) => void;\n    expiry_list: {\n        text: string;\n        value: string;\n    }[];\n    number_input_props: {\n        type: string;\n        is_incrementable: boolean;\n    };\n    shared_input_props: {\n        is_hj_whitelisted: boolean;\n        onChange: ({\n            target,\n        }: {\n            target: {\n                name: string;\n                value: string | number;\n            };\n        }) => void;\n        max_value: number;\n        min_value: number;\n    };\n};\n\nconst AdvancedDuration = observer(\n    ({\n        advanced_duration_unit,\n        advanced_expiry_type,\n        changeDurationUnit,\n        duration_t,\n        duration_units_list,\n        expiry_date,\n        expiry_epoch,\n        expiry_list,\n        expiry_type,\n        getDurationFromUnit,\n        number_input_props,\n        onChange,\n        onChangeUiStore,\n        server_time,\n        shared_input_props,\n        start_date,\n    }: TAdvancedDuration) => {\n        const { ui } = useStore();\n        const { current_focus, setCurrentFocus } = ui;\n        const { contract_expiry_type, duration_min_max, validation_errors, onChangeMultiple } = useTraderStore();\n        const [min, max] = getDurationMinMaxValues(duration_min_max, contract_expiry_type, advanced_duration_unit);\n        let is_24_hours_contract = false;\n\n        if (expiry_type === 'endtime') {\n            const has_intraday_duration_unit = hasIntradayDurationUnit(duration_units_list);\n            is_24_hours_contract =\n                (!!start_date || toMoment(expiry_date || server_time).isSame(toMoment(server_time), 'day')) &&\n                has_intraday_duration_unit;\n        }\n\n        const endtime_container_class = classNames('endtime-container', {\n            'has-time': is_24_hours_contract,\n        });\n\n        const changeExpiry = ({ target }: { target: { name: string; value: unknown } }) => {\n            const { name, value } = target;\n\n            if (value === 'endtime') {\n                // Set expiry date to tomorrow when switching to end time\n                onChangeMultiple({\n                    expiry_date: getTomorrowDate(server_time),\n                    expiry_type: value,\n                });\n            } else {\n                onChange({ target: { name: 'expiry_type', value } });\n            }\n\n            onChangeUiStore({ name, value });\n        };\n\n        const has_error = !!validation_errors?.duration?.length;\n\n        const { name_plural, name } = getUnitMap()[advanced_duration_unit];\n        const duration_unit_text = name_plural ?? name;\n\n        React.useEffect(() => {\n            if (expiry_type === 'endtime') {\n                setTimeout(\n                    () => onChange({ target: { name: 'expiry_date', value: getTomorrowDate(server_time) } }),\n                    100\n                );\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [expiry_type]);\n\n        return (\n            <>\n                {expiry_list.length > 1 && (\n                    <ButtonToggle\n                        id='dt_advanced_duration_toggle'\n                        buttons_arr={expiry_list}\n                        name='advanced_expiry_type'\n                        is_animated={true}\n                        onChange={changeExpiry}\n                        value={advanced_expiry_type}\n                    />\n                )}\n                {expiry_type === 'duration' ? (\n                    <div className='duration-container'>\n                        {duration_units_list.length >= 1 && (\n                            <Dropdown\n                                classNameDisplay='dc-dropdown__display--duration'\n                                disabled={false}\n                                is_alignment_left\n                                is_nativepicker={false}\n                                list={duration_units_list}\n                                name='advanced_duration_unit'\n                                no_border\n                                onChange={changeDurationUnit}\n                                value={advanced_duration_unit}\n                            />\n                        )}\n                        {advanced_duration_unit === 't' && contract_expiry_type === 'tick' && (\n                            <RangeSlider name='duration' value={duration_t} {...shared_input_props} />\n                        )}\n                        {advanced_duration_unit === 'd' && (\n                            <TradingDatePicker\n                                id='dt_advanced_duration_datepicker'\n                                mode='duration'\n                                name='duration'\n                                is_24_hours_contract={is_24_hours_contract}\n                            />\n                        )}\n                        {advanced_duration_unit !== 't' && advanced_duration_unit !== 'd' && (\n                            <InputField\n                                id='dt_advanced_duration_input'\n                                classNameInput='trade-container__input'\n                                current_focus={current_focus}\n                                error_messages={validation_errors.duration}\n                                label={duration_units_list.length === 1 ? duration_units_list[0].text : undefined}\n                                name='duration'\n                                setCurrentFocus={setCurrentFocus}\n                                value={getDurationFromUnit(advanced_duration_unit)}\n                                {...number_input_props}\n                                {...shared_input_props}\n                            />\n                        )}\n                        {advanced_duration_unit !== 't' && (\n                            <DurationRangeText min={min} max={max} duration_unit_text={duration_unit_text} />\n                        )}\n                        {advanced_duration_unit === 'd' && (\n                            <ExpiryText expiry_epoch={Number(expiry_epoch)} has_error={has_error} />\n                        )}\n                    </div>\n                ) : (\n                    <div className={endtime_container_class}>\n                        <TradingDatePicker\n                            id='dt_advanced_duration_datepicker'\n                            name='expiry_date'\n                            is_24_hours_contract={is_24_hours_contract}\n                        />\n                        {\n                            is_24_hours_contract && <TradingTimePicker />\n                            // validation_errors={validation_errors.end_time} TODO: add validation_errors for end time\n                        }\n                        {!is_24_hours_contract && <ExpiryText expiry_epoch={Number(expiry_epoch)} />}\n                    </div>\n                )}\n            </>\n        );\n    }\n);\n\nexport default AdvancedDuration;\n","import React from 'react';\nimport { ButtonToggle, InputField } from '@deriv/components';\nimport { getDurationMinMaxValues, getUnitMap } from '@deriv/shared';\nimport RangeSlider from 'App/Components/Form/RangeSlider';\nimport TradingDatePicker from '../../DatePicker';\nimport DurationRangeText from './duration-range-text';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\ntype TSimpleDuration = {\n    changeDurationUnit: React.ComponentProps<typeof ButtonToggle>['onChange'];\n    duration_t: number;\n    duration_units_list: ReturnType<typeof useTraderStore>['duration_units_list'];\n    getDurationFromUnit: ReturnType<typeof useStore>['ui']['getDurationFromUnit'];\n    number_input_props: {\n        type: string;\n        is_incrementable: boolean;\n    };\n    shared_input_props: {\n        is_hj_whitelisted: boolean;\n        onChange: ({ target }: { target: { name: string; value: string | number } }) => void;\n        max_value: number;\n        min_value: number;\n    };\n    simple_duration_unit: string;\n};\nconst SimpleDuration = observer(\n    ({\n        changeDurationUnit,\n        duration_t,\n        duration_units_list,\n        getDurationFromUnit,\n        number_input_props,\n        shared_input_props,\n        simple_duration_unit: simple_duration_unit_prop,\n    }: TSimpleDuration) => {\n        const { ui } = useStore();\n        const { current_focus, setCurrentFocus } = ui;\n        const { contract_expiry_type, duration_min_max, validation_errors } = useTraderStore();\n\n        const simple_duration_unit = simple_duration_unit_prop || ui.simple_duration_unit;\n\n        const [min, max] = getDurationMinMaxValues(duration_min_max, contract_expiry_type, simple_duration_unit);\n        const { name_plural, name } = getUnitMap()[simple_duration_unit];\n        const duration_unit_text = name_plural ?? name;\n\n        const filterMinutesAndTicks = (arr: TSimpleDuration['duration_units_list']) => {\n            const filtered_arr = arr.filter(du => du.value === 't' || du.value === 'm');\n            if (filtered_arr.length <= 1) return [];\n\n            return filtered_arr;\n        };\n        const has_label = !duration_units_list.some(du => du.value === 't');\n        const filteredMinutesAndTicksList = filterMinutesAndTicks(duration_units_list);\n\n        return (\n            <>\n                {filteredMinutesAndTicksList.length > 1 && (\n                    <ButtonToggle\n                        id='dt_simple_duration_toggle'\n                        buttons_arr={filteredMinutesAndTicksList}\n                        is_animated={true}\n                        name='simple_duration_unit'\n                        onChange={changeDurationUnit}\n                        value={simple_duration_unit}\n                    />\n                )}\n                {simple_duration_unit === 't' && contract_expiry_type === 'tick' && (\n                    <RangeSlider name='duration' value={duration_t} {...shared_input_props} />\n                )}\n                {simple_duration_unit === 'd' && (\n                    <TradingDatePicker id='dt_simple_duration_datepicker' mode='duration' name='duration' />\n                )}\n                {simple_duration_unit !== 't' && simple_duration_unit !== 'd' && (\n                    <InputField\n                        id='dt_simple_duration_input'\n                        classNameInput='trade-container__input'\n                        current_focus={current_focus}\n                        error_messages={validation_errors.duration}\n                        name='duration'\n                        label={has_label ? duration_units_list[0]?.text : undefined}\n                        setCurrentFocus={setCurrentFocus}\n                        value={getDurationFromUnit(simple_duration_unit)}\n                        {...number_input_props}\n                        {...shared_input_props}\n                    />\n                )}\n                {simple_duration_unit !== 't' && (\n                    <DurationRangeText min={min} max={max} duration_unit_text={duration_unit_text} />\n                )}\n            </>\n        );\n    }\n);\n\nexport default SimpleDuration;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport RangeSlider from 'App/Components/Form/RangeSlider';\nimport { Dropdown } from '@deriv/components';\nimport { toMoment, isVanillaContract } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport DurationToggle from './duration-toggle';\nimport AdvancedDuration from './advanced-duration';\nimport SimpleDuration from './simple-duration';\n\ntype TUIStore = ReturnType<typeof useStore>['ui'];\ntype TTradeStore = ReturnType<typeof useTraderStore>;\nexport type TDuration = {\n    advanced_duration_unit: TUIStore['advanced_duration_unit'];\n    advanced_expiry_type: TUIStore['advanced_expiry_type'];\n    contract_type: TTradeStore['contract_type'];\n    duration: TTradeStore['duration'];\n    duration_t: TUIStore['duration_t'];\n    duration_unit: TTradeStore['duration_unit'];\n    duration_units_list: TTradeStore['duration_units_list'];\n    expiry_date: TTradeStore['expiry_date'];\n    expiry_epoch: TTradeStore['expiry_epoch'];\n    expiry_time: TTradeStore['expiry_time'];\n    expiry_type: TTradeStore['expiry_type'];\n    getDurationFromUnit: TUIStore['getDurationFromUnit'];\n    hasDurationUnit: (duration_type: string, is_advanced: boolean) => boolean;\n    is_advanced_duration: TUIStore['is_advanced_duration'];\n    is_minimized?: boolean;\n    max_value: number | null;\n    min_value: number | null;\n    onChange: TTradeStore['onChange'];\n    onChangeMultiple: TTradeStore['onChangeMultiple'];\n    onChangeUiStore: TUIStore['onChangeUiStore'];\n    server_time?: moment.MomentInput;\n    simple_duration_unit: TUIStore['simple_duration_unit'];\n    start_date: TTradeStore['start_date'];\n};\n\nconst Duration = ({\n    advanced_duration_unit,\n    advanced_expiry_type,\n    contract_type,\n    duration_t,\n    duration_unit,\n    duration_units_list,\n    duration,\n    expiry_date,\n    expiry_epoch,\n    expiry_time,\n    expiry_type,\n    getDurationFromUnit,\n    hasDurationUnit,\n    is_advanced_duration,\n    is_minimized,\n    max_value,\n    min_value,\n    onChange,\n    onChangeMultiple,\n    onChangeUiStore,\n    server_time,\n    simple_duration_unit,\n    start_date,\n}: TDuration) => {\n    React.useEffect(() => {\n        if (isVanillaContract(contract_type)) {\n            onToggleDurationType({ target: { value: true, name: 'is_advanced_duration' } });\n        }\n    }, [contract_type]);\n\n    const expiry_list = [{ text: localize('Duration'), value: 'duration' }];\n\n    const has_end_time = expiry_list.find(expiry => expiry.value === 'endtime');\n    if (duration_units_list.length === 1 && duration_unit === 't') {\n        if (has_end_time) {\n            expiry_list.pop(); // remove end time for contracts with only tick duration\n        }\n    } else if (!has_end_time) {\n        expiry_list.push({ text: localize('End time'), value: 'endtime' });\n    }\n\n    if (is_minimized) {\n        const moment_expiry = toMoment(expiry_date);\n        const duration_unit_text = duration_units_list.find(({ value }) => value === duration_unit)?.text ?? '';\n        return (\n            <div className='fieldset-minimized fieldset-minimized__duration'>\n                {expiry_type === 'duration'\n                    ? `${duration} ${duration_unit_text}`\n                    : `${moment_expiry.format('ddd - DD MMM, YYYY')}\\n${expiry_time}`}\n            </div>\n        );\n    }\n\n    const changeDurationUnit = ({ target }: { target: { name: string; value: string } }) => {\n        const { name, value } = target;\n        const duration_value = getDurationFromUnit(value);\n\n        onChangeUiStore({ name, value });\n        onChangeMultiple({\n            duration_unit: value,\n            duration: Number(duration_value),\n        });\n    };\n\n    const changeDurationValue = ({ target }: { target: { name: string; value: string | number; type?: string } }) => {\n        const { name, value } = target;\n        const duration_name = `duration_${is_advanced_duration ? advanced_duration_unit : simple_duration_unit}`;\n\n        // e.target.value returns string, we need to convert them to number\n        onChangeUiStore({ name: duration_name, value: +value });\n        onChange({ target: { name, value: +value } });\n    };\n\n    const onToggleDurationType = ({ target }: { target: { name: string; value: boolean } }) => {\n        const { name, value: is_advanced } = target;\n        onChangeUiStore({ name, value: is_advanced });\n\n        // replace selected duration unit and duration if the contract doesn't have that duration unit\n        let current_duration_unit = is_advanced ? advanced_duration_unit : simple_duration_unit;\n        const duration_value = getDurationFromUnit(current_duration_unit);\n        if (!hasDurationUnit(current_duration_unit, is_advanced)) {\n            current_duration_unit = duration_units_list[0].value;\n            onChangeUiStore({\n                name: `${is_advanced ? 'advanced' : 'simple'}_duration_unit`,\n                value: current_duration_unit,\n            });\n        }\n\n        const new_trade_store_values: Record<string, string | number> = {};\n\n        // simple only has expiry type of duration\n        if (!is_advanced && expiry_type !== 'duration') {\n            new_trade_store_values.expiry_type = 'duration';\n        }\n        if (is_advanced && expiry_type !== advanced_expiry_type) {\n            new_trade_store_values.expiry_type = advanced_expiry_type;\n        }\n\n        const has_same_duration = current_duration_unit === duration_unit && Number(duration_value) === duration;\n        if (!has_same_duration) {\n            new_trade_store_values.duration_unit = current_duration_unit;\n            new_trade_store_values.duration = duration_value;\n        }\n\n        const should_update_trade_store = Object.keys(new_trade_store_values).length;\n        if (should_update_trade_store) {\n            onChangeMultiple({ ...new_trade_store_values });\n        }\n    };\n\n    const passthrough_props = {\n        shared_input: {\n            is_hj_whitelisted: true,\n            onChange: changeDurationValue,\n            max_value: Number(max_value),\n            min_value: Number(min_value),\n        },\n        number_input: {\n            type: 'number',\n            is_incrementable: true,\n        },\n    };\n\n    // e.g. digit contracts only has range slider - does not have toggle between advanced / simple\n    const has_toggle = expiry_list.length > 1 || duration_units_list.length > 1;\n\n    return (\n        <Fieldset\n            className={classNames('trade-container__fieldset', {\n                'trade-container__fieldset--advanced': is_advanced_duration,\n            })}\n        >\n            {duration_units_list.length === 1 && !is_advanced_duration && (\n                <Dropdown\n                    classNameDisplay='dc-dropdown__display--duration'\n                    disabled={false}\n                    is_alignment_left\n                    is_nativepicker={false}\n                    list={duration_units_list}\n                    name='simple_duration_unit'\n                    no_border={true}\n                    onChange={changeDurationUnit}\n                    value={simple_duration_unit}\n                />\n            )}\n            {!has_toggle && <RangeSlider name='duration' value={duration_t} {...passthrough_props.shared_input} />}\n            {has_toggle && (\n                <>\n                    {is_advanced_duration && (\n                        <AdvancedDuration\n                            advanced_duration_unit={advanced_duration_unit}\n                            advanced_expiry_type={advanced_expiry_type}\n                            changeDurationUnit={changeDurationUnit}\n                            duration_t={duration_t}\n                            duration_units_list={duration_units_list}\n                            expiry_date={expiry_date}\n                            expiry_epoch={expiry_epoch}\n                            expiry_list={expiry_list}\n                            expiry_type={expiry_type}\n                            getDurationFromUnit={getDurationFromUnit}\n                            number_input_props={passthrough_props.number_input}\n                            onChange={onChange}\n                            onChangeUiStore={onChangeUiStore}\n                            server_time={server_time}\n                            shared_input_props={passthrough_props.shared_input}\n                            start_date={start_date}\n                        />\n                    )}\n                    {!is_advanced_duration && (\n                        <SimpleDuration\n                            getDurationFromUnit={getDurationFromUnit}\n                            changeDurationUnit={changeDurationUnit}\n                            duration_t={duration_t}\n                            duration_units_list={duration_units_list}\n                            number_input_props={passthrough_props.number_input}\n                            shared_input_props={passthrough_props.shared_input}\n                            simple_duration_unit={simple_duration_unit}\n                        />\n                    )}\n                    {!isVanillaContract(contract_type) && (\n                        <DurationToggle\n                            name={'is_advanced_duration'}\n                            onChange={onToggleDurationType}\n                            value={is_advanced_duration}\n                        />\n                    )}\n                </>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default Duration;\n","import React from 'react';\nimport { getDurationMinMaxValues } from '@deriv/shared';\nimport Duration from './duration';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\ntype TDurationWrapper = {\n    is_minimized?: boolean;\n};\nconst DurationWrapper = observer(({ is_minimized }: TDurationWrapper) => {\n    const { ui } = useStore();\n    const {\n        advanced_expiry_type,\n        advanced_duration_unit,\n        getDurationFromUnit,\n        is_advanced_duration,\n        onChangeUiStore,\n        simple_duration_unit,\n        duration_t,\n    } = ui;\n    const {\n        contract_expiry_type,\n        contract_type,\n        duration,\n        duration_unit,\n        duration_units_list,\n        duration_min_max,\n        expiry_type,\n        expiry_date,\n        expiry_epoch,\n        expiry_time,\n        start_date,\n        onChange,\n        onChangeMultiple,\n    } = useTraderStore();\n\n    const duration_props = {\n        advanced_duration_unit,\n        advanced_expiry_type,\n        contract_expiry_type,\n        contract_type,\n        duration_min_max,\n        duration_t,\n        duration_unit,\n        duration_units_list,\n        duration,\n        expiry_date,\n        expiry_epoch,\n        expiry_time,\n        expiry_type,\n        getDurationFromUnit,\n        is_minimized,\n        is_advanced_duration,\n        onChange,\n        onChangeMultiple,\n        onChangeUiStore,\n        simple_duration_unit,\n        start_date,\n    };\n\n    const hasDurationUnit = (duration_type: string, is_advanced: boolean) => {\n        let duration_list = [...duration_units_list];\n\n        if (duration_list.length > 1 && !is_advanced) {\n            duration_list = duration_list.filter(du => du.value === 'm' || du.value === 't');\n        }\n\n        return duration_list.some(du => du.value === duration_type);\n    };\n\n    const current_duration_unit = is_advanced_duration ? advanced_duration_unit : simple_duration_unit;\n    const has_missing_duration_unit = !hasDurationUnit(current_duration_unit, is_advanced_duration);\n    const simple_is_missing_duration_unit =\n        !is_advanced_duration && simple_duration_unit === 'd' && duration_units_list.length === 4;\n    const [min_value, max_value] = getDurationMinMaxValues(duration_min_max, contract_expiry_type, duration_unit);\n\n    const handleEndTime = () => {\n        const symbol_has_endtime = duration_units_list.length > 1 || is_advanced_duration;\n\n        if (symbol_has_endtime) {\n            // simple duration does not have endtime\n            if (!is_advanced_duration) onChangeUiStore({ name: 'is_advanced_duration', value: true });\n\n            onChangeUiStore({ name: 'advanced_expiry_type', value: 'endtime' });\n        } else {\n            // If query string contains endtime but contract type does not e.g. digits (only ticks contracts)\n            onChange({ target: { name: 'expiry_type', value: 'duration' } });\n        }\n    };\n\n    const assertDurationIsWithinBoundary = React.useCallback(\n        (current_duration: number) => {\n            const [min_value, max_value] = getDurationMinMaxValues(\n                duration_min_max,\n                contract_expiry_type,\n                duration_unit\n            );\n            if (contract_expiry_type === 'tick' && current_duration < Number(min_value)) {\n                onChangeUiStore({ name: `duration_${duration_unit}`, value: Number(min_value) });\n                onChange({ target: { name: 'duration', value: min_value } });\n            }\n\n            if (\n                current_duration >= Number(min_value) &&\n                current_duration > Number(max_value) &&\n                duration_unit !== 'd'\n            ) {\n                onChangeUiStore({ name: `duration_${duration_unit}`, value: Number(max_value) });\n                onChange({ target: { name: 'duration', value: max_value } });\n            }\n        },\n        [contract_expiry_type, duration_unit, duration_min_max, onChange, onChangeUiStore]\n    );\n\n    React.useEffect(() => {\n        const current_unit = is_advanced_duration ? advanced_duration_unit : simple_duration_unit;\n        const current_duration = getDurationFromUnit(current_unit);\n        let unit = duration_unit;\n        let duration_value = duration;\n\n        if (duration_units_list?.length > 0 && (has_missing_duration_unit || simple_is_missing_duration_unit)) {\n            unit = duration_units_list[0].value;\n            duration_value = getDurationFromUnit(unit);\n            onChangeMultiple({ duration_unit: unit, duration: +duration_value });\n        }\n\n        if (unit !== current_unit) {\n            onChangeUiStore({ name: 'advanced_duration_unit', value: unit });\n            onChangeUiStore({ name: 'simple_duration_unit', value: unit });\n        }\n\n        if (+duration_value !== +current_duration) {\n            onChangeUiStore({ name: `duration_${unit}`, value: duration_value });\n        }\n\n        if (expiry_type === 'endtime') handleEndTime();\n\n        assertDurationIsWithinBoundary(Number(current_duration));\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [has_missing_duration_unit, simple_is_missing_duration_unit]);\n\n    React.useEffect(() => {\n        if (duration_unit === 'd') {\n            onChangeUiStore({ name: 'is_advanced_duration', value: true });\n        }\n    }, [duration_unit, onChangeUiStore]);\n\n    React.useEffect(() => {\n        if (is_advanced_duration && expiry_type !== advanced_expiry_type) {\n            onChange({ target: { name: 'expiry_type', value: advanced_expiry_type } });\n        }\n    }, [is_advanced_duration, expiry_type, advanced_expiry_type, onChange]);\n\n    // intercept changes to contract duration and check that trade_store and ui_store are aligned.\n    React.useEffect(() => {\n        const current_duration = getDurationFromUnit(duration_unit);\n        const simple_is_not_type_duration = !is_advanced_duration && expiry_type !== 'duration';\n\n        // simple only has expiry type duration\n        if (simple_is_not_type_duration) {\n            onChange({ target: { name: 'expiry_type', value: 'duration' } });\n        }\n\n        if (duration !== Number(current_duration)) {\n            onChangeUiStore({ name: `duration_${duration_unit}`, value: duration });\n        }\n\n        assertDurationIsWithinBoundary(Number(current_duration));\n    }, [\n        duration_unit,\n        is_advanced_duration,\n        expiry_type,\n        duration,\n        assertDurationIsWithinBoundary,\n        onChange,\n        onChangeUiStore,\n        getDurationFromUnit,\n    ]);\n\n    return (\n        <Duration hasDurationUnit={hasDurationUnit} max_value={max_value} min_value={min_value} {...duration_props} />\n    );\n});\n\nexport default DurationWrapper;\n","import DurationWrapper from './duration-wrapper';\n\nexport default DurationWrapper;\n","import React from 'react';\n\nimport { Checkbox, Dropdown, Popover, PopoverMessageCheckbox } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport { onChangeCancellationDuration, onToggleCancellation } from 'Stores/Modules/Trading/Helpers/multiplier';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst CancelDeal = observer(() => {\n    const { ui } = useStore();\n    const {\n        cancellation_range_list,\n        cancellation_duration,\n        has_cancellation,\n        has_stop_loss,\n        has_take_profit,\n        onChangeMultiple,\n    } = useTraderStore();\n\n    const { should_show_cancellation_warning, toggleCancellationWarning } = ui;\n\n    const should_show_popover = (has_take_profit || has_stop_loss) && should_show_cancellation_warning;\n    const [is_do_not_show_selected, setDoNotShowSelected] = React.useState(!should_show_cancellation_warning);\n\n    const onPopoverClose = () => {\n        if (is_do_not_show_selected) {\n            toggleCancellationWarning();\n        }\n    };\n\n    const onPopoverCheckboxChange = React.useCallback(() => {\n        setDoNotShowSelected(prev_state => !prev_state);\n    }, []);\n\n    const input = (\n        <Checkbox\n            id='dt_cancellation-checkbox_input'\n            onChange={() => onToggleCancellation({ has_cancellation, onChangeMultiple })}\n            name='has_cancellation'\n            label={<Localize i18n_default_text='Deal cancellation' />}\n            defaultChecked={has_cancellation}\n        />\n    );\n\n    return (\n        <React.Fragment>\n            {!!cancellation_range_list.length && (\n                <Fieldset className='trade-container__fieldset'>\n                    <div className='dc-input-wrapper--inline'>\n                        {should_show_popover ? (\n                            <Popover\n                                alignment='left'\n                                classNameBubble='trade-container__popover'\n                                is_bubble_hover_enabled\n                                margin={2}\n                                message={\n                                    <PopoverMessageCheckbox\n                                        defaultChecked={is_do_not_show_selected}\n                                        checkboxLabel={localize(\"Don't show this again\")}\n                                        message={localize(\n                                            'Take profit and/or stop loss are not available while deal cancellation is active.'\n                                        )}\n                                        name='should_show_cancellation_warning'\n                                        onChange={onPopoverCheckboxChange}\n                                    />\n                                }\n                                onBubbleClose={onPopoverClose}\n                                relative_render\n                            >\n                                {input}\n                            </Popover>\n                        ) : (\n                            <React.Fragment>{input}</React.Fragment>\n                        )}\n                        <Popover\n                            alignment='left'\n                            icon='info'\n                            id='dt_cancellation-checkbox__tooltip'\n                            is_bubble_hover_enabled\n                            message={localize(\n                                'When this is active, you can cancel your trade within the chosen time frame. Your stake will be returned without loss.'\n                            )}\n                            classNameBubble='trade-container__deal-cancellation-popover'\n                            margin={216}\n                            relative_render\n                        />\n                    </div>\n                    {has_cancellation && (\n                        <Dropdown\n                            id='dt_cancellation_range'\n                            className='trade-container__multiplier-dropdown'\n                            is_alignment_left\n                            is_nativepicker={false}\n                            list={cancellation_range_list}\n                            name='cancellation_duration'\n                            no_border={true}\n                            value={cancellation_duration}\n                            onChange={event => onChangeCancellationDuration({ event, onChangeMultiple })}\n                        />\n                    )}\n                </Fieldset>\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default CancelDeal;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport NumberSelector from 'App/Components/Form/number-selector';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport { getGrowthRatePercentage, isEmptyObject } from '@deriv/shared';\nimport classNames from 'classnames';\nimport { observer } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst Accumulator = observer(() => {\n    const {\n        accumulator_range_list,\n        growth_rate,\n        is_accumulator,\n        onChange,\n        tick_size_barrier_percentage,\n        proposal_info,\n        has_open_accu_contract,\n    } = useTraderStore();\n\n    // splitting accumulator_range_list into rows containing 5 values each:\n    const arr_arr_numbers: number[][] | undefined = accumulator_range_list?.reduce((acc: number[][], _el, index) => {\n        if (index % 5 === 0) {\n            acc.push(accumulator_range_list.slice(index, index + 5));\n        }\n        return acc;\n    }, []);\n    const has_error_or_not_loaded =\n        proposal_info?.ACCU?.has_error || !proposal_info?.ACCU?.id || isEmptyObject(proposal_info);\n    if (!accumulator_range_list?.length) return null;\n    return (\n        <Fieldset\n            className={classNames('trade-container__fieldset', 'accumulator')}\n            header={localize('Growth rate')}\n            is_center\n            is_tooltip_disabled={has_error_or_not_loaded && is_accumulator}\n            header_tooltip={localize(\n                'Your stake will grow at {{growth_rate}}% per tick as long as the current spot price remains within ±{{tick_size_barrier_percentage}} from the previous spot price.',\n                {\n                    growth_rate: getGrowthRatePercentage(growth_rate),\n                    tick_size_barrier_percentage,\n                }\n            )}\n        >\n            <NumberSelector\n                arr_arr_numbers={arr_arr_numbers}\n                name='growth_rate'\n                onChange={onChange}\n                selected_number={growth_rate}\n                should_show_in_percents\n                is_disabled={has_open_accu_contract}\n            />\n        </Fieldset>\n    );\n});\n\nexport default Accumulator;\n","import React from 'react';\nimport classNames from 'classnames';\nimport Amount from 'Modules/Trading/Components/Form/TradeParams/amount';\nimport Barrier from 'Modules/Trading/Components/Form/TradeParams/barrier';\nimport PayoutSelector from 'Modules/Trading/Components/Form/TradeParams/Turbos/payout-selector';\nimport Duration from 'Modules/Trading/Components/Form/TradeParams/Duration';\nimport LastDigit from 'Modules/Trading/Components/Form/TradeParams/last-digit';\nimport CancelDeal from 'Modules/Trading/Components/Form/TradeParams/Multiplier/cancel-deal';\nimport Accumulator from 'Modules/Trading/Components/Form/TradeParams/Accumulator/accumulator';\nimport StopLoss from 'Modules/Trading/Components/Form/TradeParams/Multiplier/stop-loss';\nimport TakeProfit from 'Modules/Trading/Components/Form/TradeParams/Multiplier/take-profit';\nimport Expiration from 'Modules/Trading/Components/Form/TradeParams/Multiplier/expiration';\nimport AccumulatorsInfoDisplay from 'Modules/Trading/Components/Form/TradeParams/Accumulator/accumulators-info-display';\nimport Strike from 'Modules/Trading/Components/Form/TradeParams/strike';\nimport TradeTypeTabs from 'Modules/Trading/Components/Form/TradeParams/trade-type-tabs';\nimport { observer } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport Fieldset from 'App/Components/Form/fieldset';\n\ntype TTradeParams = {\n    is_minimized?: boolean;\n};\n\nconst TradeParams = observer(({ is_minimized = false }: TTradeParams) => {\n    const { form_components, is_turbos } = useTraderStore();\n    const isVisible = (component_key: string) => {\n        return form_components.includes(component_key);\n    };\n    if (is_turbos) {\n        return (\n            <>\n                <Fieldset className={classNames('trade-container__fieldset', 'trade-container__fieldset--no-padding')}>\n                    {isVisible('trade_type_tabs') && <TradeTypeTabs key={'trade_type_tabs'} />}\n                </Fieldset>\n                {isVisible('amount') && <Amount key={'amount'} is_minimized={is_minimized} />}\n                {isVisible('payout_selector') && <PayoutSelector key={'payout_selector'} />}\n                {isVisible('duration') && <Duration key={'duration'} is_minimized={is_minimized} />}\n                {isVisible('take_profit') && <TakeProfit key={'take_profit'} />}\n            </>\n        );\n    }\n    return (\n        <React.Fragment>\n            {isVisible('duration') && <Duration key={'duration'} is_minimized={is_minimized} />}\n            {isVisible('barrier') && <Barrier key={'barrier'} is_minimized={is_minimized} />}\n            {isVisible('last_digit') && <LastDigit key={'last_digit'} is_minimized={is_minimized} />}\n            {isVisible('accumulator') && <Accumulator key={'accumulator'} />}\n            {(isVisible('trade_type_tabs') || isVisible('strike') || isVisible('payout_selector')) && (\n                <Fieldset className={classNames('trade-container__fieldset', 'trade-container__fieldset--no-padding')}>\n                    {isVisible('trade_type_tabs') && <TradeTypeTabs key={'trade_type_tabs'} />}\n                    {isVisible('strike') && <Strike key={'strike'} />}\n                    {isVisible('payout_selector') && <PayoutSelector key={'payout_selector'} />}\n                </Fieldset>\n            )}\n            {isVisible('amount') && <Amount key={'amount'} is_minimized={is_minimized} />}\n            {isVisible('take_profit') && <TakeProfit key={'take_profit'} />}\n            {isVisible('stop_loss') && <StopLoss key={'stop_loss'} />}\n            {isVisible('cancellation') && <CancelDeal key={'cancellation'} />}\n            {isVisible('expiration') && <Expiration key={'expiration'} />}\n            {isVisible('accu_info_display') && <AccumulatorsInfoDisplay key={'accu_info_display'} />}\n        </React.Fragment>\n    );\n});\n\nexport default TradeParams;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { TradeParamsLoader } from 'App/Components/Elements/ContentLoader';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport ContractType from '../../Containers/contract-type';\nimport Purchase from '../../Containers/purchase';\nimport TradeParams from '../../Containers/trade-params';\n\ntype TScreenLarge = {\n    is_market_closed?: boolean;\n    is_trade_enabled: boolean;\n    is_single_logging_in?: boolean;\n};\nconst ScreenLarge = ({ is_market_closed = false, is_trade_enabled, is_single_logging_in = false }: TScreenLarge) => (\n    <div\n        className={classNames('sidebar__items', {\n            'sidebar__items--market-closed': is_market_closed,\n        })}\n    >\n        {!is_trade_enabled || is_single_logging_in ? (\n            <TradeParamsLoader speed={2} />\n        ) : (\n            <React.Fragment>\n                <Fieldset className='trade-container__fieldset trade-types'>\n                    <ContractType />\n                </Fieldset>\n                <TradeParams />\n                <div className='purchase-container'>\n                    <Purchase is_market_closed={is_market_closed} />\n                </div>\n            </React.Fragment>\n        )}\n    </div>\n);\n\nexport default ScreenLarge;\n","import { useStore } from '@deriv/stores';\nimport { TTradeStore } from 'Types';\nimport moment from 'moment';\n\ntype TTime = {\n    server_time: NonNullable<ReturnType<typeof useStore>['common']['server_time']>;\n    selected_time: moment.Moment;\n    market_open_times: TTradeStore['market_open_times'];\n    market_close_times: TTradeStore['market_close_times'];\n};\n\nconst getClosestTime = (time: moment.Moment | string, interval: number): moment.Moment => {\n    const moment_time = moment(time); // Convert time to a moment object if it's a string\n    return moment_time.minute(Math.ceil(moment_time.minute() / interval) * interval);\n};\n\nexport const getSelectedTime = (\n    server_time: TTime['server_time'],\n    selected_time: TTime['selected_time'],\n    market_open_times: moment.Moment[],\n    market_close_times: moment.Moment[]\n) => {\n    for (let i = 0; i < market_open_times.length; i++) {\n        if (selected_time.isAfter(market_open_times[i]) && selected_time.isBefore(market_close_times[i])) {\n            return getClosestTime(selected_time, 5).format('HH:mm');\n        }\n    }\n\n    for (let i = 0; i < market_open_times.length; i++) {\n        const moment_market_open_time = moment(market_open_times[i]); // Convert market open time to a moment object\n        if (moment_market_open_time.isAfter(server_time)) {\n            return getClosestTime(moment_market_open_time, 5).format('HH:mm');\n        }\n    }\n\n    return getClosestTime(server_time, 5).format('HH:mm');\n};\n\nexport const getBoundaries = (\n    server_time: TTime['server_time'],\n    market_open_times: moment.Moment[],\n    market_close_times: moment.Moment[]\n) => {\n    const boundaries = {\n        start: market_open_times.map(open_time =>\n            server_time.isBefore(open_time) ? moment(open_time).clone() : server_time\n        ),\n        end: market_close_times,\n    };\n\n    if (boundaries.start.length > 0) {\n        boundaries.start[0] = getClosestTime(boundaries.start[0], 5);\n    }\n\n    return boundaries;\n};\n"],"names":["_ref","contract_start_type","contract_type","contract_types_list","duration_unit","expiry_type","onChange","value","has_equals_only","has_callputequal_duration","hasDurationForCallPutEqual","has_callputequal","hasCallPutEqual","isRiseFallEqual","React","className","Checkbox","id","e","persist","target","_e$target","name","checked","Number","defaultChecked","label","localize","classNameLabel","disabled","Popover","alignment","classNameTarget","icon","message","margin","relative_render","Multiplier","observer","_useTraderStore","useTraderStore","multiplier","multiplier_range_list","Dropdown","test_id","TRADE_TYPES","MULTIPLIER","is_alignment_left","list","no_border","Input","amount","currency","current_focus","error_messages","is_single_currency","is_disabled","setCurrentFocus","InputField","classNameInlinePrefix","classNameInput","fractional_digits","getDecimalPlaces","inline_prefix","undefined","is_autocomplete_disabled","is_float","is_hj_whitelisted","is_incrementable","is_negative_disabled","max_length","AMOUNT_MAX_LENGTH","type","ariaLabel","Amount","_ref2","_basis_list$find","_ref2$is_minimized","is_minimized","_useStore","useStore","ui","client","currencies_list","basis","basis_list","is_accumulator","is_equal","is_multiplier","is_turbos","is_vanilla","has_open_accu_contract","stake_boundary","validation_errors","_ref3","toUpperCase","min_stake","max_stake","find","o","text","classNames","_defineProperty","concat","toLowerCase","addComma","changeAmount","_ref4","Fieldset","header","HIGH_LOW","length","ButtonToggle","buttons_arr","map","item","is_animated","is_nativepicker","initial_offset","AllowEquals","_ref5","MultipliersInfo","should_show_tooltip","is_tooltip_relative","MinMaxStakeInfo","hover_value","max_value","min_value","onClick","onMouseEnter","onMouseLeave","arr_ticks","_toConsumableArray","Array","keys","isActive","idx","isMarked","isMarkedOnHover","key","onKeyDown","_React$useState2","_slicedToArray","setHoverValue","range_slider_ref","_e$nativeEvent","nativeEvent","offsetX","offsetY","resetOnHover","getRangeSliderTrackWidth","slider_value","is_hover","current","style","width","display_value","htmlFor","max","min","target_value","tabIndex","ref","TickSteps","index","Text","align","weight","size","color","icon_className","Icon","_regeneratorRuntime","t","r","Object","prototype","n","hasOwnProperty","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","isArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","toString","test","_validation_errors$na","_validation_errors$na2","is_24_hours_contract","mode","server_time","common","current_duration","duration","duration_min_max","duration_units_list","start_date","start_time","symbol","isMounted","useIsMounted","hasRangeSelection","disabled_days","setDisabledDays","_React$useState4","market_events","setMarketEvents","_React$useState6","setDuration","_React$useState8","toMoment","getTomorrowDate","selected_date","setSelectedDate","onChangeCalendarMonth","max_daily_duration","getMomentContractStartDateTime","_server_time$format","_duration_min_max$dai","setTime","hasIntradayDurationUnit","clone","add","daily","isTimeValid","format","getMaxDailyDuration","getMinDateExpiry","is_duration_contract","min_date","startOf","_callee","new_market_events","new_disabled_days","_yield$Promise$all","_yield$Promise$all2","events","trading_days","_args","_context","all","ContractType","getTradingEvents","getTradingDays","reduce","day","includes","evt","dates","split","descrip","has_error","Tooltip","DatePicker","display_format","show_leading_icon","error","max_date","_e$target2","has_range_selection","has_today_btn","footer","keep_open","readOnly","isBetween","to_compare_moment","start_times_moment","end_times_moment","preClass","selected_time","end_times","start_times","end_time","hour","minute","seconds","milliseconds","_selected_time$split2","hours","minutes","selectOption","current_value","prev_value","_prev_value$split2","prev_hour","prev_minute","selected_minute","start_times_reset_minute","is_hour_enabled","is_minute_enabled","is_enabled","mm","class_prefix","_start_times$","_end_times","padding","placeholder","is_open","setIsOpen","wrapper_ref","setWrapperRef","document","addEventListener","handleClickOutside","removeEventListener","handleChange","event","contains","node","is_read_only","CSSTransition","in","enter","enterDone","exit","timeout","unmountOnExit","Dialog","expiry_date","expiry_time","market_open_times","market_close_times","is_market_closed","moment_expiry_date","market_open_datetimes","open_time","market_close_datetimes","close_time","expiry_datetime","server_datetime","boundaries","getBoundaries","getSelectedTime","TimePicker","end","start","_validation_errors$du","advanced_duration_unit","advanced_expiry_type","changeDurationUnit","duration_t","expiry_epoch","expiry_list","getDurationFromUnit","number_input_props","onChangeUiStore","shared_input_props","contract_expiry_type","onChangeMultiple","_getDurationMinMaxVal2","getDurationMinMaxValues","has_intraday_duration_unit","isSame","endtime_container_class","_getUnitMap$advanced_","getUnitMap","name_plural","duration_unit_text","setTimeout","classNameDisplay","RangeSlider","_extends","TradingDatePicker","DurationRangeText","ExpiryText","TradingTimePicker","_duration_units_list$","filtered_arr","simple_duration_unit_prop","simple_duration_unit","_getUnitMap$simple_du","has_label","some","du","filteredMinutesAndTicksList","filter","hasDurationUnit","is_advanced_duration","isVanillaContract","onToggleDurationType","has_end_time","expiry","_duration_units_list$2","moment_expiry","duration_value","is_advanced","current_duration_unit","new_trade_store_values","_objectSpread","passthrough_props","shared_input","duration_name","number_input","has_toggle","AdvancedDuration","SimpleDuration","DurationToggle","DurationWrapper","duration_props","duration_type","duration_list","has_missing_duration_unit","simple_is_missing_duration_unit","assertDurationIsWithinBoundary","_getDurationMinMaxVal4","current_unit","unit","Duration","cancellation_range_list","cancellation_duration","has_cancellation","has_stop_loss","has_take_profit","should_show_cancellation_warning","toggleCancellationWarning","should_show_popover","is_do_not_show_selected","setDoNotShowSelected","onPopoverCheckboxChange","prev_state","input","onToggleCancellation","Localize","i18n_default_text","classNameBubble","is_bubble_hover_enabled","PopoverMessageCheckbox","checkboxLabel","onBubbleClose","onChangeCancellationDuration","_proposal_info$ACCU","_proposal_info$ACCU2","accumulator_range_list","growth_rate","tick_size_barrier_percentage","proposal_info","arr_arr_numbers","acc","_el","has_error_or_not_loaded","ACCU","isEmptyObject","is_center","is_tooltip_disabled","header_tooltip","getGrowthRatePercentage","NumberSelector","selected_number","should_show_in_percents","_ref$is_minimized","form_components","isVisible","component_key","TradeTypeTabs","PayoutSelector","TakeProfit","Barrier","LastDigit","Accumulator","Strike","StopLoss","CancelDeal","Expiration","AccumulatorsInfoDisplay","_ref$is_market_closed","is_trade_enabled","_ref$is_single_loggin","is_single_logging_in","TradeParamsLoader","speed","TradeParams","Purchase","getClosestTime","time","interval","moment_time","moment","Math","ceil","isAfter","isBefore","moment_market_open_time"],"sourceRoot":""}