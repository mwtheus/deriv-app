{"version":3,"file":"cfd/js/utilities.js","mappings":"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","sources":["webpack://@deriv/cfd/./src/Constants/routes-config.tsx","webpack://@deriv/cfd/./src/Helpers/cfd-config.ts","webpack://@deriv/cfd/./src/Helpers/compare-accounts-config.ts","webpack://@deriv/cfd/./src/Helpers/config.tsx","webpack://@deriv/cfd/./src/Helpers/url-config.ts","webpack://@deriv/cfd/./src/Helpers/constants.ts"],"sourcesContent":["import React from 'react';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { Loading } from '@deriv/components';\nimport { TRoute, TRouteConfig } from '../types/types';\n\nconst CFDCompareAccounts = React.lazy(\n    () => import(/* webpackChunkName: \"cfd-compare-accounts\" */ 'Containers/cfd-compare-accounts')\n);\n\n// Error Routes\nconst Page404 = React.lazy(() => import(/* webpackChunkName: \"404\" */ '../Modules/Page404'));\n\n// Order matters\nconst initRoutesConfig = () => [\n    {\n        path: routes.compare_cfds,\n        component: () => (\n            <React.Suspense fallback={<Loading />}>\n                <CFDCompareAccounts />\n            </React.Suspense>\n        ),\n        getTitle: () => localize('Compare CFD accounts'),\n        is_authenticated: false,\n    },\n];\n\nlet routesConfig: TRouteConfig[] | undefined;\n\n// For default page route if page/path is not found, must be kept at the end of routes_config array\nconst route_default: TRoute = { path: routes.error404, component: Page404, getTitle: () => localize('Error 404') };\n\nconst getRoutesConfig = (): TRouteConfig[] => {\n    if (!routesConfig) {\n        routesConfig = initRoutesConfig() as TRouteConfig[];\n        routesConfig.push(route_default);\n    }\n    return routesConfig;\n};\n\nexport type TPage404 = typeof Page404;\n\nexport default getRoutesConfig;\n","export const CFD_PLATFORMS = {\n    MT5: 'mt5',\n    DXTRADE: 'dxtrade',\n    CTRADER: 'ctrader',\n    CFD: 'cfd',\n    CFDS: 'CFDs',\n} as const;\n\nexport const CATEGORY = {\n    DEMO: 'demo',\n    REAL: 'real',\n} as const;\n\nexport const MARKET_TYPE = {\n    SYNTHETIC: 'synthetic',\n    GAMING: 'gaming',\n    FINANCIAL: 'financial',\n    ALL: 'all',\n} as const;\n\nexport const PRODUCT = {\n    SWAPFREE: 'swap_free',\n    ZEROSPREAD: 'zero_spread',\n    CTRADER: 'ctrader',\n    DERIVX: 'derivx',\n    STP: 'stp',\n    GOLD: 'gold',\n} as const;\n\nexport const MOBILE_PLATFORMS = {\n    IOS: 'ios',\n    HAUWEI: 'huawei',\n    ANDROID: 'android',\n} as const;\n\nexport const DESKTOP_PLATFORMS = {\n    WINDOWS: 'windows',\n    LINUX: 'linux',\n    MACOS: 'macos',\n} as const;\n\nexport const REGION = {\n    EU: 'EU',\n    NON_EU: 'Non-EU',\n} as const;\n\nexport const JURISDICTION = {\n    SVG: 'svg',\n    BVI: 'bvi',\n    VANUATU: 'vanuatu',\n    LABUAN: 'labuan',\n    MALTA_INVEST: 'maltainvest',\n} as const;\n\nexport const MARKET_TYPE_SHORTCODE = {\n    SYNTHETIC: 'synthetic',\n    GAMING: 'gaming',\n    FINANCIAL: 'financial',\n    FINANCIAL_LABUAN: 'financial_stp_labuan',\n    FINANCIAL_MALTA_INVEST: 'financial_maltainvest',\n    FINANCIAL_GOLD: 'financial_gold',\n    FINANCIAL_SVG: 'financial_svg',\n    FINANCIAL_BVI: 'financial_bvi',\n    FINANCIAL_DML: 'financial_dml',\n    FINANCIAL_VANUATU: 'financial_vanuatu',\n    CFDS_GOLD: 'CFDs_gold',\n    ALL_SWAP_FREE_SVG: 'all_swap_free_svg',\n    ALL_ZERO_SPREAD_BVI: 'all_zero_spread_bvi',\n    ALL_ZS_BVI: 'all_bvi',\n    ALL_DXTRADE: 'all_',\n} as const;\n\nexport const QUERY_STATUS = {\n    SUCCESS: 'success',\n    ERROR: 'error',\n    IDLE: 'idle',\n    LOADING: 'loading',\n} as const;\n\nexport const PASSWORD_TYPE = {\n    INVESTOR: 'investor',\n} as const;\n","import { localize } from '@deriv/translations';\n\nimport { TInstrumentsIcon, TModifiedTradingPlatformAvailableAccount, TProducts } from '../Components/props.types';\n\nimport { CFD_PLATFORMS, JURISDICTION, MARKET_TYPE, MARKET_TYPE_SHORTCODE, PRODUCT, REGION } from './cfd-config';\n\n// Map the accounts according to the market type\nconst getHighlightedIconLabel = (\n    trading_platforms: TModifiedTradingPlatformAvailableAccount,\n    selected_region?: string\n): TInstrumentsIcon[] => {\n    const market_type = getMarketType(trading_platforms);\n\n    const market_type_shortcode =\n        trading_platforms.product === PRODUCT.GOLD\n            ? market_type.concat('_', trading_platforms.product)\n            : market_type.concat('_', trading_platforms.shortcode ?? '');\n\n    const getForexLabel = () => {\n        if (selected_region === REGION.EU) {\n            return localize('Forex');\n        } else if (market_type_shortcode === MARKET_TYPE_SHORTCODE.FINANCIAL_LABUAN) {\n            return localize('Forex: standard/exotic');\n        } else if (\n            market_type_shortcode === MARKET_TYPE_SHORTCODE.FINANCIAL_GOLD ||\n            market_type_shortcode === MARKET_TYPE_SHORTCODE.FINANCIAL_SVG ||\n            market_type_shortcode === MARKET_TYPE_SHORTCODE.FINANCIAL_BVI ||\n            market_type_shortcode === MARKET_TYPE_SHORTCODE.FINANCIAL_VANUATU ||\n            market_type_shortcode === MARKET_TYPE_SHORTCODE.FINANCIAL_DML\n        ) {\n            return localize('Forex');\n        } else if (\n            (trading_platforms.platform === CFD_PLATFORMS.MT5 &&\n                market_type_shortcode === MARKET_TYPE_SHORTCODE.ALL_SWAP_FREE_SVG) ||\n            trading_platforms.platform === CFD_PLATFORMS.CTRADER\n        ) {\n            return localize('Forex: major/minor');\n        } else if (\n            market_type === MARKET_TYPE.SYNTHETIC ||\n            market_type_shortcode === MARKET_TYPE_SHORTCODE.ALL_ZS_BVI\n        ) {\n            return localize('Forex: standard');\n        }\n        return localize('Forex: standard/micro');\n    };\n    const getIdForInstruments = (instruments: TModifiedTradingPlatformAvailableAccount['instruments']) => {\n        return instruments?.map(item => {\n            if (item.toLowerCase().includes('forex')) {\n                return 'forex';\n            } else if (item === 'ETFs') {\n                return 'ETFs'; // Preserve the original form for ETFs\n            }\n            return item.toLowerCase().replace(/\\s+/g, '_'); // Replace spaces with underscores\n        });\n    };\n\n    const instrumentsData: TInstrumentsIcon[] = [\n        { id: 'forex', icon: 'Forex', text: getForexLabel() },\n        { id: 'stocks', icon: 'Stocks', text: localize('Stocks') },\n        { id: 'stock_indices', icon: 'StockIndices', text: localize('Stock indices') },\n        { id: 'commodities', icon: 'Commodities', text: localize('Commodities') },\n        {\n            id: 'cryptocurrencies',\n            icon: 'Cryptocurrencies',\n            text: localize('Cryptocurrencies'),\n        },\n        { id: 'ETFs', icon: 'ETF', text: localize('ETFs'), is_available: selected_region === REGION.NON_EU },\n        {\n            id: 'synthetic_indices',\n            icon: 'Synthetics',\n            text: localize('Synthetic indices'),\n        },\n        {\n            id: 'basket_indices',\n            icon: 'Baskets',\n            text: localize('Basket indices'),\n            is_available: selected_region === REGION.NON_EU,\n        },\n    ];\n\n    return instrumentsData.map((item: TInstrumentsIcon) => ({\n        ...item, // Copy all existing properties\n        highlighted: getIdForInstruments(trading_platforms?.instruments)?.includes(item?.id ?? '') ?? true,\n    }));\n};\n\n// Get the Account Title according to the market type and jurisdiction\nconst getAccountCardTitle = (shortcode: string, is_demo?: boolean) => {\n    switch (shortcode) {\n        case MARKET_TYPE_SHORTCODE.SYNTHETIC:\n            return is_demo ? localize('Standard demo') : localize('Standard');\n        case MARKET_TYPE_SHORTCODE.FINANCIAL:\n            return is_demo ? localize('Financial demo') : localize('Financial');\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_LABUAN:\n            return localize('Financial - STP');\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_GOLD:\n        case MARKET_TYPE_SHORTCODE.CFDS_GOLD:\n            return is_demo ? localize('Gold demo') : localize('Gold');\n        case MARKET_TYPE_SHORTCODE.ALL_SWAP_FREE_SVG:\n            return is_demo ? localize('Swap-Free demo') : localize('Swap-Free');\n        case MARKET_TYPE_SHORTCODE.ALL_ZERO_SPREAD_BVI:\n            return is_demo ? localize('Zero Spread demo') : localize('Zero Spread');\n        case CFD_PLATFORMS.DXTRADE:\n            return is_demo ? localize('Deriv X demo') : localize('Deriv X');\n        case CFD_PLATFORMS.CTRADER:\n            return is_demo ? localize('Deriv cTrader demo') : localize('Deriv cTrader');\n        default:\n            return is_demo ? localize('CFDs demo') : localize('CFDs');\n    }\n};\n\n// Get the Platform label\nconst getPlatformLabel = (shortcode?: string) => {\n    switch (shortcode) {\n        case CFD_PLATFORMS.DXTRADE:\n            return localize('Deriv X');\n        case CFD_PLATFORMS.CFDS:\n            return localize('Other CFDs Platform');\n        case CFD_PLATFORMS.CTRADER:\n            return localize('Deriv cTrader');\n        case CFD_PLATFORMS.MT5:\n        default:\n            return localize('MT5 Platform');\n    }\n};\n\n// Object to map the platform label\nconst platformsHeaderLabel = {\n    mt5: localize('MT5 Platform'),\n    ctrader: localize('Deriv cTrader'),\n    derivx: localize('Deriv X'),\n    other_cfds: localize('Other CFDs Platform'),\n};\n\n// Get the Account Icons based on the market type\nconst getAccountIcon = (shortcode: string, product?: TProducts) => {\n    switch (shortcode) {\n        case MARKET_TYPE.SYNTHETIC:\n        case MARKET_TYPE.GAMING:\n            return 'Standard';\n        case MARKET_TYPE.FINANCIAL:\n            switch (product) {\n                case PRODUCT.GOLD:\n                    return 'Gold';\n                default:\n                    return 'Financial';\n            }\n        case MARKET_TYPE.ALL:\n            switch (product) {\n                case PRODUCT.ZEROSPREAD:\n                    return 'ZeroSpread';\n                case PRODUCT.SWAPFREE:\n                default:\n                    return 'SwapFree';\n            }\n        case CFD_PLATFORMS.DXTRADE:\n            return 'DerivX';\n        case CFD_PLATFORMS.CTRADER:\n            return 'CTrader';\n        default:\n            switch (product) {\n                case PRODUCT.GOLD:\n                    return 'Gold';\n                default:\n                    return 'CFDs';\n            }\n    }\n};\n\n// Convert the market type from gaming to synthethics\nconst getMarketType = (trading_platforms: TModifiedTradingPlatformAvailableAccount) => {\n    return trading_platforms.market_type === MARKET_TYPE.GAMING ? MARKET_TYPE.SYNTHETIC : trading_platforms.market_type;\n};\n\n// Get the color of Header based on the platform\nconst getHeaderColor = (shortcode: string) => {\n    switch (shortcode) {\n        case platformsHeaderLabel.ctrader:\n            return 'orange';\n        case platformsHeaderLabel.derivx:\n            return 'green';\n        case platformsHeaderLabel.mt5:\n        case platformsHeaderLabel.other_cfds:\n        default:\n            return 'blue';\n    }\n};\n\nconst getDefaultJurisdictionDetails = (data: TModifiedTradingPlatformAvailableAccount) => {\n    const leverage = `${data?.product_details?.max_leverage}`;\n    const spread = `${data?.product_details?.min_spread} pips`;\n\n    return {\n        leverage,\n        leverage_description: localize('Maximum leverage'),\n        spread,\n        spread_description: localize('Spreads from'),\n    };\n};\n\n// Config for different Jurisdictions\nconst cfd_config = () => ({\n    leverage: '1:1000',\n    leverage_description: localize('Maximum leverage'),\n    spread: '0.5 pips',\n    spread_description: localize('Spreads from'),\n    counterparty_company: 'Deriv (SVG) LLC',\n    counterparty_company_description: localize('Counterparty company'),\n    jurisdiction: 'St. Vincent & Grenadines',\n    jurisdiction_description: localize('Jurisdiction'),\n    regulator: localize('Financial Commission'),\n    regulator_description: localize('Regulator/External dispute resolution'),\n    regulator_license: '',\n});\n\n// Map the Jurisdictions with the config\nconst getJuridisctionDescription = (shortcode: string, trading_platforms: TModifiedTradingPlatformAvailableAccount) => {\n    switch (shortcode) {\n        case MARKET_TYPE_SHORTCODE.SYNTHETIC:\n        case MARKET_TYPE_SHORTCODE.FINANCIAL:\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_LABUAN:\n        case MARKET_TYPE_SHORTCODE.ALL_ZERO_SPREAD_BVI:\n        case MARKET_TYPE_SHORTCODE.ALL_SWAP_FREE_SVG:\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_MALTA_INVEST:\n            return getDefaultJurisdictionDetails(trading_platforms);\n        case MARKET_TYPE_SHORTCODE.ALL_DXTRADE:\n        default:\n            return cfd_config();\n    }\n};\n\n// Sort the MT5 accounts in the order of derived, financial and swap-free\nconst getSortedCFDAvailableAccounts = (available_accounts: TModifiedTradingPlatformAvailableAccount[]) => {\n    const swap_free_accounts = available_accounts\n        .filter(\n            item =>\n                item.market_type === MARKET_TYPE.ALL &&\n                item.product === PRODUCT.SWAPFREE &&\n                item.is_default_jurisdiction === 'true'\n        )\n        .map(item => ({ ...item, platform: CFD_PLATFORMS.MT5 }) as const);\n    const zero_spread_accounts = available_accounts\n        .filter(\n            item =>\n                item.market_type === MARKET_TYPE.ALL &&\n                item.product === PRODUCT.ZEROSPREAD &&\n                item.is_default_jurisdiction === 'true'\n        )\n        .map(item => ({ ...item, platform: CFD_PLATFORMS.MT5 }) as const);\n    const financial_accounts = available_accounts\n        .filter(\n            item =>\n                item.market_type === MARKET_TYPE.FINANCIAL &&\n                item.shortcode !== JURISDICTION.MALTA_INVEST &&\n                item.product !== PRODUCT.GOLD &&\n                item.is_default_jurisdiction === 'true'\n        )\n        .map(item => ({ ...item, platform: CFD_PLATFORMS.MT5 }) as const);\n\n    const gold_accounts = available_accounts\n        .filter(\n            item =>\n                item.market_type === MARKET_TYPE.FINANCIAL &&\n                item.shortcode !== JURISDICTION.MALTA_INVEST &&\n                item.product === PRODUCT.GOLD &&\n                item.is_default_jurisdiction === 'true'\n        )\n        .map(item => ({ ...item, platform: CFD_PLATFORMS.MT5 }) as const);\n\n    const gaming_accounts = available_accounts\n        .filter(item => item.market_type === MARKET_TYPE.GAMING && item.is_default_jurisdiction === 'true')\n        .map(item => ({ ...item, platform: CFD_PLATFORMS.MT5 }) as const);\n    return [\n        ...gaming_accounts,\n        ...financial_accounts,\n        ...swap_free_accounts,\n        ...zero_spread_accounts,\n        ...gold_accounts,\n    ];\n};\n\n// Get the maltainvest accounts for EU and DIEL clients\nconst getEUAvailableAccounts = (available_accounts: TModifiedTradingPlatformAvailableAccount[]) => {\n    const financial_accounts = available_accounts\n        .filter(\n            item =>\n                item.shortcode === JURISDICTION.MALTA_INVEST &&\n                item.is_default_jurisdiction === 'true' &&\n                item.product !== PRODUCT.GOLD\n        )\n        .map(item => ({ ...item, platform: CFD_PLATFORMS.MT5 }) as const);\n\n    const gold_accounts = available_accounts\n        .filter(\n            item =>\n                item.market_type === MARKET_TYPE.FINANCIAL &&\n                item.shortcode === JURISDICTION.MALTA_INVEST &&\n                item.is_default_jurisdiction === 'true' &&\n                item.product === PRODUCT.GOLD\n        )\n        .map(item => ({ ...item, platform: CFD_PLATFORMS.MT5 }) as const);\n\n    return [...financial_accounts, ...gold_accounts];\n};\n\n// Make the Deriv X data same as trading_platform_available_accounts\nconst dxtrade_data: TModifiedTradingPlatformAvailableAccount = {\n    market_type: MARKET_TYPE.ALL,\n    name: 'Deriv X',\n    requirements: {\n        after_first_deposit: {\n            financial_assessment: [''],\n        },\n        compliance: {\n            mt5: [''],\n            tax_information: [''],\n        },\n        signup: [''],\n    },\n    shortcode: JURISDICTION.SVG,\n    sub_account_type: '',\n    platform: CFD_PLATFORMS.DXTRADE,\n    product: PRODUCT.DERIVX,\n};\n\nconst ctrader_data: TModifiedTradingPlatformAvailableAccount = {\n    market_type: MARKET_TYPE.ALL,\n    name: 'cTrader',\n    requirements: {\n        after_first_deposit: {\n            financial_assessment: [''],\n        },\n        compliance: {\n            mt5: [''],\n            tax_information: [''],\n        },\n        signup: [''],\n    },\n    shortcode: JURISDICTION.SVG,\n    sub_account_type: '',\n    platform: CFD_PLATFORMS.CTRADER,\n    product: 'ctrader',\n};\n\n// Get the MT5 demo accounts of the user\nconst getMT5DemoData = (available_accounts: TModifiedTradingPlatformAvailableAccount[]) => {\n    const swap_free_demo_accounts = available_accounts.filter(\n        item =>\n            item.market_type === MARKET_TYPE.ALL &&\n            item.shortcode === JURISDICTION.SVG &&\n            item.product === PRODUCT.SWAPFREE &&\n            item.platform === CFD_PLATFORMS.MT5\n    );\n    const zero_spread_demo_accounts = available_accounts.filter(\n        item =>\n            item.market_type === MARKET_TYPE.ALL &&\n            item.shortcode === JURISDICTION.BVI &&\n            item.product === PRODUCT.ZEROSPREAD &&\n            item.platform === CFD_PLATFORMS.MT5\n    );\n    const financial_demo_accounts = available_accounts.filter(\n        item =>\n            item.market_type === MARKET_TYPE.FINANCIAL && item.product !== PRODUCT.STP && item.product !== PRODUCT.GOLD\n    );\n    const gaming_demo_accounts = available_accounts.filter(item => item.market_type === MARKET_TYPE.GAMING);\n\n    const gold_demo_accounts = available_accounts.filter(\n        item => item.market_type === MARKET_TYPE.FINANCIAL && item.product === PRODUCT.GOLD\n    );\n\n    return [\n        ...gaming_demo_accounts,\n        ...financial_demo_accounts,\n        ...swap_free_demo_accounts,\n        ...zero_spread_demo_accounts,\n        ...gold_demo_accounts,\n    ];\n};\nconst getDxtradeDemoData = (available_accounts: TModifiedTradingPlatformAvailableAccount[]) => {\n    return available_accounts.filter(item => item.platform === CFD_PLATFORMS.DXTRADE);\n};\n\nconst getCtraderDemoData = (available_accounts: TModifiedTradingPlatformAvailableAccount[]) => {\n    return available_accounts.filter(item => item.platform === CFD_PLATFORMS.CTRADER);\n};\n\nconst generateMarketTypeShortcode = (\n    trading_platforms: TModifiedTradingPlatformAvailableAccount,\n    market_type: TModifiedTradingPlatformAvailableAccount['market_type'] | 'CFDs'\n) => {\n    // First check if platform is MT5\n    if (trading_platforms.platform !== CFD_PLATFORMS.MT5) {\n        return market_type ?? '';\n    }\n\n    // Check conditions for generating full shortcode\n    const isAllMarketType = market_type === MARKET_TYPE.ALL;\n    const isSTPProduct = trading_platforms.product === PRODUCT.STP;\n    const isGoldProduct = trading_platforms.product === PRODUCT.GOLD;\n\n    if (isAllMarketType || isSTPProduct) {\n        return `${market_type}_${trading_platforms.product}_${trading_platforms.shortcode}`;\n    }\n\n    if (isGoldProduct) {\n        return `${market_type}_${trading_platforms.product}`;\n    }\n\n    return market_type ?? '';\n};\n\nexport {\n    getHighlightedIconLabel,\n    getJuridisctionDescription,\n    getDefaultJurisdictionDetails,\n    getAccountCardTitle,\n    getMarketType,\n    getAccountIcon,\n    getPlatformLabel,\n    getSortedCFDAvailableAccounts,\n    getEUAvailableAccounts,\n    dxtrade_data,\n    ctrader_data,\n    getHeaderColor,\n    platformsHeaderLabel,\n    getMT5DemoData,\n    getDxtradeDemoData,\n    getCtraderDemoData,\n    generateMarketTypeShortcode,\n};\n","import React from 'react';\nimport { QRCode } from 'react-qrcode';\n\nimport { Icon, Text, Button } from '@deriv/components';\nimport { TCFDsPlatformType, TMobilePlatforms } from 'Components/props.types';\nimport {\n    getPlatformDXTradeDownloadLink,\n    getPlatformCTraderDownloadLink,\n    getDXTradeWebTerminalLink,\n    getCTraderWebTerminalLink,\n    platformsIcons,\n    platformsText,\n    CTRADER_URL,\n} from './constants';\nimport { isMobile } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\n\nimport { TCFDDashboardContainer } from 'Containers/props.types';\nimport { CATEGORY, CFD_PLATFORMS } from './cfd-config';\n\nexport const mobileDownloadLink = (platform: TCFDsPlatformType, type: TMobilePlatforms) => {\n    switch (platform) {\n        case CFD_PLATFORMS.DXTRADE:\n            return getPlatformDXTradeDownloadLink(type);\n        case CFD_PLATFORMS.CTRADER:\n            return getPlatformCTraderDownloadLink(type);\n        default:\n            return getPlatformDXTradeDownloadLink(type);\n    }\n};\n\nexport const getPlatformQRCode = (acc_type: TCFDsPlatformType) => {\n    const qr_code_mobile = isMobile() ? '100%' : '80%';\n\n    const QRCodeLinks = () => {\n        switch (acc_type) {\n            case CFD_PLATFORMS.DXTRADE:\n                return 'https://onelink.to/grmtyx';\n            case CFD_PLATFORMS.CTRADER:\n                return 'https://onelink.to/5jgj8z';\n            default:\n                return 'https://onelink.to/grmtyx';\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <QRCode\n                value={QRCodeLinks()}\n                size={5}\n                style={{ height: 'auto', maxWidth: '100%', width: qr_code_mobile }}\n            />\n            <Text align='center' size='xxs'>\n                <Localize\n                    i18n_default_text='Scan the QR code to download Deriv {{ platform }}.'\n                    values={{ platform: platformsText(acc_type) }}\n                />\n            </Text>\n        </React.Fragment>\n    );\n};\n\ntype TPlatformsDesktopDownload = {\n    platform: TCFDsPlatformType;\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n    ctrader_tokens: TCFDDashboardContainer['ctrader_tokens'];\n    is_demo: string;\n    ctraderTokenCall: (url: string, account_type: 'real' | 'demo') => void;\n};\n\nexport const PlatformsDesktopDownload = ({\n    platform,\n    dxtrade_tokens,\n    ctrader_tokens,\n    ctraderTokenCall,\n    is_demo,\n}: TPlatformsDesktopDownload) => {\n    const PlatformsDesktopDownloadLinks = () => {\n        switch (platform) {\n            case CFD_PLATFORMS.CTRADER:\n                return getCTraderWebTerminalLink(\n                    ctrader_tokens && ctrader_tokens[is_demo ? CATEGORY.DEMO : CATEGORY.REAL]\n                );\n            case CFD_PLATFORMS.DXTRADE:\n                return getDXTradeWebTerminalLink(\n                    is_demo ? CATEGORY.DEMO : CATEGORY.REAL,\n                    dxtrade_tokens[is_demo ? CATEGORY.DEMO : CATEGORY.REAL]\n                );\n            default:\n                return '';\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Button\n                className='cfd-trade-modal__platform-button'\n                onClick={() => {\n                    if (platform === CFD_PLATFORMS.CTRADER) {\n                        ctraderTokenCall(CTRADER_URL, is_demo ? 'demo' : 'real');\n                    } else {\n                        window.open(PlatformsDesktopDownloadLinks());\n                    }\n                }}\n            >\n                <div className='cfd-trade-modal__platform-button-text'>\n                    <Text color='general' size='xxs' weight='bold'>\n                        <Localize i18n_default_text='Web terminal' />\n                    </Text>\n                </div>\n            </Button>\n        </React.Fragment>\n    );\n};\n","/**\n * This file contains the URLs for different platforms and environments.\n * urlConfig will be sent as a proposal to the backend.\n */\n\n/**\n * URLs for the cTrader platform.\n */\nexport const ctrader_links = {\n    android: 'https://play.google.com/store/apps/details?id=com.deriv.ct',\n    ios: 'https://apps.apple.com/us/app/deriv-ctrader/id6466996509',\n    live: 'https://ct.deriv.com',\n    staging: 'https://ct-uat.deriv.com',\n    windows: 'https://getctrader.com/deriv/ctrader-deriv-setup.exe',\n    mac: 'https://getctradermac.com/deriv/ctrader-deriv-setup.dmg',\n};\n\n/**\n * URLs for the dxTrade platform.\n */\nexport const dxtrade_links = {\n    android: 'https://play.google.com/store/apps/details?id=com.deriv.dx',\n    huawei: 'https://appgallery.huawei.com/app/C104633219',\n    ios: 'https://apps.apple.com/us/app/deriv-x/id1563337503',\n    demo: 'https://dx-demo.deriv.com',\n    live: 'https://dx.deriv.com',\n};\n\n/**\n * URLs for the mt5 platform.\n */\nexport const white_label_links = {\n    android: 'https://download.mql5.com/cdn/mobile/mt5/android?server=Deriv-Demo,Deriv-Server,Deriv-Server-02',\n    huawei: 'https://appgallery.huawei.com/#/app/C102015329',\n    ios: 'https://download.mql5.com/cdn/mobile/mt5/ios?server=Deriv-Demo,Deriv-Server,Deriv-Server-02',\n    linux: 'https://www.metatrader5.com/en/terminal/help/start_advanced/install_linux',\n    macos: 'https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/MetaTrader5.dmg',\n    windows: 'https://download.mql5.com/cdn/web/deriv.com.limited/mt5/deriv5setup.exe',\n    webtrader_url: 'https://mt5-real01-web-svg.deriv.com/terminal',\n};\n","import {\n    OSDetect,\n    getPlatformFromUrl,\n    getErrorMessages,\n    validLength,\n    validPassword,\n    validMT5Password,\n    mobileOSDetectAsync,\n} from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TCFDsPlatformType, TDetailsOfEachMT5Loginid, TMobilePlatforms } from 'Components/props.types';\nimport { CFD_PLATFORMS, MOBILE_PLATFORMS, DESKTOP_PLATFORMS, CATEGORY } from './cfd-config';\nimport { white_label_links } from './url-config';\n\nconst platformsText = (platform: TCFDsPlatformType) => {\n    switch (platform) {\n        case CFD_PLATFORMS.CTRADER:\n            return 'cTrader';\n        case CFD_PLATFORMS.DXTRADE:\n            return 'X';\n        default:\n            return '';\n    }\n};\n\nconst platformsIcons = (platform: TCFDsPlatformType) => {\n    switch (platform) {\n        case CFD_PLATFORMS.DXTRADE:\n            return 'Dxtrade';\n        case CFD_PLATFORMS.CTRADER:\n            return 'Ctrader';\n        default:\n            return '';\n    }\n};\n\nconst getTitle = (market_type: string, is_eu_user: boolean) => {\n    if (is_eu_user) localize('MT5 CFDs');\n    return market_type;\n};\n\nconst { is_staging, is_test_link } = getPlatformFromUrl();\n\nconst STRATEGY_PROVIDER_NOTES = () => [\n    localize('When setting up a strategy, you have the option to impose fees.'),\n    localize(\n        'For strategies where you impose fees, you must assign one of your existing accounts to process these fees. The same ‘Account For Fees’ can support multiple fee-based strategies.'\n    ),\n    localize('Free strategies do not require an ‘Account For Fees’.'),\n    localize('An account designated as a strategy provider is irreversible unless it remains inactive for 30 days.'),\n    localize('An account cannot simultaneously be a strategy provider and serve as an ‘Account For Fees’.'),\n];\n\nconst REAL_DXTRADE_URL = 'https://dx.deriv.com';\nconst DEMO_DXTRADE_URL = 'https://dx-demo.deriv.com';\n\nconst CTRADER_DOWNLOAD_LINK = 'https://ctrader.com/download/';\nconst CTRADER_DESKTOP_MAC_DOWNLOAD = 'https://getctradermac.com/deriv/ctrader-deriv-setup.dmg';\nconst CTRADER_DESKTOP_WINDOWS_DOWNLOAD = 'https://getctrader.com/deriv/ctrader-deriv-setup.exe';\n\nconst CTRADER_UAT_URL = 'https://ct-uat.deriv.com/';\nconst CTRADER_PRODUCTION_URL = 'https://ct.deriv.com/';\n\nconst DXTRADE_IOS_APP_URL = 'https://apps.apple.com/us/app/deriv-x/id1563337503';\nconst DXTRADE_ANDROID_APP_URL = 'https://play.google.com/store/apps/details?id=com.deriv.dx';\nconst DXTRADE_HUAWEI_APP_URL = 'https://appgallery.huawei.com/app/C104633219';\n\nconst CTRADER_IOS_APP_URL = 'https://apps.apple.com/us/app/deriv-ctrader/id6466996509';\nconst CTRADER_ANDROID_APP_URL = 'https://play.google.com/store/apps/details?id=com.deriv.ct';\n\nconst CTRADER_URL = is_staging || is_test_link ? CTRADER_UAT_URL : CTRADER_PRODUCTION_URL;\n\nconst getTopUpConfig = () => {\n    return {\n        minimum_amount: 1000,\n        additional_amount: 10000,\n    };\n};\n\nconst getPlatformDXTradeDownloadLink = (platform?: TMobilePlatforms) => {\n    switch (platform) {\n        case MOBILE_PLATFORMS.IOS:\n            return DXTRADE_IOS_APP_URL;\n        case MOBILE_PLATFORMS.HAUWEI:\n            return DXTRADE_HUAWEI_APP_URL;\n        case MOBILE_PLATFORMS.ANDROID:\n            return DXTRADE_ANDROID_APP_URL;\n        default:\n            return '';\n    }\n};\n\nconst getPlatformCTraderDownloadLink = (platform: TMobilePlatforms) => {\n    switch (platform) {\n        case MOBILE_PLATFORMS.IOS:\n            return CTRADER_IOS_APP_URL;\n        case MOBILE_PLATFORMS.ANDROID:\n            return CTRADER_ANDROID_APP_URL;\n        case MOBILE_PLATFORMS.HAUWEI:\n            return '';\n        default:\n            return CTRADER_ANDROID_APP_URL;\n    }\n};\n\nconst getPlatformMt5DownloadLink = (platform: string | undefined = undefined) => {\n    switch (platform || OSDetect()) {\n        case DESKTOP_PLATFORMS.LINUX:\n            return 'https://www.metatrader5.com/en/terminal/help/start_advanced/install_linux';\n        case DESKTOP_PLATFORMS.MACOS:\n            return 'https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/MetaTrader5.dmg';\n        case MOBILE_PLATFORMS.HAUWEI:\n            return 'https://appgallery.huawei.com/#/app/C102015329';\n        default:\n            return '';\n    }\n};\n\nconst getDXTradeWebTerminalLink = (category: string, token?: string) => {\n    let url = category === CATEGORY.REAL ? REAL_DXTRADE_URL : DEMO_DXTRADE_URL;\n\n    if (token) {\n        url += `?token=${token}`;\n    }\n\n    return url;\n};\n\nconst getCTraderWebTerminalLink = (token?: string) => {\n    return `${CTRADER_URL}${token && `?token=${token}`}`;\n};\n\nconst validatePassword = (password: string): string | undefined => {\n    if (\n        !validLength(password, {\n            min: 8,\n            max: 16,\n        })\n    ) {\n        return localize('You should enter {{min_number}}-{{max_number}} characters.', {\n            min_number: 8,\n            max_number: 16,\n        });\n    } else if (!validPassword(password)) {\n        return getErrorMessages().password();\n    } else if (!validMT5Password(password)) {\n        return localize('Please include at least 1 special character such as ( _ @ ? ! / # ) in your password.');\n    }\n};\n\nconst getMobileAppInstallerURL = async ({ mt5_trade_account }: { mt5_trade_account: TDetailsOfEachMT5Loginid }) => {\n    const os = await mobileOSDetectAsync();\n\n    if (os === 'iOS') {\n        return mt5_trade_account?.white_label_links?.ios;\n    } else if (os === 'huawei') {\n        return getPlatformMt5DownloadLink('huawei');\n    }\n    return mt5_trade_account?.white_label_links?.android;\n};\n\nconst getDesktopDownloadOptions = ({ mt5_trade_account }: { mt5_trade_account: TDetailsOfEachMT5Loginid }) => {\n    const downloadOptions = [\n        {\n            icon: 'IcRebrandingMt5Logo',\n            text: 'MetaTrader 5 web',\n            button_text: 'Open',\n            href: getWebtraderUrl({ mt5_trade_account }),\n        },\n        {\n            icon: 'IcWindowsLogo',\n            text: localize('MetaTrader 5 Windows app'),\n            button_text: 'Download',\n            href: mt5_trade_account?.white_label_links?.windows,\n        },\n        {\n            icon: 'IcMacosLogo',\n            text: localize('MetaTrader 5 MacOS app'),\n            button_text: 'Download',\n            href: getPlatformMt5DownloadLink('macos'),\n        },\n        {\n            icon: 'IcLinuxLogo',\n            text: localize('MetaTrader 5 Linux app'),\n            button_text: 'Learn more',\n            href: getPlatformMt5DownloadLink('linux'),\n        },\n    ];\n\n    return downloadOptions;\n};\n\nconst getMobileDownloadOptions = ({ mt5_trade_account }: { mt5_trade_account: TDetailsOfEachMT5Loginid }) => [\n    {\n        href: mt5_trade_account?.white_label_links?.ios,\n        icon: 'IcInstallationApple',\n    },\n    {\n        href: mt5_trade_account?.white_label_links?.android,\n        icon: 'IcInstallationGoogle',\n    },\n    {\n        href: getPlatformMt5DownloadLink('huawei'),\n        icon: 'IcInstallationHuawei',\n    },\n];\n\nexport const getWebtraderUrl = ({ mt5_trade_account }: { mt5_trade_account: TDetailsOfEachMT5Loginid }) => {\n    return `${mt5_trade_account?.white_label_links?.webtrader_url}?login=${mt5_trade_account?.display_login}&server=${mt5_trade_account?.server_info?.environment}`;\n};\n\nexport const getDeeplinkUrl = ({ mt5_trade_account }: { mt5_trade_account: TDetailsOfEachMT5Loginid }) => {\n    return `metatrader5://account?login=${mt5_trade_account?.display_login}&server=${mt5_trade_account?.server_info?.environment}`;\n};\n\nexport const getMobileAppInstallerUrl = async ({\n    mt5_trade_account,\n}: {\n    mt5_trade_account: TDetailsOfEachMT5Loginid;\n}) => {\n    const os = await mobileOSDetectAsync();\n    if (os === 'iOS') {\n        return mt5_trade_account?.white_label_links?.ios;\n    } else if (os === 'huawei') {\n        return white_label_links?.huawei;\n    }\n    return mt5_trade_account?.white_label_links?.android;\n};\n\nexport {\n    REAL_DXTRADE_URL,\n    DEMO_DXTRADE_URL,\n    CTRADER_URL,\n    CTRADER_DOWNLOAD_LINK,\n    platformsText,\n    STRATEGY_PROVIDER_NOTES,\n    getPlatformDXTradeDownloadLink,\n    getPlatformCTraderDownloadLink,\n    getPlatformMt5DownloadLink,\n    CTRADER_DESKTOP_MAC_DOWNLOAD,\n    CTRADER_DESKTOP_WINDOWS_DOWNLOAD,\n    getDXTradeWebTerminalLink,\n    getCTraderWebTerminalLink,\n    platformsIcons,\n    getTitle,\n    getTopUpConfig,\n    validatePassword,\n    getMobileAppInstallerURL,\n    getDesktopDownloadOptions,\n    getMobileDownloadOptions,\n};\n"],"names":["routesConfig","CFDCompareAccounts","React","Page404","route_default","path","routes","error404","component","getTitle","localize","getRoutesConfig","compare_cfds","fallback","Loading","is_authenticated","push","CFD_PLATFORMS","MT5","DXTRADE","CTRADER","CFD","CFDS","CATEGORY","DEMO","REAL","MARKET_TYPE","SYNTHETIC","GAMING","FINANCIAL","ALL","PRODUCT","SWAPFREE","ZEROSPREAD","DERIVX","STP","GOLD","MOBILE_PLATFORMS","IOS","HAUWEI","ANDROID","DESKTOP_PLATFORMS","WINDOWS","LINUX","MACOS","REGION","EU","NON_EU","JURISDICTION","SVG","BVI","VANUATU","LABUAN","MALTA_INVEST","MARKET_TYPE_SHORTCODE","FINANCIAL_LABUAN","FINANCIAL_MALTA_INVEST","FINANCIAL_GOLD","FINANCIAL_SVG","FINANCIAL_BVI","FINANCIAL_DML","FINANCIAL_VANUATU","CFDS_GOLD","ALL_SWAP_FREE_SVG","ALL_ZERO_SPREAD_BVI","ALL_ZS_BVI","ALL_DXTRADE","getHighlightedIconLabel","trading_platforms","selected_region","_trading_platforms$sh","market_type","getMarketType","market_type_shortcode","product","concat","shortcode","id","icon","text","platform","is_available","map","item","_getIdForInstruments$","_getIdForInstruments","_item$id","instruments","_objectSpread","highlighted","toLowerCase","includes","replace","getAccountCardTitle","is_demo","getPlatformLabel","platformsHeaderLabel","mt5","ctrader","derivx","other_cfds","getAccountIcon","getHeaderColor","getJuridisctionDescription","leverage","data","_data$product_details","product_details","max_leverage","spread","_data$product_details2","min_spread","leverage_description","spread_description","counterparty_company","counterparty_company_description","jurisdiction","jurisdiction_description","regulator","regulator_description","regulator_license","getSortedCFDAvailableAccounts","available_accounts","swap_free_accounts","filter","is_default_jurisdiction","zero_spread_accounts","financial_accounts","gold_accounts","gaming_accounts","_toConsumableArray","getEUAvailableAccounts","dxtrade_data","name","requirements","after_first_deposit","financial_assessment","compliance","tax_information","signup","sub_account_type","ctrader_data","getMT5DemoData","swap_free_demo_accounts","zero_spread_demo_accounts","financial_demo_accounts","gaming_demo_accounts","gold_demo_accounts","getDxtradeDemoData","getCtraderDemoData","generateMarketTypeShortcode","isAllMarketType","isSTPProduct","isGoldProduct","mobileDownloadLink","type","getPlatformDXTradeDownloadLink","getPlatformCTraderDownloadLink","getPlatformQRCode","acc_type","qr_code_mobile","isMobile","QRCode","value","QRCodeLinks","size","style","height","maxWidth","width","Text","align","Localize","i18n_default_text","values","platformsText","PlatformsDesktopDownload","_ref","dxtrade_tokens","ctrader_tokens","ctraderTokenCall","Button","className","onClick","CTRADER_URL","window","open","getCTraderWebTerminalLink","getDXTradeWebTerminalLink","PlatformsDesktopDownloadLinks","color","weight","white_label_links","android","huawei","ios","linux","macos","windows","webtrader_url","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_ref8","is_eu_user","_getPlatformFromUrl","getPlatformFromUrl","is_staging","is_test_link","STRATEGY_PROVIDER_NOTES","CTRADER_DESKTOP_MAC_DOWNLOAD","CTRADER_DESKTOP_WINDOWS_DOWNLOAD","CTRADER_ANDROID_APP_URL","getTopUpConfig","minimum_amount","additional_amount","getPlatformMt5DownloadLink","undefined","OSDetect","category","token","url","validatePassword","password","validLength","min","max","validPassword","validMT5Password","getErrorMessages","min_number","max_number","getDesktopDownloadOptions","_ref3","_mt5_trade_account$wh3","mt5_trade_account","button_text","href","getWebtraderUrl","getMobileDownloadOptions","_ref4","_mt5_trade_account$wh4","_mt5_trade_account$wh5","_ref5","_mt5_trade_account$wh6","_mt5_trade_account$se","display_login","server_info","environment","getDeeplinkUrl","_ref6","_mt5_trade_account$se2","getMobileAppInstallerUrl","_callee2","_ref7","_mt5_trade_account$wh8","os","_mt5_trade_account$wh7","_context2","mobileOSDetectAsync","_x2"],"sourceRoot":""}